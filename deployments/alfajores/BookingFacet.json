{
  "address": "0x07Fc6E4CbEe1a4F02DDFf56BeaC00c50B26c3754",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "executer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16[2][]",
          "name": "bookings",
          "type": "uint16[2][]"
        }
      ],
      "name": "BookingCheckedIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "executer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16[2][]",
          "name": "bookings",
          "type": "uint16[2][]"
        }
      ],
      "name": "BookingConfirmed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16[2][]",
          "name": "bookings",
          "type": "uint16[2][]"
        }
      ],
      "name": "CanceledBookings",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16[2][]",
          "name": "bookings",
          "type": "uint16[2][]"
        }
      ],
      "name": "NewBookings",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "number",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "leapYear",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "YearAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "number",
          "type": "uint16"
        }
      ],
      "name": "YearRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "number",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "leapYear",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "YearUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "number",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "leapYear",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "addAccommodationYear",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[2][]",
          "name": "dates",
          "type": "uint16[2][]"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "bookAccommodation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[2][]",
          "name": "dates",
          "type": "uint16[2][]"
        }
      ],
      "name": "cancelAccommodation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint16[2][]",
          "name": "dates",
          "type": "uint16[2][]"
        }
      ],
      "name": "cancelAccommodationFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "checkedInNightsByYearFor",
      "outputs": [
        {
          "internalType": "uint16[2][]",
          "name": "",
          "type": "uint16[2][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint16[2][]",
          "name": "dates",
          "type": "uint16[2][]"
        }
      ],
      "name": "checkinAccommodationFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint16[2][]",
          "name": "dates",
          "type": "uint16[2][]"
        }
      ],
      "name": "confirmAccommodationFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "number",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "enableAccommodationYear",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "yearNum",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "dayOfYear",
          "type": "uint16"
        }
      ],
      "name": "getAccommodationBooking",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "enum BookingMapLib.BookingStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "year",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "dayOfYear",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct BookingMapLib.Booking",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_year",
          "type": "uint16"
        }
      ],
      "name": "getAccommodationBookings",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum BookingMapLib.BookingStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "year",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "dayOfYear",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct BookingMapLib.Booking[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "number",
          "type": "uint16"
        }
      ],
      "name": "getAccommodationYear",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "number",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "leapYear",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            }
          ],
          "internalType": "struct BookingMapLib.Year",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAccommodationYears",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "number",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "leapYear",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            }
          ],
          "internalType": "struct BookingMapLib.Year[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "year",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "day",
          "type": "uint16"
        }
      ],
      "name": "lockedStakeAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "number",
          "type": "uint16"
        }
      ],
      "name": "removeAccommodationYear",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "year",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "day",
          "type": "uint16"
        }
      ],
      "name": "unlockedStakeAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "number",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "leapYear",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "updateAccommodationYear",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "babe52493e3e52db84ddc31386b0117d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16[2][]\",\"name\":\"bookings\",\"type\":\"uint16[2][]\"}],\"name\":\"BookingCheckedIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16[2][]\",\"name\":\"bookings\",\"type\":\"uint16[2][]\"}],\"name\":\"BookingConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16[2][]\",\"name\":\"bookings\",\"type\":\"uint16[2][]\"}],\"name\":\"CanceledBookings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16[2][]\",\"name\":\"bookings\",\"type\":\"uint16[2][]\"}],\"name\":\"NewBookings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"number\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"leapYear\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"YearAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"number\",\"type\":\"uint16\"}],\"name\":\"YearRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"number\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"leapYear\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"YearUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"number\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"leapYear\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"addAccommodationYear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[2][]\",\"name\":\"dates\",\"type\":\"uint16[2][]\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"bookAccommodation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[2][]\",\"name\":\"dates\",\"type\":\"uint16[2][]\"}],\"name\":\"cancelAccommodation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16[2][]\",\"name\":\"dates\",\"type\":\"uint16[2][]\"}],\"name\":\"cancelAccommodationFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"checkedInNightsByYearFor\",\"outputs\":[{\"internalType\":\"uint16[2][]\",\"name\":\"\",\"type\":\"uint16[2][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16[2][]\",\"name\":\"dates\",\"type\":\"uint16[2][]\"}],\"name\":\"checkinAccommodationFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16[2][]\",\"name\":\"dates\",\"type\":\"uint16[2][]\"}],\"name\":\"confirmAccommodationFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"number\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"enableAccommodationYear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"yearNum\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dayOfYear\",\"type\":\"uint16\"}],\"name\":\"getAccommodationBooking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"enum BookingMapLib.BookingStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dayOfYear\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct BookingMapLib.Booking\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_year\",\"type\":\"uint16\"}],\"name\":\"getAccommodationBookings\",\"outputs\":[{\"components\":[{\"internalType\":\"enum BookingMapLib.BookingStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dayOfYear\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct BookingMapLib.Booking[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"number\",\"type\":\"uint16\"}],\"name\":\"getAccommodationYear\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"number\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"leapYear\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"struct BookingMapLib.Year\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccommodationYears\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"number\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"leapYear\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"struct BookingMapLib.Year[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"day\",\"type\":\"uint16\"}],\"name\":\"lockedStakeAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"number\",\"type\":\"uint16\"}],\"name\":\"removeAccommodationYear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"day\",\"type\":\"uint16\"}],\"name\":\"unlockedStakeAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"number\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"leapYear\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateAccommodationYear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/diamond/facets/BookingFacet.sol\":\"BookingFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x02686c31ccb9ee77a299fa5f47327af5271f251a707a0e24f321957166ff0434\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/DoubleEndedQueue.sol)\\npragma solidity ^0.8.4;\\n\\nimport \\\"../math/SafeCast.sol\\\";\\n\\n/**\\n * @dev A sequence of items with the ability to efficiently push and pop items (i.e. insert and remove) on both ends of\\n * the sequence (called front and back). Among other access patterns, it can be used to implement efficient LIFO and\\n * FIFO queues. Storage use is optimized, and all operations are O(1) constant time. This includes {clear}, given that\\n * the existing queue contents are left in storage.\\n *\\n * The struct is called `Bytes32Deque`. Other types can be cast to and from `bytes32`. This data structure can only be\\n * used in storage, and not in memory.\\n * ```\\n * DoubleEndedQueue.Bytes32Deque queue;\\n * ```\\n *\\n * _Available since v4.6._\\n */\\nlibrary DoubleEndedQueue {\\n    /**\\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\\n     */\\n    error Empty();\\n\\n    /**\\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\\n     */\\n    error OutOfBounds();\\n\\n    /**\\n     * @dev Indices are signed integers because the queue can grow in any direction. They are 128 bits so begin and end\\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\\n     *\\n     * Struct members have an underscore prefix indicating that they are \\\"private\\\" and should not be read or written to\\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\\n     * lead to unexpected behavior.\\n     *\\n     * Indices are in the range [begin, end) which means the first item is at data[begin] and the last item is at\\n     * data[end - 1].\\n     */\\n    struct Bytes32Deque {\\n        int128 _begin;\\n        int128 _end;\\n        mapping(int128 => bytes32) _data;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the end of the queue.\\n     */\\n    function pushBack(Bytes32Deque storage deque, bytes32 value) internal {\\n        int128 backIndex = deque._end;\\n        deque._data[backIndex] = value;\\n        unchecked {\\n            deque._end = backIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes the item at the end of the queue and returns it.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function popBack(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 backIndex;\\n        unchecked {\\n            backIndex = deque._end - 1;\\n        }\\n        value = deque._data[backIndex];\\n        delete deque._data[backIndex];\\n        deque._end = backIndex;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the beginning of the queue.\\n     */\\n    function pushFront(Bytes32Deque storage deque, bytes32 value) internal {\\n        int128 frontIndex;\\n        unchecked {\\n            frontIndex = deque._begin - 1;\\n        }\\n        deque._data[frontIndex] = value;\\n        deque._begin = frontIndex;\\n    }\\n\\n    /**\\n     * @dev Removes the item at the beginning of the queue and returns it.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function popFront(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 frontIndex = deque._begin;\\n        value = deque._data[frontIndex];\\n        delete deque._data[frontIndex];\\n        unchecked {\\n            deque._begin = frontIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the item at the beginning of the queue.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function front(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 frontIndex = deque._begin;\\n        return deque._data[frontIndex];\\n    }\\n\\n    /**\\n     * @dev Returns the item at the end of the queue.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function back(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 backIndex;\\n        unchecked {\\n            backIndex = deque._end - 1;\\n        }\\n        return deque._data[backIndex];\\n    }\\n\\n    /**\\n     * @dev Return the item at a position in the queue given by `index`, with the first item at 0 and last item at\\n     * `length(deque) - 1`.\\n     *\\n     * Reverts with `OutOfBounds` if the index is out of bounds.\\n     */\\n    function at(Bytes32Deque storage deque, uint256 index) internal view returns (bytes32 value) {\\n        // int256(deque._begin) is a safe upcast\\n        int128 idx = SafeCast.toInt128(int256(deque._begin) + SafeCast.toInt256(index));\\n        if (idx >= deque._end) revert OutOfBounds();\\n        return deque._data[idx];\\n    }\\n\\n    /**\\n     * @dev Resets the queue back to being empty.\\n     *\\n     * NOTE: The current items are left behind in storage. This does not affect the functioning of the queue, but misses\\n     * out on potential gas refunds.\\n     */\\n    function clear(Bytes32Deque storage deque) internal {\\n        deque._begin = 0;\\n        deque._end = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of items in the queue.\\n     */\\n    function length(Bytes32Deque storage deque) internal view returns (uint256) {\\n        // The interface preserves the invariant that begin <= end so we assume this will not overflow.\\n        // We also assume there are at most int256.max items in the queue.\\n        unchecked {\\n            return uint256(int256(deque._end) - int256(deque._begin));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the queue is empty.\\n     */\\n    function empty(Bytes32Deque storage deque) internal view returns (bool) {\\n        return deque._end <= deque._begin;\\n    }\\n}\\n\",\"keccak256\":\"0x4859ffd6dd69382a1462930c00b6e394007da80e78e510f56930271034737bf2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableMap.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n}\\n\",\"keccak256\":\"0x1b8ac5ffdb80c20c9188267455197d9dcfeef46379aeb1b3a6cc622e879895ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"},\"src/Libraries/CustomDoubleEndedQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/DoubleEndedQueue.sol)\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n/**\\n * @dev A sequence of items with the ability to efficiently push and pop items (i.e. insert and remove) on both ends of\\n * the sequence (called front and back). Among other access patterns, it can be used to implement efficient LIFO and\\n * FIFO queues. Storage use is optimized, and all operations are O(1) constant time. This includes {clear}, given that\\n * the existing queue contents are left in storage.\\n *\\n * The struct is called `Bytes32Deque`. Other types can be cast to and from `bytes32`. This data structure can only be\\n * used in storage, and not in memory.\\n * ```\\n * DoubleEndedQueue.Bytes32Deque queue;\\n * ```\\n *\\n * _Available since v4.6._\\n */\\nlibrary CustomDoubleEndedQueue {\\n    /**\\n     * @dev Indices are signed integers because the queue can grow in any direction. They are 128 bits so begin and end\\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\\n     *\\n     * Struct members have an underscore prefix indicating that they are \\\"private\\\" and should not be read or written to\\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\\n     * lead to unexpected behavior.\\n     *\\n     * Indices are in the range [begin, end) which means the first item is at data[begin] and the last item is at\\n     * data[end - 1].\\n     */\\n    struct Bytes32Deque {\\n        int128 _begin;\\n        int128 _end;\\n        mapping(int128 => bytes32) _data;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the end of the queue.\\n     */\\n    function pushBack(Bytes32Deque storage deque, bytes32 value) internal {\\n        int128 backIndex = deque._end;\\n        deque._data[backIndex] = value;\\n        unchecked {\\n            deque._end = backIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes the item at the end of the queue and returns it.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function popBack(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        if (empty(deque)) revert(\\\"Empty\\\");\\n        int128 backIndex;\\n        unchecked {\\n            backIndex = deque._end - 1;\\n        }\\n        value = deque._data[backIndex];\\n        delete deque._data[backIndex];\\n        deque._end = backIndex;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the beginning of the queue.\\n     */\\n    function pushFront(Bytes32Deque storage deque, bytes32 value) internal {\\n        int128 frontIndex;\\n        unchecked {\\n            frontIndex = deque._begin - 1;\\n        }\\n        deque._data[frontIndex] = value;\\n        deque._begin = frontIndex;\\n    }\\n\\n    /**\\n     * @dev Removes the item at the beginning of the queue and returns it.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function popFront(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        if (empty(deque)) revert(\\\"Empty\\\");\\n        int128 frontIndex = deque._begin;\\n        value = deque._data[frontIndex];\\n        delete deque._data[frontIndex];\\n        unchecked {\\n            deque._begin = frontIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the item at the beginning of the queue.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function front(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) revert(\\\"Empty\\\");\\n        int128 frontIndex = deque._begin;\\n        return deque._data[frontIndex];\\n    }\\n\\n    /**\\n     * @dev Returns the item at the end of the queue.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function back(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) revert(\\\"Empty\\\");\\n        int128 backIndex;\\n        unchecked {\\n            backIndex = deque._end - 1;\\n        }\\n        return deque._data[backIndex];\\n    }\\n\\n    /**\\n     * @dev Return the item at a position in the queue given by `index`, with the first item at 0 and last item at\\n     * `length(deque) - 1`.\\n     *\\n     * Reverts with `OutOfBounds` if the index is out of bounds.\\n     */\\n    function at(Bytes32Deque storage deque, uint256 index) internal view returns (bytes32 value) {\\n        // int256(deque._begin) is a safe upcast\\n        int128 idx = SafeCast.toInt128(int256(deque._begin) + SafeCast.toInt256(index));\\n        if (idx >= deque._end) revert(\\\"OutOfBounds\\\");\\n        return deque._data[idx];\\n    }\\n\\n    /**\\n     * @dev Resets the queue back to being empty.\\n     *\\n     * NOTE: The current items are left behind in storage. This does not affect the functioning of the queue, but misses\\n     * out on potential gas refunds.\\n     */\\n    function clear(Bytes32Deque storage deque) internal {\\n        deque._begin = 0;\\n        deque._end = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of items in the queue.\\n     */\\n    function length(Bytes32Deque storage deque) internal view returns (uint256) {\\n        // The interface preserves the invariant that begin <= end so we assume this will not overflow.\\n        // We also assume there are at most int256.max items in the queue.\\n        unchecked {\\n            return uint256(int256(deque._end) - int256(deque._begin));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the queue is empty.\\n     */\\n    function empty(Bytes32Deque storage deque) internal view returns (bool) {\\n        return deque._end <= deque._begin;\\n    }\\n}\\n\",\"keccak256\":\"0xf79288055411f0e900e66c27b470b38595259135c4157e2f2c3b81c7930b2f07\",\"license\":\"MIT\"},\"src/diamond/facets/BookingFacet.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\n\\npragma solidity 0.8.9;\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../libraries/BookingMapLib.sol\\\";\\nimport \\\"../libraries/AppStorage.sol\\\";\\n\\ncontract BookingFacet is Modifiers {\\n    using StakeLibV2 for StakeLibV2.Context;\\n    using StakeLibV2 for StakeLibV2.BookingContext;\\n    using BookingMapLib for BookingMapLib.UserStore;\\n    using BookingMapLib for BookingMapLib.YearsStore;\\n\\n    event NewBookings(address account, uint16[2][] bookings);\\n    event CanceledBookings(address account, uint16[2][] bookings);\\n    event BookingConfirmed(address executer, address account, uint16[2][] bookings);\\n    event BookingCheckedIn(address executer, address account, uint16[2][] bookings);\\n\\n    event YearAdded(uint16 number, bool leapYear, uint256 start, uint256 end, bool enabled);\\n    event YearRemoved(uint16 number);\\n    event YearUpdated(uint16 number, bool leapYear, uint256 start, uint256 end, bool enabled);\\n\\n    // TODO: add preview Booking action\\n\\n    function bookAccommodation(uint16[2][] calldata dates, uint256 price) external whenNotPaused {\\n        BookingMapLib.BookingStatus status;\\n        if (_isMember(_msgSender())) {\\n            status = BookingMapLib.BookingStatus.Confirmed;\\n        }\\n        for (uint256 i = 0; i < dates.length; i++) {\\n            BookingMapLib.Booking memory value = _insertBooking(status, _msgSender(), dates[i][0], dates[i][1], price);\\n            _stakeLibBookingContext(_msgSender(), dates[i][0]).handleBooking(\\n                s.staking[_msgSender()],\\n                price,\\n                value.timestamp\\n            );\\n        }\\n\\n        emit NewBookings(_msgSender(), dates);\\n    }\\n\\n    // TODO: Move to BookingMapLib\\n    function checkedInNightsByYearFor(address account_) public view returns (uint16[2][] memory) {\\n        BookingMapLib.Year[] memory yearList = s._accommodationYears.values();\\n        uint16[2][] memory acc = new uint16[2][](yearList.length);\\n        for (uint256 i; i < s._accommodationYears.length(); i++) {\\n            acc[i] = [yearList[i].number, s._accommodationBookings[account_].checkedInNightsOn(yearList[i].number)];\\n        }\\n        return acc;\\n    }\\n\\n    // END: TODO --------------------\\n\\n    function _insertBooking(\\n        BookingMapLib.BookingStatus status,\\n        address account,\\n        uint16 yearNum,\\n        uint16 dayOfYear,\\n        uint256 price\\n    ) internal returns (BookingMapLib.Booking memory) {\\n        (bool successBuild, BookingMapLib.Booking memory value) = s._accommodationYears.buildBooking(\\n            status,\\n            yearNum,\\n            dayOfYear,\\n            price\\n        );\\n        require(successBuild, \\\"BookingFacet: Unable to build Booking\\\");\\n        require(value.timestamp > block.timestamp, \\\"BookingFacet: date should be in the future\\\");\\n        require(s._accommodationBookings[account].add(value), \\\"BookingFacet: Booking already exists\\\");\\n        return value;\\n    }\\n\\n    function cancelAccommodationFor(address account, uint16[2][] calldata dates)\\n        external\\n        onlyRole(AccessControlLib.BOOKING_MANAGER_ROLE)\\n        whenNotPaused\\n    {\\n        for (uint256 i = 0; i < dates.length; i++) {\\n            BookingMapLib.Booking memory booking = _getBooking(account, dates[i][0], dates[i][1]);\\n            require(\\n                booking.status == BookingMapLib.BookingStatus.Pending,\\n                \\\"BookingFacet: (NotPending) Can not cancel confirmed accommodation\\\"\\n            );\\n            _cancel(account, booking);\\n        }\\n\\n        emit CanceledBookings(account, dates);\\n    }\\n\\n    function confirmAccommodationFor(address account, uint16[2][] calldata dates)\\n        external\\n        onlyRole(AccessControlLib.BOOKING_MANAGER_ROLE)\\n    {\\n        uint16 count;\\n        for (uint256 i = 0; i < dates.length; i++) {\\n            (bool found, BookingMapLib.Booking memory _booking) = s._accommodationBookings[account].get(\\n                dates[i][0],\\n                dates[i][1]\\n            );\\n            if (!found) {\\n                continue;\\n            }\\n            if (_booking.status == BookingMapLib.BookingStatus.Pending) {\\n                bool success = s._accommodationBookings[account].updateStatus(\\n                    dates[i][0],\\n                    dates[i][1],\\n                    BookingMapLib.BookingStatus.Confirmed\\n                );\\n                if (success) {\\n                    count += 1;\\n                }\\n            }\\n        }\\n        if (count > 0) {\\n            emit BookingConfirmed(_msgSender(), account, dates);\\n        }\\n    }\\n\\n    function checkinAccommodationFor(address account, uint16[2][] calldata dates)\\n        external\\n        onlyRole(AccessControlLib.BOOKING_MANAGER_ROLE)\\n    {\\n        uint16 count;\\n        for (uint256 i = 0; i < dates.length; i++) {\\n            bool success = s._accommodationBookings[account].updateStatus(\\n                dates[i][0],\\n                dates[i][1],\\n                BookingMapLib.BookingStatus.CheckedIn\\n            );\\n            if (success) {\\n                count += 1;\\n            }\\n        }\\n        if (count > 0) {\\n            emit BookingCheckedIn(_msgSender(), account, dates);\\n        }\\n    }\\n\\n    function cancelAccommodation(uint16[2][] calldata dates) external whenNotPaused {\\n        for (uint256 i = 0; i < dates.length; i++) {\\n            BookingMapLib.Booking memory booking = _getBooking(_msgSender(), dates[i][0], dates[i][1]);\\n            _cancel(_msgSender(), booking);\\n        }\\n\\n        emit CanceledBookings(_msgSender(), dates);\\n    }\\n\\n    function _getBooking(\\n        address account,\\n        uint16 year,\\n        uint16 day\\n    ) internal view returns (BookingMapLib.Booking memory) {\\n        (bool exists, BookingMapLib.Booking memory booking) = s._accommodationBookings[account].get(year, day);\\n        require(exists, \\\"BookingFacet: (NonExisting) Reservation does not exist\\\");\\n        return booking;\\n    }\\n\\n    function _cancel(address account, BookingMapLib.Booking memory booking) internal {\\n        require(booking.timestamp > block.timestamp, \\\"BookingFacet: Can not cancel past booking\\\");\\n        (bool success, ) = s._accommodationBookings[account].remove(booking.year, booking.dayOfYear);\\n        require(success, \\\"BookingFacet: Unable to delete Booking\\\");\\n        _stakeLibBookingContext(account, booking.year).handleCancelation(\\n            s.staking[account],\\n            booking.price,\\n            booking.timestamp\\n        );\\n    }\\n\\n    function unlockedStakeAt(\\n        address account,\\n        uint16 year,\\n        uint16 day\\n    ) public view returns (uint256) {\\n        (bool success, uint256 tm) = s._accommodationYears.buildTimestamp(year, day);\\n        require(success, \\\"unable to build timestamp\\\");\\n        return _stakeLibContext(_msgSender()).releasableAt(s.staking[account], tm);\\n    }\\n\\n    function lockedStakeAt(\\n        address account,\\n        uint16 year,\\n        uint16 day\\n    ) public view returns (uint256) {\\n        (bool success, uint256 tm) = s._accommodationYears.buildTimestamp(year, day);\\n        require(success, \\\"unable to build timestamp\\\");\\n        return _stakeLibContext(_msgSender()).lockedAt(s.staking[account], tm);\\n    }\\n\\n    function getAccommodationBooking(\\n        address account,\\n        uint16 yearNum,\\n        uint16 dayOfYear\\n    ) external view returns (bool, BookingMapLib.Booking memory) {\\n        return s._accommodationBookings[account].get(yearNum, dayOfYear);\\n    }\\n\\n    function getAccommodationBookings(address account, uint16 _year)\\n        external\\n        view\\n        returns (BookingMapLib.Booking[] memory)\\n    {\\n        return s._accommodationBookings[account].list(_year);\\n    }\\n\\n    // Admin functions\\n    function addAccommodationYear(\\n        uint16 number,\\n        bool leapYear,\\n        uint256 start,\\n        uint256 end,\\n        bool enabled\\n    ) external onlyRole(AccessControlLib.BOOKING_MANAGER_ROLE) {\\n        require(\\n            s._accommodationYears.add(BookingMapLib.Year(number, leapYear, start, end, enabled)),\\n            \\\"BookingFacet: Unable to add year\\\"\\n        );\\n        emit YearAdded(number, leapYear, start, end, enabled);\\n    }\\n\\n    function getAccommodationYears() external view returns (BookingMapLib.Year[] memory) {\\n        return s._accommodationYears.values();\\n    }\\n\\n    function getAccommodationYear(uint16 number) external view returns (bool, BookingMapLib.Year memory) {\\n        return s._accommodationYears.get(number);\\n    }\\n\\n    function removeAccommodationYear(uint16 number) external onlyRole(AccessControlLib.BOOKING_MANAGER_ROLE) {\\n        require(s._accommodationYears.remove(number), \\\"BookingFacet: Unable to remove Year\\\");\\n        emit YearRemoved(number);\\n    }\\n\\n    function updateAccommodationYear(\\n        uint16 number,\\n        bool leapYear,\\n        uint256 start,\\n        uint256 end,\\n        bool enabled\\n    ) external onlyRole(AccessControlLib.BOOKING_MANAGER_ROLE) {\\n        require(\\n            s._accommodationYears.update(BookingMapLib.Year(number, leapYear, start, end, enabled)),\\n            \\\"BookingFacet: Unable to update Year\\\"\\n        );\\n        emit YearUpdated(number, leapYear, start, end, enabled);\\n    }\\n\\n    function enableAccommodationYear(uint16 number, bool enable)\\n        external\\n        onlyRole(AccessControlLib.BOOKING_MANAGER_ROLE)\\n    {\\n        (, BookingMapLib.Year memory y) = s._accommodationYears.get(number);\\n        y.enabled = enable;\\n        require(s._accommodationYears.update(y), \\\"BookingFacet: Unable to update year\\\");\\n        emit YearUpdated(y.number, y.leapYear, y.start, y.end, y.enabled);\\n    }\\n}\\n\",\"keccak256\":\"0xdd832c9be0461b294e957411044e3424028cb5bf7c93dcb3e87e3ea1e2909803\",\"license\":\"AGPL-1.0\"},\"src/diamond/libraries/AccessControlLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\n\\npragma solidity 0.8.9;\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary AccessControlLib {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 constant DEFAULT_ADMIN_ROLE = 0x00;\\n    bytes32 constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 constant BOOKING_MANAGER_ROLE = keccak256(\\\"BOOKING_MANAGER_ROLE\\\");\\n    bytes32 constant STAKE_MANAGER_ROLE = keccak256(\\\"STAKE_MANAGER_ROLE\\\");\\n    bytes32 constant VAULT_MANAGER_ROLE = keccak256(\\\"VAULT_MANAGER_ROLE\\\");\\n    bytes32 constant MEMBERSHIP_MANAGER_ROLE = keccak256(\\\"MEMBERSHIP_MANAGER_ROLE\\\");\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct RoleStore {\\n        mapping(bytes32 => RoleData) _roles;\\n        mapping(bytes32 => EnumerableSet.AddressSet) _roleMembers;\\n    }\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function checkRole(RoleStore storage store, bytes32 role) internal view {\\n        checkRole(store, role, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function checkRole(\\n        RoleStore storage store,\\n        bytes32 role,\\n        address account\\n    ) internal view {\\n        if (!hasRole(store, role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(\\n        RoleStore storage store,\\n        bytes32 role,\\n        address account\\n    ) internal view returns (bool) {\\n        return store._roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(RoleStore storage store, bytes32 role) internal view returns (bytes32) {\\n        return store._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function setRoleAdmin(\\n        RoleStore storage store,\\n        bytes32 role,\\n        bytes32 adminRole\\n    ) internal {\\n        bytes32 previousAdminRole = getRoleAdmin(store, role);\\n        store._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(\\n        RoleStore storage store,\\n        bytes32 role,\\n        address account\\n    ) internal {\\n        if (!hasRole(store, role, account)) {\\n            store._roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n        store._roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(\\n        RoleStore storage store,\\n        bytes32 role,\\n        address account\\n    ) internal {\\n        if (hasRole(store, role, account)) {\\n            store._roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n        store._roleMembers[role].remove(account);\\n    }\\n\\n    function getRoles() internal pure returns (string[2][5] memory roles) {\\n        roles[0] = [\\\"DEFAULT_ADMIN_ROLE\\\", string(abi.encodePacked(DEFAULT_ADMIN_ROLE))];\\n        roles[1] = [\\\"MINTER_ROLE\\\", string(abi.encodePacked(MINTER_ROLE))];\\n        roles[2] = [\\\"BOOKING_MANAGER_ROLE\\\", string(abi.encodePacked(BOOKING_MANAGER_ROLE))];\\n        roles[3] = [\\\"STAKE_MANAGER_ROLE\\\", string(abi.encodePacked(STAKE_MANAGER_ROLE))];\\n        roles[4] = [\\\"VAULT_MANAGER_ROLE\\\", string(abi.encodePacked(VAULT_MANAGER_ROLE))];\\n\\n        return roles;\\n    }\\n}\\n\",\"keccak256\":\"0x0e184d45a1559ade6f7ce46f36a61cad70542d22b5a3b3a3d7fd3e054aa65e07\",\"license\":\"AGPL-1.0\"},\"src/diamond/libraries/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\nimport \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"../libraries/BookingMapLib.sol\\\";\\nimport \\\"../libraries/AccessControlLib.sol\\\";\\nimport \\\"../libraries/MembershipLib.sol\\\";\\nimport \\\"../libraries/StakeLibV2.sol\\\";\\n\\nstruct AppStorage {\\n    bool initialized;\\n    // execution\\n    bool paused;\\n    // The ERC!!\\n    IERC20 communityToken;\\n    // Roles\\n    AccessControlLib.RoleStore _roleStore;\\n    // Booking\\n    mapping(address => BookingMapLib.UserStore) _accommodationBookings;\\n    BookingMapLib.YearsStore _accommodationYears;\\n    // Stake\\n    mapping(address => OrderedStakeLib.Store) staking;\\n    // Members\\n    MembershipLib.Store members;\\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n}\\n\\ncontract Modifiers {\\n    using AccessControlLib for AccessControlLib.RoleStore;\\n    using MembershipLib for MembershipLib.Store;\\n    using StakeLibV2 for StakeLibV2.Context;\\n    using BookingMapLib for BookingMapLib.UserStore;\\n    using BookingMapLib for BookingMapLib.YearsStore;\\n\\n    AppStorage internal s;\\n\\n    modifier onlyOwner() {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n\\n    modifier whenNotInitalized() {\\n        if (s.initialized) {\\n            revert(\\\"Already initialized\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        s._roleStore.checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    modifier onlyMember() {\\n        _requireMember(_msgSender());\\n        _;\\n    }\\n\\n    function _requireMember(address account) internal view {\\n        require(_isMember(account), \\\"Membership: only members allowed\\\");\\n    }\\n\\n    function _isMember(address account) internal view returns (bool) {\\n        return s.members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!s.paused, \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(s.paused, \\\"Pausable: not paused\\\");\\n    }\\n\\n    function _stakeLibContext(address account) internal view returns (StakeLibV2.Context memory) {\\n        return\\n            StakeLibV2.Context({account: account, token: s.communityToken, requiredBalance: _expectedStaked(account)});\\n    }\\n\\n    function _stakeLibBookingContext(address account, uint16 year_)\\n        internal\\n        view\\n        returns (StakeLibV2.BookingContext memory)\\n    {\\n        (, BookingMapLib.Year memory year) = s._accommodationYears.get(year_);\\n        return\\n            StakeLibV2.BookingContext({\\n                account: account,\\n                token: s.communityToken,\\n                requiredBalance: _expectedStaked(account),\\n                initYearTm: year.start,\\n                endYearTm: year.end\\n            });\\n    }\\n\\n    function _expectedStaked(address account) internal view returns (uint256) {\\n        uint256 max;\\n        BookingMapLib.Year[] memory _yearList = s._accommodationYears.values();\\n        for (uint16 i = 0; i < _yearList.length; i++) {\\n            // TODO: should it be + 1 year?\\n            if (_yearList[i].end < block.timestamp) continue;\\n            uint256 amount = s._accommodationBookings[account].getBalance(_yearList[i].number);\\n            if (amount > max) max = amount;\\n        }\\n        return max;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x6c919910e41e3fc63ddeb95a21950a7b3c809389cc1ca4d6748a5abd424bc5e0\",\"license\":\"MIT\"},\"src/diamond/libraries/BookingMapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\n\\nlibrary BookingMapLib {\\n    using EnumerableMap for EnumerableMap.Bytes32ToUintMap;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    enum BookingStatus {\\n        Pending,\\n        Confirmed,\\n        CheckedIn\\n    }\\n\\n    struct Booking {\\n        BookingStatus status;\\n        uint16 year;\\n        uint16 dayOfYear;\\n        uint256 price;\\n        uint256 timestamp;\\n    }\\n\\n    struct UserStore {\\n        mapping(uint16 => uint16) nights;\\n        mapping(uint16 => uint256) balance;\\n        mapping(uint16 => EnumerableMap.Bytes32ToUintMap) dates;\\n        mapping(bytes32 => Booking) bookings;\\n        // TODO: still not in use but added here to optimize proofOfPresence calculations\\n        mapping(uint16 => uint16) checkedInNights;\\n    }\\n\\n    struct Year {\\n        uint16 number;\\n        bool leapYear;\\n        uint256 start;\\n        uint256 end;\\n        bool enabled;\\n    }\\n\\n    struct YearsStore {\\n        EnumerableSet.Bytes32Set _inner;\\n        mapping(bytes32 => Year) elems;\\n    }\\n\\n    function checkedInNightsOn(UserStore storage store, uint16 year_) internal view returns (uint16) {\\n        Booking[] memory localList = list(store, year_);\\n        uint16 acc;\\n        for (uint256 i; i < localList.length; i++) {\\n            if (localList[i].status == BookingMapLib.BookingStatus.CheckedIn) {\\n                acc++;\\n            }\\n        }\\n        return acc;\\n    }\\n\\n    function add(UserStore storage store, Booking memory booking) internal returns (bool) {\\n        bytes32 key = _buildKey(booking.year, booking.dayOfYear);\\n        if (store.dates[booking.year].set(key, booking.timestamp)) {\\n            store.balance[booking.year] += booking.price;\\n            store.bookings[key] = booking; //Booking(booking.price, booking.timestamp);\\n            store.nights[booking.year] += uint16(1);\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function get(\\n        UserStore storage store,\\n        uint16 _year,\\n        uint16 dayOfYear\\n    ) internal view returns (bool, Booking memory) {\\n        bytes32 key = _buildKey(_year, dayOfYear);\\n        if (store.dates[_year].contains(key)) {\\n            return (true, store.bookings[key]);\\n        }\\n        return (false, Booking(BookingStatus.Pending, 0, 0, 0, 0));\\n    }\\n\\n    function getBalance(UserStore storage store, uint16 _year) internal view returns (uint256) {\\n        return store.balance[_year];\\n    }\\n\\n    function getNights(UserStore storage store, uint16 _year) internal view returns (uint256) {\\n        return store.nights[_year];\\n    }\\n\\n    function list(UserStore storage store, uint16 _year) internal view returns (Booking[] memory) {\\n        Booking[] memory bookings = new Booking[](store.dates[_year].length());\\n        for (uint256 i; i < store.dates[_year].length(); i++) {\\n            (bytes32 key, ) = store.dates[_year].at(i);\\n            bookings[i] = store.bookings[key];\\n        }\\n        return bookings;\\n    }\\n\\n    function remove(\\n        UserStore storage store,\\n        uint16 _year,\\n        uint16 _dayOfYear\\n    ) internal returns (bool, Booking memory) {\\n        bytes32 key = _buildKey(_year, _dayOfYear);\\n        if (store.dates[_year].remove(key)) {\\n            Booking memory booking = store.bookings[key];\\n            store.balance[_year] -= booking.price;\\n            store.nights[_year] -= uint16(1);\\n            delete store.bookings[key];\\n            return (true, booking);\\n        }\\n        return (false, Booking(BookingStatus.Pending, 0, 0, 0, 0));\\n    }\\n\\n    function updateStatus(\\n        UserStore storage store,\\n        uint16 _year,\\n        uint16 _dayOfYear,\\n        BookingStatus _status\\n    ) internal returns (bool) {\\n        bytes32 key = _buildKey(_year, _dayOfYear);\\n        if (store.dates[_year].contains(key)) {\\n            Booking memory booking = store.bookings[key];\\n            booking.status = _status;\\n            store.bookings[key] = booking;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _buildKey(uint16 year, uint16 dayOfYear) internal pure returns (bytes32) {\\n        return bytes32(abi.encodePacked(year, dayOfYear));\\n    }\\n\\n    // ==========================================================\\n    // Years\\n    // ==========================================================\\n    function buildTimestamp(\\n        YearsStore storage _years,\\n        uint16 yearNum,\\n        uint16 dayOfTheYear\\n    ) internal view returns (bool, uint256) {\\n        (bool found, Year memory year) = get(_years, yearNum);\\n        if (found && year.enabled) {\\n            uint256 day;\\n\\n            if (year.leapYear) {\\n                day = (year.end - year.start) / 366;\\n            } else {\\n                day = (year.end - year.start) / 365;\\n            }\\n            return (true, year.start + (day * (dayOfTheYear - 1)) + (day / 2));\\n        }\\n        return (false, uint256(0));\\n    }\\n\\n    function buildBooking(\\n        YearsStore storage _years,\\n        BookingStatus status,\\n        uint16 yearNum,\\n        uint16 dayOfTheYear,\\n        uint256 price\\n    ) internal view returns (bool, Booking memory) {\\n        (bool success, uint256 tm) = buildTimestamp(_years, yearNum, dayOfTheYear);\\n        if (success) {\\n            return (true, Booking(status, yearNum, dayOfTheYear, price, tm));\\n        }\\n        return (false, Booking(BookingStatus.Pending, 0, 0, 0, 0));\\n    }\\n\\n    /// YearsStore -------------------------------------------\\n\\n    function length(YearsStore storage store) internal view returns (uint256) {\\n        return store._inner.length();\\n    }\\n\\n    function add(YearsStore storage store, Year memory _year) internal returns (bool) {\\n        bytes32 k = _buildYearKey(_year.number);\\n        if (store._inner.add(k)) {\\n            store.elems[k] = _year;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function values(YearsStore storage store) internal view returns (Year[] memory) {\\n        bytes32[] memory ks = store._inner.values();\\n        Year[] memory elems = new Year[](ks.length);\\n        for (uint256 i; i < ks.length; i++) {\\n            elems[i] = store.elems[ks[i]];\\n        }\\n        return elems;\\n    }\\n\\n    function get(YearsStore storage store, uint16 num) internal view returns (bool, Year memory) {\\n        bytes32 k = _buildYearKey(num);\\n        if (store._inner.contains(k)) {\\n            return (true, store.elems[k]);\\n        }\\n        return (false, Year(0, false, 0, 0, false));\\n    }\\n\\n    function remove(YearsStore storage store, uint16 num) internal returns (bool) {\\n        bytes32 k = _buildYearKey(num);\\n        if (store._inner.remove(k)) {\\n            delete store.elems[k];\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function contains(YearsStore storage store, uint16 num) internal view returns (bool) {\\n        bytes32 k = _buildYearKey(num);\\n        return store._inner.contains(k);\\n    }\\n\\n    function update(YearsStore storage store, Year memory _year) internal returns (bool) {\\n        bytes32 k = _buildYearKey(_year.number);\\n        if (store._inner.contains(k)) {\\n            store.elems[k] = _year;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    // function length\\n\\n    function _buildYearKey(uint16 num) internal pure returns (bytes32) {\\n        return bytes32(abi.encodePacked(num));\\n    }\\n}\\n\",\"keccak256\":\"0xd76f48b6bbcfbdd593d6e936d4065101e712c249d2957affe1fc79ebc39541a6\",\"license\":\"MIT\"},\"src/diamond/libraries/MembershipLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary MembershipLib {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct Store {\\n        EnumerableSet.AddressSet _inner;\\n        // NOTE: the only way to expand this struct after deployment si by adding data in maps\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Store storage store, address value) internal returns (bool) {\\n        return store._inner.add(value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Store storage store, address value) internal returns (bool) {\\n        return store._inner.remove(value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Store storage store, address value) internal view returns (bool) {\\n        return store._inner.contains(value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Store storage store) internal view returns (uint256) {\\n        return store._inner.length();\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Store storage store, uint256 index) internal view returns (address) {\\n        return store._inner.at(index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Store storage store) internal view returns (address[] memory) {\\n        return store._inner.values();\\n    }\\n}\\n\",\"keccak256\":\"0x41ff8eb6db7f89ddcbc9c4a07ea52349550ef3016fa6d24c11335abd681e988f\",\"license\":\"MIT\"},\"src/diamond/libraries/OrderedStakeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../Libraries/CustomDoubleEndedQueue.sol\\\";\\n\\nlibrary OrderedStakeLib {\\n    using CustomDoubleEndedQueue for CustomDoubleEndedQueue.Bytes32Deque;\\n\\n    // ONLY MEMORY!!\\n    struct Deposit {\\n        uint256 timestamp;\\n        uint256 amount;\\n    }\\n\\n    // TODO rename to Account\\n    struct Store {\\n        uint256 _balance;\\n        CustomDoubleEndedQueue.Bytes32Deque _queue;\\n        mapping(bytes32 => uint256) _amounts;\\n    }\\n\\n    function back(Store storage store) internal view returns (Deposit memory deposit) {\\n        bytes32 key = store._queue.back();\\n        deposit.timestamp = uint256(key);\\n        deposit.amount = uint256(store._amounts[key]);\\n    }\\n\\n    function front(Store storage store) internal view returns (Deposit memory deposit) {\\n        bytes32 key = store._queue.front();\\n        deposit.timestamp = uint256(key);\\n        deposit.amount = uint256(store._amounts[key]);\\n    }\\n\\n    function tryBack(Store storage store) internal view returns (bool, Deposit memory) {\\n        if (!empty(store)) {\\n            return (true, back(store));\\n        }\\n        return (false, Deposit(0, 0));\\n    }\\n\\n    function tryFront(Store storage store) internal view returns (bool, Deposit memory) {\\n        if (!empty(store)) {\\n            return (true, front(store));\\n        }\\n        return (false, Deposit(0, 0));\\n    }\\n\\n    function push(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 timestamp\\n    ) internal {\\n        _pushBackOrdered(store, amount, timestamp);\\n    }\\n\\n    function pushFront(\\n        OrderedStakeLib.Store storage store,\\n        uint256 amount,\\n        uint256 tm\\n    ) internal {\\n        _pushFrontOrdered(store, amount, tm);\\n    }\\n\\n    function length(Store storage store) internal view returns (uint256) {\\n        return store._queue.length();\\n    }\\n\\n    function at(Store storage store, uint256 index) internal view returns (Deposit memory deposit) {\\n        bytes32 key = store._queue.at(index);\\n        deposit.timestamp = uint256(key);\\n        deposit.amount = uint256(store._amounts[key]);\\n    }\\n\\n    function list(Store storage store) internal view returns (OrderedStakeLib.Deposit[] memory) {\\n        Deposit[] memory deposits_ = new Deposit[](length(store));\\n        for (uint256 i; i < length(store); i++) {\\n            deposits_[i] = at(store, i);\\n        }\\n        return deposits_;\\n    }\\n\\n    function empty(Store storage store) internal view returns (bool) {\\n        return store._queue.empty();\\n    }\\n\\n    function tryTakeUntil(\\n        Store storage store,\\n        uint256 requested,\\n        uint256 untilTm\\n    ) internal returns (bool) {\\n        if (requested >= balanceUntil(store, untilTm)) return false;\\n        takeUntil(store, requested, untilTm);\\n        return true;\\n    }\\n\\n    // TAKE from specific timestamp\\n    function takeAt(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 tm\\n    ) internal {\\n        Deposit memory _back = _popBack(store);\\n        if (_back.timestamp == tm) {\\n            if (_back.amount < amount) revert(\\\"OrderedStakeLib: InsufficientDeposit\\\");\\n            if (_back.amount > amount) {\\n                _pushBackOrdered(store, _back.amount - amount, _back.timestamp);\\n            }\\n            // return;\\n        } else if (_back.timestamp < tm) {\\n            revert(\\\"OrderedStakeLib: NotFound\\\");\\n        } else {\\n            takeAt(store, amount, tm);\\n            _pushBackOrdered(store, _back.amount, _back.timestamp);\\n        }\\n    }\\n\\n    function balanceFromTo(\\n        Store storage store,\\n        uint256 from,\\n        uint256 to\\n    ) internal view returns (uint256 amount) {\\n        for (uint256 i; i < length(store); i++) {\\n            Deposit memory deposit = at(store, i);\\n            if (deposit.timestamp >= from && deposit.timestamp <= to) {\\n                amount += deposit.amount;\\n            }\\n        }\\n    }\\n\\n    function moveFrontRanged(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 initScanTm,\\n        uint256 to\\n    ) internal {\\n        if (to >= initScanTm) return;\\n        // require(initScanTm > to)\\n        _moveBackToFrontRanged(store, amount, initScanTm, to);\\n    }\\n\\n    function _moveBackToFrontRanged(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 initScanTm,\\n        uint256 to\\n    ) internal {\\n        Deposit memory _back = back(store);\\n        if (_back.timestamp <= initScanTm) {\\n            _moveFront(store, amount, _back.timestamp, to);\\n        } else {\\n            _back = _popBack(store);\\n            _moveBackToFrontRanged(store, amount, initScanTm, to);\\n            _pushBackOrdered(store, _back.amount, _back.timestamp);\\n        }\\n    }\\n\\n    function moveBackRanged(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 initScanTm,\\n        uint256 to\\n    ) internal {\\n        if (to <= initScanTm) return;\\n        require(initScanTm < to);\\n        _moveFrontToBackRanged(store, amount, initScanTm, to);\\n    }\\n\\n    function _moveFrontToBackRanged(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 initScanTm,\\n        uint256 to\\n    ) internal {\\n        Deposit memory _front = front(store);\\n        if (_front.timestamp >= initScanTm) {\\n            _moveBack(store, amount, _front.timestamp, to);\\n        } else {\\n            _front = _popFront(store);\\n            _moveFrontToBackRanged(store, amount, initScanTm, to);\\n            _pushFrontOrdered(store, _front.amount, _front.timestamp);\\n        }\\n    }\\n\\n    // FRONT to BACK\\n    function takeUntil(\\n        Store storage store,\\n        uint256 requested,\\n        uint256 untilTm\\n    ) internal {\\n        require(requested > uint256(0), \\\"OrderedStakeLib: Nothing Requested\\\");\\n        require(store._balance >= requested, \\\"OrderedStakeLib: NOT_ENOUGH_BALANCE\\\");\\n\\n        uint256 current_extracted;\\n\\n        while (current_extracted < requested) {\\n            OrderedStakeLib.Deposit memory current_deposit = _popFront(store);\\n            if (current_deposit.timestamp <= untilTm) {\\n                if (current_deposit.amount + current_extracted == requested) {\\n                    current_extracted += current_deposit.amount;\\n                } else if (current_deposit.amount + current_extracted > requested) {\\n                    // substract front\\n                    uint256 reminder = current_deposit.amount + current_extracted - requested;\\n                    _pushFront(store, reminder, current_deposit.timestamp);\\n                    current_extracted = requested;\\n                } else {\\n                    current_extracted += current_deposit.amount;\\n                }\\n            } else {\\n                revert(\\\"OrderedStakeLib: NOT_ENOUGHT_UNLOCKABLE_BALANCE\\\");\\n            }\\n        }\\n    }\\n\\n    function takeMaxUntil(Store storage store, uint256 untilTm) internal returns (uint256 amount) {\\n        amount = balanceUntil(store, untilTm);\\n        if (amount == uint256(0)) return amount;\\n        takeUntil(store, amount, untilTm);\\n    }\\n\\n    // We have know the real key to use this method\\n    // TODO: rename _moveBackToFront\\n    function moveFront(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 from,\\n        uint256 to\\n    ) internal {\\n        if (from == to) return;\\n        require(from > to, \\\"OrderedStakeLib: WrongRange\\\");\\n        if (store._queue.empty()) revert(\\\"OrderedStakeLib: Empty\\\");\\n        _moveFront(store, amount, from, to);\\n    }\\n\\n    function moveBack(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 from,\\n        uint256 to\\n    ) internal {\\n        if (from == to) return;\\n        require(from < to, \\\"OrderedStakeLib: WrongRange\\\");\\n        if (store._queue.empty()) revert(\\\"OrderedStakeLib: Empty\\\");\\n        _moveBack(store, amount, from, to);\\n    }\\n\\n    // @dev\\n    // Including current timestamp\\n    function balanceUntil(Store storage store, uint256 untilTm) internal view returns (uint256 amount) {\\n        if (store._queue.empty()) return 0;\\n        for (uint256 i; i < store._queue.length(); i++) {\\n            uint256 tm = uint256(store._queue.at(i));\\n            if (tm <= untilTm) {\\n                amount += store._amounts[store._queue.at(i)];\\n                if (tm == untilTm) break;\\n            } else {\\n                break;\\n            }\\n        }\\n    }\\n\\n    // @dev\\n    // NonIncluded\\n    // including current TM since balanceUntil includes the current timestamp\\n    function balanceFrom(Store storage store, uint256 fromTm) internal view returns (uint256) {\\n        return store._balance - balanceUntil(store, fromTm);\\n    }\\n\\n    function balance(Store storage store) internal view returns (uint256) {\\n        return store._balance;\\n    }\\n\\n    // ===================================\\n    // PRIVATE FUNCTIONS\\n    // ===================================\\n\\n    // We have to be sure that we know the key to execute this function\\n    function _moveFront(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 from,\\n        uint256 to\\n    ) internal {\\n        if (amount == uint256(0)) return;\\n        Deposit memory _back = _popBack(store);\\n        if (_back.timestamp == from) {\\n            if (_back.amount == amount) {\\n                _pushBackOrdered(store, amount, to);\\n            } else if (_back.amount > amount) {\\n                _pushBackOrdered(store, amount, to);\\n                _pushBackOrdered(store, _back.amount - amount, _back.timestamp);\\n            } else if (amount > _back.amount) {\\n                // amount is bigger than current\\n                _pushBackOrdered(store, _back.amount, to);\\n                // TODO: I do not understand this condition\\n                // Should be something like\\n                // not empty, but pop back already fails on empty\\n                // require(uint256(store._queue.back()) != from, \\\"_moveFront: OutOfBounds\\\");\\n                _moveFront(store, amount - _back.amount, uint256(store._queue.back()), to);\\n            }\\n        } else {\\n            _moveFront(store, amount, from, to);\\n            _pushBackOrdered(store, _back.amount, _back.timestamp);\\n        }\\n    }\\n\\n    function _moveBack(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 from,\\n        uint256 to\\n    ) internal {\\n        Deposit memory _front = _popFront(store);\\n        if (_front.timestamp == from) {\\n            if (_front.amount == amount) {\\n                // TODO: this should use pushFrontOrdered\\n                _pushFrontOrdered(store, amount, to);\\n            } else if (_front.amount > amount) {\\n                _pushFrontOrdered(store, amount, to);\\n                _pushFrontOrdered(store, _front.amount - amount, _front.timestamp);\\n            } else {\\n                // amount is bigger than current\\n                _pushFrontOrdered(store, _front.amount, to);\\n                // TODO: review what condition I was trying to enfore here\\n                // require(uint256(store._queue.front()) != from, \\\"OrderedStakeLib: OutOfBounds\\\");\\n                _moveBack(store, amount - _front.amount, uint256(store._queue.front()), to);\\n            }\\n        } else {\\n            _moveBack(store, amount, from, to);\\n            _pushBackOrdered(store, _front.amount, _front.timestamp);\\n        }\\n    }\\n\\n    function _pushBackOrdered(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 timestamp\\n    ) internal {\\n        if (store._queue.empty()) {\\n            _pushBack(store, amount, timestamp);\\n        } else {\\n            uint256 backTm = uint256(store._queue.back());\\n            if (backTm < timestamp) {\\n                _pushBack(store, amount, timestamp);\\n            } else if (backTm == timestamp) {\\n                _addBalanceTo(store, amount, timestamp);\\n            } else {\\n                bytes32 last = store._queue.popBack();\\n                _pushBackOrdered(store, amount, timestamp);\\n                store._queue.pushBack(last);\\n            }\\n        }\\n    }\\n\\n    function _pushFrontOrdered(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 timestamp\\n    ) internal {\\n        if (store._queue.empty()) {\\n            _pushFront(store, amount, timestamp);\\n        } else {\\n            uint256 frontTm = uint256(store._queue.front());\\n            if (frontTm > timestamp) {\\n                _pushFront(store, amount, timestamp);\\n            } else if (frontTm == timestamp) {\\n                _addBalanceTo(store, amount, timestamp);\\n            } else {\\n                bytes32 first = store._queue.popFront();\\n                _pushFrontOrdered(store, amount, timestamp);\\n                store._queue.pushFront(first);\\n            }\\n        }\\n    }\\n\\n    function _popFront(Store storage store) internal returns (Deposit memory deposit) {\\n        bytes32 key = store._queue.popFront();\\n        uint256 val = store._amounts[key];\\n        delete store._amounts[key];\\n        store._balance -= val;\\n        deposit.timestamp = uint256(key);\\n        deposit.amount = val;\\n    }\\n\\n    function _pushFront(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 timestamp\\n    ) internal {\\n        bytes32 key = bytes32(timestamp);\\n        store._queue.pushFront(key);\\n        store._amounts[key] = amount;\\n        store._balance += amount;\\n    }\\n\\n    function _popBack(Store storage store) internal returns (Deposit memory deposit) {\\n        bytes32 key = store._queue.popBack();\\n        deposit.timestamp = uint256(key);\\n        deposit.amount = store._amounts[key];\\n        store._balance -= deposit.amount;\\n        delete store._amounts[key];\\n    }\\n\\n    // PRIVATE do not use use _pushBackOrdered instead\\n    function _pushBack(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 timestamp\\n    ) internal {\\n        bytes32 key = bytes32(timestamp);\\n        require(store._amounts[key] == uint256(0), \\\"OrderedStakeLib: CAN NOT OVERRIDE TIMESTAMPS\\\");\\n        store._queue.pushBack(key);\\n        store._amounts[key] = amount;\\n        store._balance += amount;\\n    }\\n\\n    function _addBalanceTo(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 timestamp\\n    ) internal {\\n        bytes32 key = bytes32(timestamp);\\n        require(store._amounts[key] != uint256(0), \\\"OrderedStakeLib: Trying to update empty\\\");\\n        store._amounts[key] += amount;\\n        store._balance += amount;\\n    }\\n}\\n\",\"keccak256\":\"0xd3b5073c7ee2e93f4ceb921a55cff6009bf027774bff97e83f95a23c2cd44447\",\"license\":\"MIT\"},\"src/diamond/libraries/StakeLibV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./OrderedStakeLib.sol\\\";\\n\\nlibrary StakeLibV2 {\\n    using SafeERC20 for IERC20;\\n    using OrderedStakeLib for OrderedStakeLib.Store;\\n\\n    event DepositedTokens(address account, uint256 amount);\\n    event WithdrawnTokens(address account, uint256 amount);\\n\\n    uint256 constant ONE_YEAR = 365 * 86400;\\n\\n    // ONLY MEMORY\\n    struct Context {\\n        address account;\\n        IERC20 token;\\n        uint256 requiredBalance;\\n    }\\n    struct BookingContext {\\n        address account;\\n        IERC20 token;\\n        uint256 requiredBalance;\\n        uint256 initYearTm;\\n        uint256 endYearTm;\\n    }\\n\\n    function handleBooking(\\n        BookingContext memory context,\\n        OrderedStakeLib.Store storage store,\\n        uint256 amount,\\n        uint256 timestamp\\n    ) internal {\\n        uint256 nextYearsBalance = store.balanceFrom(context.endYearTm);\\n        if (nextYearsBalance >= context.requiredBalance) return;\\n\\n        uint256 required = amount;\\n        required -= nextYearsBalance;\\n\\n        uint256 prevYearsBalance = store.balanceUntil(context.initYearTm);\\n        if (prevYearsBalance >= required) {\\n            // move from the past\\n            store.moveBack(required, store.front().timestamp, timestamp);\\n            return;\\n        }\\n        if (prevYearsBalance > uint256(0)) {\\n            // move all prevYearsBalance\\n            store.moveBack(prevYearsBalance, store.front().timestamp, timestamp);\\n            required -= prevYearsBalance;\\n        }\\n\\n        // rest tranfer\\n        store.push(required, timestamp);\\n        context.token.safeTransferFrom(context.account, address(this), required);\\n    }\\n\\n    function handleCancelation(\\n        BookingContext memory context,\\n        OrderedStakeLib.Store storage store,\\n        uint256 amount,\\n        uint256 timestamp\\n    ) internal {\\n        uint256 yearBalance = store.balanceFromTo(context.initYearTm, context.endYearTm);\\n        if (yearBalance == 0) return;\\n        uint256 toMove;\\n        if (yearBalance >= amount) {\\n            toMove = amount;\\n        } else {\\n            toMove = yearBalance;\\n        }\\n\\n        store.moveFrontRanged(toMove, context.endYearTm, timestamp - ONE_YEAR);\\n    }\\n\\n    function remove(\\n        Context memory context,\\n        OrderedStakeLib.Store storage store,\\n        uint256 requested\\n    ) internal {\\n        _remove(context, store, requested);\\n    }\\n\\n    function restakeOrDepositAt(\\n        Context memory context,\\n        OrderedStakeLib.Store storage store,\\n        uint256 requested,\\n        uint256 tm\\n    ) internal {\\n        uint256 releasableTm = tm - ONE_YEAR;\\n        uint256 restakeable = store.balanceUntil(releasableTm);\\n        if (restakeable >= requested) {\\n            // No need to transfer more funds\\n            store.takeUntil(requested, releasableTm);\\n            store.push(requested, tm);\\n        } else {\\n            if (restakeable > uint256(0)) {\\n                // reappend releasable tokens\\n                store.takeUntil(restakeable, releasableTm);\\n                store.push(restakeable, tm);\\n            }\\n            uint256 toDeposit = requested - restakeable;\\n            // get the rest from the external account\\n            store.push(toDeposit, tm);\\n            context.token.safeTransferFrom(context.account, address(this), toDeposit);\\n            emit DepositedTokens(context.account, toDeposit);\\n        }\\n    }\\n\\n    function takeMax(Context memory context, OrderedStakeLib.Store storage store) internal returns (uint256) {\\n        uint256 amount = releasable(context, store);\\n\\n        if (amount > 0) {\\n            _remove(context, store, amount);\\n        }\\n        return amount;\\n    }\\n\\n    function _remove(\\n        Context memory context,\\n        OrderedStakeLib.Store storage store,\\n        uint256 requested\\n    ) internal {\\n        store.takeUntil(requested, _currentReleaseTimestamp(context));\\n        context.token.safeTransfer(context.account, requested);\\n        emit WithdrawnTokens(context.account, requested);\\n    }\\n\\n    function locked(Context memory context, OrderedStakeLib.Store storage store) internal view returns (uint256) {\\n        return store.balanceFrom(_currentReleaseTimestamp(context));\\n    }\\n\\n    function releasable(Context memory context, OrderedStakeLib.Store storage store) internal view returns (uint256) {\\n        return store.balanceUntil(_currentReleaseTimestamp(context));\\n    }\\n\\n    function lockedAt(\\n        Context memory context,\\n        OrderedStakeLib.Store storage store,\\n        uint256 at\\n    ) internal view returns (uint256) {\\n        return store.balanceFrom(_releaseTimestampAt(context, at));\\n    }\\n\\n    function releasableAt(\\n        Context memory context,\\n        OrderedStakeLib.Store storage store,\\n        uint256 at\\n    ) internal view returns (uint256) {\\n        return store.balanceUntil(_releaseTimestampAt(context, at));\\n    }\\n\\n    function restakeMax(Context memory context, OrderedStakeLib.Store storage store) internal returns (uint256) {\\n        uint256 amount = store.balanceUntil(_currentReleaseTimestamp(context));\\n        if (amount > 0) {\\n            store.takeUntil(amount, _currentReleaseTimestamp(context));\\n            store.push(amount, block.timestamp);\\n        }\\n        return amount;\\n    }\\n\\n    function restakeAmount(\\n        Context memory context,\\n        OrderedStakeLib.Store storage store,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        store.takeUntil(amount, _currentReleaseTimestamp(context));\\n        store.push(amount, block.timestamp);\\n        return amount;\\n    }\\n\\n    // @dev\\n    // DO NOT USE IN SEND FUNCTIONS\\n    function deposits(OrderedStakeLib.Store storage store) internal view returns (OrderedStakeLib.Deposit[] memory) {\\n        return store.list();\\n    }\\n\\n    function balance(OrderedStakeLib.Store storage store) internal view returns (uint256) {\\n        return store.balance();\\n    }\\n\\n    // function buildContext(address account, IERC20 token, uint256 lockingTimePeriod) returns\\n    function add(\\n        Context memory context,\\n        OrderedStakeLib.Store storage store,\\n        uint256 amount\\n    ) internal {\\n        _addAt(context, store, amount, block.timestamp);\\n        emit DepositedTokens(context.account, amount);\\n    }\\n\\n    // =========================================\\n    // PRIVATE FUNCTIONS\\n    // =========================================\\n\\n    function _currentReleaseTimestamp(Context memory context) internal view returns (uint256) {\\n        return _releaseTimestampAt(context, block.timestamp);\\n    }\\n\\n    function _releaseTimestampAt(Context memory, uint256 at) internal pure returns (uint256) {\\n        return at - ONE_YEAR;\\n    }\\n\\n    function _addAt(\\n        Context memory context,\\n        OrderedStakeLib.Store storage store,\\n        uint256 amount,\\n        uint256 timestamp\\n    ) internal {\\n        store.push(amount, timestamp);\\n        context.token.safeTransferFrom(context.account, address(this), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x79ccfb66a9d06cd175af6f738651db1b153098995179191432bbef3c85d86c82\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506144db806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80634c0e453e11610097578063757a3c0d11610066578063757a3c0d1461021d57806379ea4ecf1461023d578063a1ff8ff814610252578063f4fed22a1461027357600080fd5b80634c0e453e146101c357806362bdefb1146101e457806366fd0068146101f7578063709d872c1461020a57600080fd5b8063390d41a2116100d3578063390d41a214610177578063395560fc1461018a5780634b4222871461019d5780634ba25e8a146101b057600080fd5b80630fac92f01461010557806310789efe1461012e578063137ae83d1461014f5780631f14148b14610164575b600080fd5b610118610113366004613c55565b610286565b6040516101259190613cf8565b60405180910390f35b61014161013c366004613d46565b6102b4565b604051610125929190613d89565b61016261015d366004613d9f565b61030a565b005b610162610172366004613dff565b6103da565b610162610185366004613e52565b6105fa565b610162610198366004613eaf565b61076b565b6101626101ab366004613dff565b61087b565b6101626101be366004613f0c565b6109ae565b6101d66101d1366004613d46565b610a99565b604051908152602001610125565b6101d66101f2366004613d46565b610b33565b610162610205366004613dff565b610bc1565b610162610218366004613eaf565b610d56565b61023061022b366004613f4e565b610e66565b6040516101259190613f69565b610245610f99565b6040516101259190613fd6565b610265610260366004613d9f565b610faa565b60405161012592919061404b565b610162610281366004614094565b610fe8565b6001600160a01b03821660009081526003602052604090206060906102ab90836110f8565b90505b92915050565b6040805160a0810182526000808252602080830182905282840182905260608301829052608083018290526001600160a01b0387168252600390529182206102fd908585611289565b915091505b935093915050565b7fefa2b23cd542346b38207721a79c51a70b01c47249f50a351696d8f313a8fe1c6103366001826113ac565b6103416004836113bb565b61039e5760405162461bcd60e51b815260206004820152602360248201527f426f6f6b696e6746616365743a20556e61626c6520746f2072656d6f7665205960448201526232b0b960e91b60648201526084015b60405180910390fd5b60405161ffff831681527f95e58e7b256936d20ca1bde8fd750c5ae53d5d866224c71f5926b17c350ba166906020015b60405180910390a15050565b7fefa2b23cd542346b38207721a79c51a70b01c47249f50a351696d8f313a8fe1c6104066001826113ac565b6000805b838110156105a9576000806104b187878581811061042a5761042a6140cb565b905060400201600060028110610442576104426140cb565b6020020160208101906104559190613d9f565b888886818110610467576104676140cb565b90506040020160016002811061047f5761047f6140cb565b6020020160208101906104929190613d9f565b6001600160a01b038b1660009081526003602052604090209190611289565b91509150816104c1575050610597565b6000815160028111156104d6576104d6613c88565b141561059457600061057c8888868181106104f3576104f36140cb565b90506040020160006002811061050b5761050b6140cb565b60200201602081019061051e9190613d9f565b898987818110610530576105306140cb565b905060400201600160028110610548576105486140cb565b60200201602081019061055b9190613d9f565b6001600160a01b038c16600090815260036020526040902091906001611420565b905080156105925761058f6001866140f7565b94505b505b50505b806105a18161411d565b91505061040a565b5061ffff8116156105f3577f967f812a05038d1f67c7262eddabfb6264aefba37a1d10541666c1ae0ccc5d89335b8686866040516105ea949392919061419f565b60405180910390a15b5050505050565b610602611599565b600061060d336115f3565b15610616575060015b60005b838110156107295760006106a8833388888681811061063a5761063a6140cb565b905060400201600060028110610652576106526140cb565b6020020160208101906106659190613d9f565b898987818110610677576106776140cb565b90506040020160016002811061068f5761068f6140cb565b6020020160208101906106a29190613d9f565b88611600565b336000818152600760205260409020608083015192935061071692909187919061070e908b8b898181106106de576106de6140cb565b9050604002016000600281106106f6576106f66140cb565b6020020160208101906107099190613d9f565b6117c8565b929190611870565b50806107218161411d565b915050610619565b507fa744791f7ba4cf0ed4fb864ccdf82192959af8252fd0250f73f067166f51ed6b33858560405161075d939291906141d6565b60405180910390a150505050565b7fefa2b23cd542346b38207721a79c51a70b01c47249f50a351696d8f313a8fe1c6107976001826113ac565b6040805160a08101825261ffff8816815286151560208201529081018590526060810184905282151560808201526107d19060049061193d565b61081d5760405162461bcd60e51b815260206004820181905260248201527f426f6f6b696e6746616365743a20556e61626c6520746f2061646420796561726044820152606401610395565b6040805161ffff8816815286151560208201529081018590526060810184905282151560808201527fc3da413c8752517eb598cf3d589891d0641833769cdf76283ba44468a3d46b869060a0015b60405180910390a1505050505050565b7fefa2b23cd542346b38207721a79c51a70b01c47249f50a351696d8f313a8fe1c6108a76001826113ac565b6000805b8381101561097c5760006109538686848181106108ca576108ca6140cb565b9050604002016000600281106108e2576108e26140cb565b6020020160208101906108f59190613d9f565b878785818110610907576109076140cb565b90506040020160016002811061091f5761091f6140cb565b6020020160208101906109329190613d9f565b6001600160a01b038a16600090815260036020526040902091906002611420565b90508015610969576109666001846140f7565b92505b50806109748161411d565b9150506108ab565b5061ffff8116156105f3577f681e7c2db85861f3f1a1ddf35a1f16c8a5400d75a3d07509817b30931151f576336105d7565b6109b6611599565b60005b81811015610a65576000610a46338585858181106109d9576109d96140cb565b9050604002016000600281106109f1576109f16140cb565b602002016020810190610a049190613d9f565b868686818110610a1657610a166140cb565b905060400201600160028110610a2e57610a2e6140cb565b602002016020810190610a419190613d9f565b6119d3565b9050610a523382611aa3565b5080610a5d8161411d565b9150506109b9565b507fde8b8d404fa6ad1e0533531ef96e711b34a6df8d1133968c52bc335861f0ad8d3383836040516103ce939291906141d6565b60008080610aa960048686611c10565b9150915081610afa5760405162461bcd60e51b815260206004820152601960248201527f756e61626c6520746f206275696c642074696d657374616d70000000000000006044820152606401610395565b6001600160a01b0386166000908152600760205260409020610b279082610b2033611ce9565b9190611d40565b925050505b9392505050565b60008080610b4360048686611c10565b9150915081610b945760405162461bcd60e51b815260206004820152601960248201527f756e61626c6520746f206275696c642074696d657374616d70000000000000006044820152606401610395565b6001600160a01b0386166000908152600760205260409020610b279082610bba33611ce9565b9190611d56565b7fefa2b23cd542346b38207721a79c51a70b01c47249f50a351696d8f313a8fe1c610bed6001826113ac565b610bf5611599565b60005b82811015610d22576000610c5586868685818110610c1857610c186140cb565b905060400201600060028110610c3057610c306140cb565b602002016020810190610c439190613d9f565b878786818110610a1657610a166140cb565b9050600081516002811115610c6c57610c6c613c88565b14610d055760405162461bcd60e51b815260206004820152604160248201527f426f6f6b696e6746616365743a20284e6f7450656e64696e67292043616e206e60448201527f6f742063616e63656c20636f6e6669726d6564206163636f6d6d6f646174696f60648201527f6e00000000000000000000000000000000000000000000000000000000000000608482015260a401610395565b610d0f8682611aa3565b5080610d1a8161411d565b915050610bf8565b507fde8b8d404fa6ad1e0533531ef96e711b34a6df8d1133968c52bc335861f0ad8d84848460405161075d939291906141d6565b7fefa2b23cd542346b38207721a79c51a70b01c47249f50a351696d8f313a8fe1c610d826001826113ac565b6040805160a08101825261ffff881681528615156020820152908101859052606081018490528215156080820152610dbc90600490611d6c565b610e145760405162461bcd60e51b815260206004820152602360248201527f426f6f6b696e6746616365743a20556e61626c6520746f20757064617465205960448201526232b0b960e91b6064820152608401610395565b6040805161ffff8816815286151560208201529081018590526060810184905282151560808201527f85d7a9b39d1a1f0f2f68880d124ededd330f406e1b42f93234665005812d5a829060a00161086b565b60606000610e746004611d88565b90506000815167ffffffffffffffff811115610e9257610e926141f9565b604051908082528060200260200182016040528015610ecb57816020015b610eb8613c09565b815260200190600190039081610eb05790505b50905060005b610edb6004611ecb565b811015610f91576040518060400160405280848381518110610eff57610eff6140cb565b60200260200101516000015161ffff1661ffff168152602001610f59858481518110610f2d57610f2d6140cb565b602090810291909101810151516001600160a01b038a1660009081526003909252604090912090611ed6565b61ffff1690528251839083908110610f7357610f736140cb565b60200260200101819052508080610f899061411d565b915050610ed1565b509392505050565b6060610fa56004611d88565b905090565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101829052610fdf600484611f52565b91509150915091565b7fefa2b23cd542346b38207721a79c51a70b01c47249f50a351696d8f313a8fe1c6110146001826113ac565b6000611021600485611f52565b841515608082015291506110389050600482611d6c565b6110905760405162461bcd60e51b815260206004820152602360248201527f426f6f6b696e6746616365743a20556e61626c6520746f20757064617465207960448201526232b0b960e91b6064820152608401610395565b8051602080830151604080850151606080870151608080890151855161ffff909916895295151596880196909652928601919091528401521515908201527f85d7a9b39d1a1f0f2f68880d124ededd330f406e1b42f93234665005812d5a829060a00161075d565b61ffff8116600090815260028301602052604081206060919061111a90612035565b67ffffffffffffffff811115611132576111326141f9565b60405190808252806020026020018201604052801561118b57816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282526000199092019101816111505790505b50905060005b61ffff8416600090815260028601602052604090206111af90612035565b811015610f915761ffff8416600090815260028601602052604081206111d59083612040565b50600081815260038801602052604090819020815160a0810190925280549293509091829060ff16600281111561120e5761120e613c88565b600281111561121f5761121f613c88565b8152815461ffff610100820481166020840152630100000090910416604082015260018201546060820152600290910154608090910152835184908490811061126a5761126a6140cb565b60200260200101819052505080806112819061411d565b915050611191565b6040805160a081018252600080825260208201819052918101829052606081018290526080810182905260006112bf858561205c565b61ffff8616600090815260028801602052604090209091506112e190826120b3565b1561137557600081815260038701602052604090819020815160a081019092528054600192908290829060ff16600281111561131f5761131f613c88565b600281111561133057611330613c88565b8152815461ffff610100820481166020840152630100000090910416604082015260018201546060820152600290910154608090910152919450909250610302915050565b50506040805160a0810182526000808252602082018190529181018290526060810182905260808101829052909590945092505050565b6113b78282336120bf565b5050565b6000806113c78361213d565b90506113d3848261218a565b15611416576000908152600280850160205260408220805462ffffff191681556001808201849055918101929092556003909101805460ff1916905590506102ae565b5060009392505050565b60008061142d858561205c565b61ffff86166000908152600288016020526040902090915061144f90826120b3565b1561158b576000818152600387016020526040808220815160a081019092528054829060ff16600281111561148657611486613c88565b600281111561149757611497613c88565b8152815461ffff610100820481166020840152630100000090910416604082015260018201546060820152600291820154608090910152909150819085908111156114e4576114e4613c88565b908160028111156114f7576114f7613c88565b905250600082815260038801602052604090208151815483929190829060ff1916600183600281111561152c5761152c613c88565b021790555060208201518154604084015161ffff90811663010000000264ffff0000001991909316610100021664ffffffff00199091161717815560608201516001808301919091556080909201516002909101559250611591915050565b60009150505b949350505050565b600054610100900460ff16156115f15760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610395565b565b60006102ae600883612196565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101829052908061163a6004898888886121a2565b91509150816116b15760405162461bcd60e51b815260206004820152602560248201527f426f6f6b696e6746616365743a20556e61626c6520746f206275696c6420426f60448201527f6f6b696e670000000000000000000000000000000000000000000000000000006064820152608401610395565b4281608001511161172a5760405162461bcd60e51b815260206004820152602a60248201527f426f6f6b696e6746616365743a20646174652073686f756c6420626520696e2060448201527f74686520667574757265000000000000000000000000000000000000000000006064820152608401610395565b6001600160a01b038716600090815260036020526040902061174c908261226d565b6117bd5760405162461bcd60e51b8152602060048201526024808201527f426f6f6b696e6746616365743a20426f6f6b696e6720616c726561647920657860448201527f69737473000000000000000000000000000000000000000000000000000000006064820152608401610395565b979650505050505050565b61180c6040518060a0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b6000611819600484611f52565b6040805160a0810182526001600160a01b0380891682526000546201000090041660208201529193509091508101611850866123c0565b815260200182604001518152602001826060015181525091505092915050565b600061188985608001518561248f90919063ffffffff16565b90508460400151811061189c5750611937565b826118a7828261420f565b905060006118c28760600151876124a790919063ffffffff16565b90508181106118ea576118e2826118d88861256b565b51889190876125b1565b505050611937565b801561190a576118fd816118d88861256b565b611907818361420f565b91505b61191586838661267a565b86516020880151611933916001600160a01b03909116903085612685565b5050505b50505050565b60008061194d836000015161213d565b9050611959848261270d565b156114165760009081526002808501602090815260409283902085518154928701511515620100000262ffffff1990931661ffff909116179190911781559184015160018084019190915560608501519183019190915560808401516003909201805492151560ff199093169290921790915590506102ae565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526001600160a01b03841660009081526003602052604081208190611a23908686611289565b9150915081611a9a5760405162461bcd60e51b815260206004820152603660248201527f426f6f6b696e6746616365743a20284e6f6e4578697374696e6729205265736560448201527f72766174696f6e20646f6573206e6f74206578697374000000000000000000006064820152608401610395565b95945050505050565b42816080015111611b1c5760405162461bcd60e51b815260206004820152602960248201527f426f6f6b696e6746616365743a2043616e206e6f742063616e63656c2070617360448201527f7420626f6f6b696e6700000000000000000000000000000000000000000000006064820152608401610395565b6020808201516040808401516001600160a01b03861660009081526003909452908320611b4a929091612719565b50905080611bc05760405162461bcd60e51b815260206004820152602660248201527f426f6f6b696e6746616365743a20556e61626c6520746f2064656c657465204260448201527f6f6f6b696e6700000000000000000000000000000000000000000000000000006064820152608401610395565b611c0b60006007016000856001600160a01b03166001600160a01b0316815260200190815260200160002083606001518460800151611c038787602001516117c8565b9291906128c4565b505050565b600080600080611c208787611f52565b91509150818015611c32575080608001515b15611cda576000816020015115611c6b5761016e82604001518360600151611c5a919061420f565b611c649190614226565b9050611c8f565b61016d82604001518360600151611c82919061420f565b611c8c9190614226565b90505b6001611c9c600283614226565b611ca7600189614248565b611cb59061ffff168461426b565b8460400151611cc4919061428a565b611cce919061428a565b94509450505050610302565b50600096879650945050505050565b6040805160608101825260008082526020820181905291810191909152604080516060810182526001600160a01b038085168252600054620100009004166020820152908101611d38846123c0565b905292915050565b6000611591611d4f858461292d565b84906124a7565b6000611591611d65858461292d565b849061248f565b600080611d7c836000015161213d565b9050611959848261293d565b60606000611d9583612955565b90506000815167ffffffffffffffff811115611db357611db36141f9565b604051908082528060200260200182016040528015611e0c57816020015b6040805160a081018252600080825260208083018290529282018190526060820181905260808201528252600019909201910181611dd15790505b50905060005b8251811015610f9157846002016000848381518110611e3357611e336140cb565b6020908102919091018101518252818101929092526040908101600020815160a081018352815461ffff8116825260ff6201000090910481161515948201949094526001820154928101929092526002810154606083015260030154909116151560808201528251839083908110611ead57611ead6140cb565b60200260200101819052508080611ec39061411d565b915050611e12565b60006102ae82612960565b600080611ee384846110f8565b90506000805b8251811015611f49576002838281518110611f0657611f066140cb565b6020026020010151600001516002811115611f2357611f23613c88565b1415611f375781611f33816142a2565b9250505b80611f418161411d565b915050611ee9565b50949350505050565b6040805160a08101825260008082526020820181905291810182905260608101829052608081018290526000611f878461213d565b9050611f93858261293d565b15611ffe57600090815260028086016020908152604092839020835160a081018552815461ffff8116825260ff62010000909104811615159382019390935260018281015495820195909552928101546060840152600301541615156080820152909250905061202e565b50506040805160a08101825260008082526020820181905291810182905260608101829052608081018290529091505b9250929050565b60006102ae82611ecb565b600080808061204f868661296a565b9097909650945050505050565b6040517fffff00000000000000000000000000000000000000000000000000000000000060f084811b8216602084015283901b1660228201526000906024016040516020818303038152906040526102ab906142c4565b60006102ab8383612995565b6000828152602084815260408083206001600160a01b038516845290915290205460ff16611c0b576120fb816001600160a01b031660146129a1565b6121068360206129a1565b604051602001612117929190614317565b60408051601f198184030181529082905262461bcd60e51b825261039591600401614398565b6040517fffff00000000000000000000000000000000000000000000000000000000000060f083901b1660208201526000906022016040516020818303038152906040526102ae906142c4565b60006102ab8383612bca565b60006102ab8383612cbd565b6040805160a08101825260008082526020820181905291810182905260608101829052608081018290526000806121da898888611c10565b9150915081156122315760016040518060a001604052808a600281111561220357612203613c88565b81526020018961ffff1681526020018861ffff16815260200187815260200183815250935093505050612263565b50506040805160a081018252600080825260208201819052918101829052606081018290526080810182905290925090505b9550959350505050565b6000806122828360200151846040015161205c565b608084015160208086015161ffff16600090815260028801909152604090209192506122b091908390612cdf565b1561141657606083015160208085015161ffff166000908152600187019091526040812080549091906122e490849061428a565b9091555050600081815260038501602052604090208351815485929190829060ff1916600183600281111561231b5761231b613c88565b0217905550602082810151825460408086015164ffffffff001990921661010061ffff9485160264ffff00000019161763010000009284169290920291909117845560608501516001808601919091556080909501516002909401939093558682015181166000908152918890529181208054909261239c918591166140f7565b92506101000a81548161ffff021916908361ffff16021790555060019150506102ae565b600080806123ce6004611d88565b905060005b81518161ffff1610156124865742828261ffff16815181106123f7576123f76140cb565b602002602001015160600151101561240e57612474565b6000612464838361ffff1681518110612429576124296140cb565b602090810291909101810151516001600160a01b038916600090815260038352604080822061ffff9093168252600190920190925290205490565b905083811115612472578093505b505b8061247e816142a2565b9150506123d3565b50909392505050565b600061249b83836124a7565b83546102ab919061420f565b60006124c58360010154600f81810b600160801b909204900b131590565b156124d2575060006102ae565b60005b6001840154600f81810b600160801b909204900b038110156125645760006125006001860183612cec565b905083811161254b5760038501600061251c6001880185612cec565b81526020019081526020016000205483612536919061428a565b9250838114156125465750612564565b612551565b50612564565b508061255c8161411d565b9150506124d5565b5092915050565b6040805180820190915260008082526020820152600061258d83600101612d8c565b80835260009081526003909301602090815260409093205492820192909252919050565b808214156125be57611937565b80821061260d5760405162461bcd60e51b815260206004820152601b60248201527f4f7264657265645374616b654c69623a2057726f6e6752616e676500000000006044820152606401610395565b6001840154600f81810b600160801b909204900b1361266e5760405162461bcd60e51b815260206004820152601660248201527f4f7264657265645374616b654c69623a20456d707479000000000000000000006044820152606401610395565b61193784848484612df7565b611c0b838383612eac565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052611937908590612f73565b60006102ab8383613058565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101829052600061274f858561205c565b61ffff86166000908152600288016020526040902090915061277190826130a7565b15611375576000818152600387016020526040808220815160a081019092528054829060ff1660028111156127a8576127a8613c88565b60028111156127b9576127b9613c88565b8152815461ffff610100820481166020808501919091526301000000909204811660408085019190915260018086015460608087019190915260029096015460809095019490945293850151908b166000908152928c019091529181208054939450919261282890849061420f565b909155505061ffff8087166000908152602089905260408120805460019391929161285591859116614248565b825461ffff9182166101009390930a9283029190920219909116179055506000918252600387016020526040822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000016815560018181018490556002909101929092559092509050610302565b60006128e385606001518660800151866130b39092919063ffffffff16565b9050806128f05750611937565b6000838210612900575082612903565b50805b6129258187608001516301e133808661291c919061420f565b88929190613114565b505050505050565b60006102ab6301e133808361420f565b600081815260018301602052604081205415156102ab565b60606102ae8261312c565b60006102ae825490565b600080806129788585613188565b600081815260029690960160205260409095205494959350505050565b60006102ab838361293d565b606060006129b083600261426b565b6129bb90600261428a565b67ffffffffffffffff8111156129d3576129d36141f9565b6040519080825280601f01601f1916602001820160405280156129fd576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612a3457612a346140cb565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612a9757612a976140cb565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612ad384600261426b565b612ade90600161428a565b90505b6001811115612b7b577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612b1f57612b1f6140cb565b1a60f81b828281518110612b3557612b356140cb565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93612b74816143cb565b9050612ae1565b5083156102ab5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610395565b60008181526001830160205260408120548015612cb3576000612bee60018361420f565b8554909150600090612c029060019061420f565b9050818114612c67576000866000018281548110612c2257612c226140cb565b9060005260206000200154905080876000018481548110612c4557612c456140cb565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612c7857612c786143e2565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506102ae565b60009150506102ae565b6001600160a01b038116600090815260018301602052604081205415156102ab565b6000611591848484613194565b600080612d0f612cfb846131b1565b8554612d0a9190600f0b6143f8565b61324d565b8454909150600160801b9004600f90810b9082900b12612d715760405162461bcd60e51b815260206004820152600b60248201527f4f75744f66426f756e64730000000000000000000000000000000000000000006044820152606401610395565b600f0b60009081526001939093016020525050604090205490565b6000612da78254600f81810b600160801b909204900b131590565b15612ddc5760405162461bcd60e51b8152602060048201526005602482015264456d70747960d81b6044820152606401610395565b508054600f0b60009081526001909101602052604090205490565b6000612e0285613301565b8051909150831415612e91578381602001511415612e2a57612e25858584613360565b6105f3565b8381602001511115612e5c57612e41858584613360565b612e2585858360200151612e55919061420f565b8351613360565b612e6b85826020015184613360565b612e2585826020015186612e7f919061420f565b612e8b88600101612d8c565b85612df7565b612e9d85858585612df7565b6105f385826020015183600001515b6001830154600f81810b600160801b909204900b13612ed057611c0b8383836134d8565b6000612ede846001016135da565b905081811015612ef857612ef38484846134d8565b611937565b81811415612f0b57612ef3848484613654565b6000612f1985600101613712565b9050612f26858585612eac565b6105f360018601828154600160801b90819004600f0b6000818152600180860160205260409091209390935583546fffffffffffffffffffffffffffffffff908116939091011602179055565b6000612fc8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166137b29092919063ffffffff16565b805190915015611c0b5780806020019051810190612fe6919061446c565b611c0b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610395565b600081815260018301602052604081205461309f575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556102ae565b5060006102ae565b60006102ab83836137c1565b6000805b6130c0856137de565b811015610f915760006130d386836137fb565b9050848160000151101580156130ea575080518410155b156131015760208101516130fe908461428a565b92505b508061310c8161411d565b9150506130b7565b81811061312057611937565b61193784848484613843565b60608160000180548060200260200160405190810160405280929190818152602001828054801561317c57602002820191906000526020600020905b815481526020019060010190808311613168575b50505050509050919050565b60006102ab8383613882565b60008281526002840160205260408120829055611591848461270d565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8211156132495760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e743235360000000000000000000000000000000000000000000000006064820152608401610395565b5090565b60007fffffffffffffffffffffffffffffffff80000000000000000000000000000000821280159061328f57506f7fffffffffffffffffffffffffffffff8213155b6132495760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f32382062697473000000000000000000000000000000000000000000000000006064820152608401610395565b60408051808201909152600080825260208201526000613323836001016138ac565b600081815260038501602052604081208054908290558554929350918291869161334e90849061420f565b90915550509082526020820152919050565b6001830154600f81810b600160801b909204900b136133d957611c0b838383806135ab60018501828154600f90810b600019019081900b600090815260018401602052604090209190915581546fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff909116179055565b60006133e784600101612d8c565b90508181111561345157612ef3848484806135ab60018501828154600f90810b600019019081900b600090815260018401602052604090209190915581546fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff909116179055565b8181141561346457612ef3848484613654565b6000613472856001016138ac565b905061347f858585613360565b6105f360018601828154600f90810b600019019081900b600090815260018401602052604090209190915581546fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff909116179055565b600081815260038401602052604090205481901561355e5760405162461bcd60e51b815260206004820152602c60248201527f4f7264657265645374616b654c69623a2043414e204e4f54204f56455252494460448201527f452054494d455354414d505300000000000000000000000000000000000000006064820152608401610395565b6135ab60018501828154600160801b90819004600f0b6000818152600180860160205260409091209390935583546fffffffffffffffffffffffffffffffff908116939091011602179055565b600081815260038501602052604081208490558454849186916135cf90849061428a565b909155505050505050565b60006135f58254600f81810b600160801b909204900b131590565b1561362a5760405162461bcd60e51b8152602060048201526005602482015264456d70747960d81b6044820152606401610395565b508054600160801b9004600f90810b60001901900b60009081526001909101602052604090205490565b600081815260038401602052604090205481906136d95760405162461bcd60e51b815260206004820152602760248201527f4f7264657265645374616b654c69623a20547279696e6720746f20757064617460448201527f6520656d707479000000000000000000000000000000000000000000000000006064820152608401610395565b6000818152600385016020526040812080548592906136f990849061428a565b90915550508354839085906000906135cf90849061428a565b600061372d8254600f81810b600160801b909204900b131590565b156137625760405162461bcd60e51b8152602060048201526005602482015264456d70747960d81b6044820152606401610395565b508054600160801b90819004600f90810b600019019081900b60009081526001840160205260408120805491905583546fffffffffffffffffffffffffffffffff90811692169092021790915590565b6060611591848460008561394b565b600081815260028301602052604081208190556102ab838361218a565b60006102ae8260010154600f81810b600160801b909204900b0390565b6040805180820190915260008082526020820152600061381e6001850184612cec565b8083526000908152600390940160209081526040909420549382019390935292915050565b600061384e85613a88565b90508281600001511161386b57612e258585836000015185613aaa565b61387485613b61565b9050612e9d85858585613843565b6000826000018281548110613899576138996140cb565b9060005260206000200154905092915050565b60006138c78254600f81810b600160801b909204900b131590565b156138fc5760405162461bcd60e51b8152602060048201526005602482015264456d70747960d81b6044820152606401610395565b508054600f0b6000818152600180840160205260408220805492905583546fffffffffffffffffffffffffffffffff191692016fffffffffffffffffffffffffffffffff169190911790915590565b6060824710156139c35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610395565b6001600160a01b0385163b613a1a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610395565b600080866001600160a01b03168587604051613a369190614489565b60006040518083038185875af1925050503d8060008114613a73576040519150601f19603f3d011682016040523d82523d6000602084013e613a78565b606091505b50915091506117bd828286613bd0565b6040805180820190915260008082526020820152600061258d836001016135da565b82613ab457611937565b6000613abf85613b61565b8051909150831415613b55578381602001511415613ae257612e25858584612eac565b8381602001511115613b1457613af9858584612eac565b612e2585858360200151613b0d919061420f565b8351612eac565b8060200151841115612e2557613b2f85826020015184612eac565b612e2585826020015186613b43919061420f565b613b4f886001016135da565b85613aaa565b612e9d85858585613aaa565b60408051808201909152600080825260208201526000613b8383600101613712565b80835260008181526003850160209081526040822054908501819052855492935091859190613bb390849061420f565b909155505060009081526003909201602052604082209190915590565b60608315613bdf575081610b2c565b825115613bef5782518084602001fd5b8160405162461bcd60e51b81526004016103959190614398565b60405180604001604052806002906020820280368337509192915050565b80356001600160a01b0381168114613c3e57600080fd5b919050565b803561ffff81168114613c3e57600080fd5b60008060408385031215613c6857600080fd5b613c7183613c27565b9150613c7f60208401613c43565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b805160038110613cbe57634e487b7160e01b600052602160045260246000fd5b80835250602081015161ffff8082166020850152806040840151166040850152505060608101516060830152608081015160808301525050565b6020808252825182820181905260009190848201906040850190845b81811015613d3a57613d27838551613c9e565b9284019260a09290920191600101613d14565b50909695505050505050565b600080600060608486031215613d5b57600080fd5b613d6484613c27565b9250613d7260208501613c43565b9150613d8060408501613c43565b90509250925092565b821515815260c08101610b2c6020830184613c9e565b600060208284031215613db157600080fd5b6102ab82613c43565b60008083601f840112613dcc57600080fd5b50813567ffffffffffffffff811115613de457600080fd5b6020830191508360208260061b850101111561202e57600080fd5b600080600060408486031215613e1457600080fd5b613e1d84613c27565b9250602084013567ffffffffffffffff811115613e3957600080fd5b613e4586828701613dba565b9497909650939450505050565b600080600060408486031215613e6757600080fd5b833567ffffffffffffffff811115613e7e57600080fd5b613e8a86828701613dba565b909790965060209590950135949350505050565b8015158114613eac57600080fd5b50565b600080600080600060a08688031215613ec757600080fd5b613ed086613c43565b94506020860135613ee081613e9e565b935060408601359250606086013591506080860135613efe81613e9e565b809150509295509295909350565b60008060208385031215613f1f57600080fd5b823567ffffffffffffffff811115613f3657600080fd5b613f4285828601613dba565b90969095509350505050565b600060208284031215613f6057600080fd5b6102ab82613c27565b60208082528251828201819052600091906040908185019086840185805b83811015613fc857825185835b6002811015613fb557825161ffff1682529189019190890190600101613f94565b5050509385019391860191600101613f87565b509298975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015613d3a5761403883855161ffff815116825260208101511515602083015260408101516040830152606081015160608301526080810151151560808301525050565b9284019260a09290920191600101613ff2565b821515815260c08101610b2c602083018461ffff815116825260208101511515602083015260408101516040830152606081015160608301526080810151151560808301525050565b600080604083850312156140a757600080fd5b6140b083613c43565b915060208301356140c081613e9e565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600061ffff808316818516808303821115614114576141146140e1565b01949350505050565b6000600019821415614131576141316140e1565b5060010190565b818352600060208085019450826000805b86811015614193578783835b600281101561417d5761ffff61416a83613c43565b1683529186019190860190600101614155565b5050506040978801979290920191600101614149565b50959695505050505050565b60006001600160a01b038087168352808616602084015250606060408301526141cc606083018486614138565b9695505050505050565b6001600160a01b0384168152604060208201526000611a9a604083018486614138565b634e487b7160e01b600052604160045260246000fd5b600082821015614221576142216140e1565b500390565b60008261424357634e487b7160e01b600052601260045260246000fd5b500490565b600061ffff83811690831681811015614263576142636140e1565b039392505050565b6000816000190483118215151615614285576142856140e1565b500290565b6000821982111561429d5761429d6140e1565b500190565b600061ffff808316818114156142ba576142ba6140e1565b6001019392505050565b805160208083015191908110156142e5576000198160200360031b1b821691505b50919050565b60005b838110156143065781810151838201526020016142ee565b838111156119375750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161434f8160178501602088016142eb565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161438c8160288401602088016142eb565b01602801949350505050565b60208152600082518060208401526143b78160408501602087016142eb565b601f01601f19169190910160400192915050565b6000816143da576143da6140e1565b506000190190565b634e487b7160e01b600052603160045260246000fd5b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03841381151615614432576144326140e1565b827f8000000000000000000000000000000000000000000000000000000000000000038412811615614466576144666140e1565b50500190565b60006020828403121561447e57600080fd5b81516102ab81613e9e565b6000825161449b8184602087016142eb565b919091019291505056fea2646970667358221220f19c3cf7a84559ff33662691f5bc1286848b371fa2072572417e60f9b0fd8df064736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80634c0e453e11610097578063757a3c0d11610066578063757a3c0d1461021d57806379ea4ecf1461023d578063a1ff8ff814610252578063f4fed22a1461027357600080fd5b80634c0e453e146101c357806362bdefb1146101e457806366fd0068146101f7578063709d872c1461020a57600080fd5b8063390d41a2116100d3578063390d41a214610177578063395560fc1461018a5780634b4222871461019d5780634ba25e8a146101b057600080fd5b80630fac92f01461010557806310789efe1461012e578063137ae83d1461014f5780631f14148b14610164575b600080fd5b610118610113366004613c55565b610286565b6040516101259190613cf8565b60405180910390f35b61014161013c366004613d46565b6102b4565b604051610125929190613d89565b61016261015d366004613d9f565b61030a565b005b610162610172366004613dff565b6103da565b610162610185366004613e52565b6105fa565b610162610198366004613eaf565b61076b565b6101626101ab366004613dff565b61087b565b6101626101be366004613f0c565b6109ae565b6101d66101d1366004613d46565b610a99565b604051908152602001610125565b6101d66101f2366004613d46565b610b33565b610162610205366004613dff565b610bc1565b610162610218366004613eaf565b610d56565b61023061022b366004613f4e565b610e66565b6040516101259190613f69565b610245610f99565b6040516101259190613fd6565b610265610260366004613d9f565b610faa565b60405161012592919061404b565b610162610281366004614094565b610fe8565b6001600160a01b03821660009081526003602052604090206060906102ab90836110f8565b90505b92915050565b6040805160a0810182526000808252602080830182905282840182905260608301829052608083018290526001600160a01b0387168252600390529182206102fd908585611289565b915091505b935093915050565b7fefa2b23cd542346b38207721a79c51a70b01c47249f50a351696d8f313a8fe1c6103366001826113ac565b6103416004836113bb565b61039e5760405162461bcd60e51b815260206004820152602360248201527f426f6f6b696e6746616365743a20556e61626c6520746f2072656d6f7665205960448201526232b0b960e91b60648201526084015b60405180910390fd5b60405161ffff831681527f95e58e7b256936d20ca1bde8fd750c5ae53d5d866224c71f5926b17c350ba166906020015b60405180910390a15050565b7fefa2b23cd542346b38207721a79c51a70b01c47249f50a351696d8f313a8fe1c6104066001826113ac565b6000805b838110156105a9576000806104b187878581811061042a5761042a6140cb565b905060400201600060028110610442576104426140cb565b6020020160208101906104559190613d9f565b888886818110610467576104676140cb565b90506040020160016002811061047f5761047f6140cb565b6020020160208101906104929190613d9f565b6001600160a01b038b1660009081526003602052604090209190611289565b91509150816104c1575050610597565b6000815160028111156104d6576104d6613c88565b141561059457600061057c8888868181106104f3576104f36140cb565b90506040020160006002811061050b5761050b6140cb565b60200201602081019061051e9190613d9f565b898987818110610530576105306140cb565b905060400201600160028110610548576105486140cb565b60200201602081019061055b9190613d9f565b6001600160a01b038c16600090815260036020526040902091906001611420565b905080156105925761058f6001866140f7565b94505b505b50505b806105a18161411d565b91505061040a565b5061ffff8116156105f3577f967f812a05038d1f67c7262eddabfb6264aefba37a1d10541666c1ae0ccc5d89335b8686866040516105ea949392919061419f565b60405180910390a15b5050505050565b610602611599565b600061060d336115f3565b15610616575060015b60005b838110156107295760006106a8833388888681811061063a5761063a6140cb565b905060400201600060028110610652576106526140cb565b6020020160208101906106659190613d9f565b898987818110610677576106776140cb565b90506040020160016002811061068f5761068f6140cb565b6020020160208101906106a29190613d9f565b88611600565b336000818152600760205260409020608083015192935061071692909187919061070e908b8b898181106106de576106de6140cb565b9050604002016000600281106106f6576106f66140cb565b6020020160208101906107099190613d9f565b6117c8565b929190611870565b50806107218161411d565b915050610619565b507fa744791f7ba4cf0ed4fb864ccdf82192959af8252fd0250f73f067166f51ed6b33858560405161075d939291906141d6565b60405180910390a150505050565b7fefa2b23cd542346b38207721a79c51a70b01c47249f50a351696d8f313a8fe1c6107976001826113ac565b6040805160a08101825261ffff8816815286151560208201529081018590526060810184905282151560808201526107d19060049061193d565b61081d5760405162461bcd60e51b815260206004820181905260248201527f426f6f6b696e6746616365743a20556e61626c6520746f2061646420796561726044820152606401610395565b6040805161ffff8816815286151560208201529081018590526060810184905282151560808201527fc3da413c8752517eb598cf3d589891d0641833769cdf76283ba44468a3d46b869060a0015b60405180910390a1505050505050565b7fefa2b23cd542346b38207721a79c51a70b01c47249f50a351696d8f313a8fe1c6108a76001826113ac565b6000805b8381101561097c5760006109538686848181106108ca576108ca6140cb565b9050604002016000600281106108e2576108e26140cb565b6020020160208101906108f59190613d9f565b878785818110610907576109076140cb565b90506040020160016002811061091f5761091f6140cb565b6020020160208101906109329190613d9f565b6001600160a01b038a16600090815260036020526040902091906002611420565b90508015610969576109666001846140f7565b92505b50806109748161411d565b9150506108ab565b5061ffff8116156105f3577f681e7c2db85861f3f1a1ddf35a1f16c8a5400d75a3d07509817b30931151f576336105d7565b6109b6611599565b60005b81811015610a65576000610a46338585858181106109d9576109d96140cb565b9050604002016000600281106109f1576109f16140cb565b602002016020810190610a049190613d9f565b868686818110610a1657610a166140cb565b905060400201600160028110610a2e57610a2e6140cb565b602002016020810190610a419190613d9f565b6119d3565b9050610a523382611aa3565b5080610a5d8161411d565b9150506109b9565b507fde8b8d404fa6ad1e0533531ef96e711b34a6df8d1133968c52bc335861f0ad8d3383836040516103ce939291906141d6565b60008080610aa960048686611c10565b9150915081610afa5760405162461bcd60e51b815260206004820152601960248201527f756e61626c6520746f206275696c642074696d657374616d70000000000000006044820152606401610395565b6001600160a01b0386166000908152600760205260409020610b279082610b2033611ce9565b9190611d40565b925050505b9392505050565b60008080610b4360048686611c10565b9150915081610b945760405162461bcd60e51b815260206004820152601960248201527f756e61626c6520746f206275696c642074696d657374616d70000000000000006044820152606401610395565b6001600160a01b0386166000908152600760205260409020610b279082610bba33611ce9565b9190611d56565b7fefa2b23cd542346b38207721a79c51a70b01c47249f50a351696d8f313a8fe1c610bed6001826113ac565b610bf5611599565b60005b82811015610d22576000610c5586868685818110610c1857610c186140cb565b905060400201600060028110610c3057610c306140cb565b602002016020810190610c439190613d9f565b878786818110610a1657610a166140cb565b9050600081516002811115610c6c57610c6c613c88565b14610d055760405162461bcd60e51b815260206004820152604160248201527f426f6f6b696e6746616365743a20284e6f7450656e64696e67292043616e206e60448201527f6f742063616e63656c20636f6e6669726d6564206163636f6d6d6f646174696f60648201527f6e00000000000000000000000000000000000000000000000000000000000000608482015260a401610395565b610d0f8682611aa3565b5080610d1a8161411d565b915050610bf8565b507fde8b8d404fa6ad1e0533531ef96e711b34a6df8d1133968c52bc335861f0ad8d84848460405161075d939291906141d6565b7fefa2b23cd542346b38207721a79c51a70b01c47249f50a351696d8f313a8fe1c610d826001826113ac565b6040805160a08101825261ffff881681528615156020820152908101859052606081018490528215156080820152610dbc90600490611d6c565b610e145760405162461bcd60e51b815260206004820152602360248201527f426f6f6b696e6746616365743a20556e61626c6520746f20757064617465205960448201526232b0b960e91b6064820152608401610395565b6040805161ffff8816815286151560208201529081018590526060810184905282151560808201527f85d7a9b39d1a1f0f2f68880d124ededd330f406e1b42f93234665005812d5a829060a00161086b565b60606000610e746004611d88565b90506000815167ffffffffffffffff811115610e9257610e926141f9565b604051908082528060200260200182016040528015610ecb57816020015b610eb8613c09565b815260200190600190039081610eb05790505b50905060005b610edb6004611ecb565b811015610f91576040518060400160405280848381518110610eff57610eff6140cb565b60200260200101516000015161ffff1661ffff168152602001610f59858481518110610f2d57610f2d6140cb565b602090810291909101810151516001600160a01b038a1660009081526003909252604090912090611ed6565b61ffff1690528251839083908110610f7357610f736140cb565b60200260200101819052508080610f899061411d565b915050610ed1565b509392505050565b6060610fa56004611d88565b905090565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101829052610fdf600484611f52565b91509150915091565b7fefa2b23cd542346b38207721a79c51a70b01c47249f50a351696d8f313a8fe1c6110146001826113ac565b6000611021600485611f52565b841515608082015291506110389050600482611d6c565b6110905760405162461bcd60e51b815260206004820152602360248201527f426f6f6b696e6746616365743a20556e61626c6520746f20757064617465207960448201526232b0b960e91b6064820152608401610395565b8051602080830151604080850151606080870151608080890151855161ffff909916895295151596880196909652928601919091528401521515908201527f85d7a9b39d1a1f0f2f68880d124ededd330f406e1b42f93234665005812d5a829060a00161075d565b61ffff8116600090815260028301602052604081206060919061111a90612035565b67ffffffffffffffff811115611132576111326141f9565b60405190808252806020026020018201604052801561118b57816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282526000199092019101816111505790505b50905060005b61ffff8416600090815260028601602052604090206111af90612035565b811015610f915761ffff8416600090815260028601602052604081206111d59083612040565b50600081815260038801602052604090819020815160a0810190925280549293509091829060ff16600281111561120e5761120e613c88565b600281111561121f5761121f613c88565b8152815461ffff610100820481166020840152630100000090910416604082015260018201546060820152600290910154608090910152835184908490811061126a5761126a6140cb565b60200260200101819052505080806112819061411d565b915050611191565b6040805160a081018252600080825260208201819052918101829052606081018290526080810182905260006112bf858561205c565b61ffff8616600090815260028801602052604090209091506112e190826120b3565b1561137557600081815260038701602052604090819020815160a081019092528054600192908290829060ff16600281111561131f5761131f613c88565b600281111561133057611330613c88565b8152815461ffff610100820481166020840152630100000090910416604082015260018201546060820152600290910154608090910152919450909250610302915050565b50506040805160a0810182526000808252602082018190529181018290526060810182905260808101829052909590945092505050565b6113b78282336120bf565b5050565b6000806113c78361213d565b90506113d3848261218a565b15611416576000908152600280850160205260408220805462ffffff191681556001808201849055918101929092556003909101805460ff1916905590506102ae565b5060009392505050565b60008061142d858561205c565b61ffff86166000908152600288016020526040902090915061144f90826120b3565b1561158b576000818152600387016020526040808220815160a081019092528054829060ff16600281111561148657611486613c88565b600281111561149757611497613c88565b8152815461ffff610100820481166020840152630100000090910416604082015260018201546060820152600291820154608090910152909150819085908111156114e4576114e4613c88565b908160028111156114f7576114f7613c88565b905250600082815260038801602052604090208151815483929190829060ff1916600183600281111561152c5761152c613c88565b021790555060208201518154604084015161ffff90811663010000000264ffff0000001991909316610100021664ffffffff00199091161717815560608201516001808301919091556080909201516002909101559250611591915050565b60009150505b949350505050565b600054610100900460ff16156115f15760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610395565b565b60006102ae600883612196565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101829052908061163a6004898888886121a2565b91509150816116b15760405162461bcd60e51b815260206004820152602560248201527f426f6f6b696e6746616365743a20556e61626c6520746f206275696c6420426f60448201527f6f6b696e670000000000000000000000000000000000000000000000000000006064820152608401610395565b4281608001511161172a5760405162461bcd60e51b815260206004820152602a60248201527f426f6f6b696e6746616365743a20646174652073686f756c6420626520696e2060448201527f74686520667574757265000000000000000000000000000000000000000000006064820152608401610395565b6001600160a01b038716600090815260036020526040902061174c908261226d565b6117bd5760405162461bcd60e51b8152602060048201526024808201527f426f6f6b696e6746616365743a20426f6f6b696e6720616c726561647920657860448201527f69737473000000000000000000000000000000000000000000000000000000006064820152608401610395565b979650505050505050565b61180c6040518060a0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b6000611819600484611f52565b6040805160a0810182526001600160a01b0380891682526000546201000090041660208201529193509091508101611850866123c0565b815260200182604001518152602001826060015181525091505092915050565b600061188985608001518561248f90919063ffffffff16565b90508460400151811061189c5750611937565b826118a7828261420f565b905060006118c28760600151876124a790919063ffffffff16565b90508181106118ea576118e2826118d88861256b565b51889190876125b1565b505050611937565b801561190a576118fd816118d88861256b565b611907818361420f565b91505b61191586838661267a565b86516020880151611933916001600160a01b03909116903085612685565b5050505b50505050565b60008061194d836000015161213d565b9050611959848261270d565b156114165760009081526002808501602090815260409283902085518154928701511515620100000262ffffff1990931661ffff909116179190911781559184015160018084019190915560608501519183019190915560808401516003909201805492151560ff199093169290921790915590506102ae565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526001600160a01b03841660009081526003602052604081208190611a23908686611289565b9150915081611a9a5760405162461bcd60e51b815260206004820152603660248201527f426f6f6b696e6746616365743a20284e6f6e4578697374696e6729205265736560448201527f72766174696f6e20646f6573206e6f74206578697374000000000000000000006064820152608401610395565b95945050505050565b42816080015111611b1c5760405162461bcd60e51b815260206004820152602960248201527f426f6f6b696e6746616365743a2043616e206e6f742063616e63656c2070617360448201527f7420626f6f6b696e6700000000000000000000000000000000000000000000006064820152608401610395565b6020808201516040808401516001600160a01b03861660009081526003909452908320611b4a929091612719565b50905080611bc05760405162461bcd60e51b815260206004820152602660248201527f426f6f6b696e6746616365743a20556e61626c6520746f2064656c657465204260448201527f6f6f6b696e6700000000000000000000000000000000000000000000000000006064820152608401610395565b611c0b60006007016000856001600160a01b03166001600160a01b0316815260200190815260200160002083606001518460800151611c038787602001516117c8565b9291906128c4565b505050565b600080600080611c208787611f52565b91509150818015611c32575080608001515b15611cda576000816020015115611c6b5761016e82604001518360600151611c5a919061420f565b611c649190614226565b9050611c8f565b61016d82604001518360600151611c82919061420f565b611c8c9190614226565b90505b6001611c9c600283614226565b611ca7600189614248565b611cb59061ffff168461426b565b8460400151611cc4919061428a565b611cce919061428a565b94509450505050610302565b50600096879650945050505050565b6040805160608101825260008082526020820181905291810191909152604080516060810182526001600160a01b038085168252600054620100009004166020820152908101611d38846123c0565b905292915050565b6000611591611d4f858461292d565b84906124a7565b6000611591611d65858461292d565b849061248f565b600080611d7c836000015161213d565b9050611959848261293d565b60606000611d9583612955565b90506000815167ffffffffffffffff811115611db357611db36141f9565b604051908082528060200260200182016040528015611e0c57816020015b6040805160a081018252600080825260208083018290529282018190526060820181905260808201528252600019909201910181611dd15790505b50905060005b8251811015610f9157846002016000848381518110611e3357611e336140cb565b6020908102919091018101518252818101929092526040908101600020815160a081018352815461ffff8116825260ff6201000090910481161515948201949094526001820154928101929092526002810154606083015260030154909116151560808201528251839083908110611ead57611ead6140cb565b60200260200101819052508080611ec39061411d565b915050611e12565b60006102ae82612960565b600080611ee384846110f8565b90506000805b8251811015611f49576002838281518110611f0657611f066140cb565b6020026020010151600001516002811115611f2357611f23613c88565b1415611f375781611f33816142a2565b9250505b80611f418161411d565b915050611ee9565b50949350505050565b6040805160a08101825260008082526020820181905291810182905260608101829052608081018290526000611f878461213d565b9050611f93858261293d565b15611ffe57600090815260028086016020908152604092839020835160a081018552815461ffff8116825260ff62010000909104811615159382019390935260018281015495820195909552928101546060840152600301541615156080820152909250905061202e565b50506040805160a08101825260008082526020820181905291810182905260608101829052608081018290529091505b9250929050565b60006102ae82611ecb565b600080808061204f868661296a565b9097909650945050505050565b6040517fffff00000000000000000000000000000000000000000000000000000000000060f084811b8216602084015283901b1660228201526000906024016040516020818303038152906040526102ab906142c4565b60006102ab8383612995565b6000828152602084815260408083206001600160a01b038516845290915290205460ff16611c0b576120fb816001600160a01b031660146129a1565b6121068360206129a1565b604051602001612117929190614317565b60408051601f198184030181529082905262461bcd60e51b825261039591600401614398565b6040517fffff00000000000000000000000000000000000000000000000000000000000060f083901b1660208201526000906022016040516020818303038152906040526102ae906142c4565b60006102ab8383612bca565b60006102ab8383612cbd565b6040805160a08101825260008082526020820181905291810182905260608101829052608081018290526000806121da898888611c10565b9150915081156122315760016040518060a001604052808a600281111561220357612203613c88565b81526020018961ffff1681526020018861ffff16815260200187815260200183815250935093505050612263565b50506040805160a081018252600080825260208201819052918101829052606081018290526080810182905290925090505b9550959350505050565b6000806122828360200151846040015161205c565b608084015160208086015161ffff16600090815260028801909152604090209192506122b091908390612cdf565b1561141657606083015160208085015161ffff166000908152600187019091526040812080549091906122e490849061428a565b9091555050600081815260038501602052604090208351815485929190829060ff1916600183600281111561231b5761231b613c88565b0217905550602082810151825460408086015164ffffffff001990921661010061ffff9485160264ffff00000019161763010000009284169290920291909117845560608501516001808601919091556080909501516002909401939093558682015181166000908152918890529181208054909261239c918591166140f7565b92506101000a81548161ffff021916908361ffff16021790555060019150506102ae565b600080806123ce6004611d88565b905060005b81518161ffff1610156124865742828261ffff16815181106123f7576123f76140cb565b602002602001015160600151101561240e57612474565b6000612464838361ffff1681518110612429576124296140cb565b602090810291909101810151516001600160a01b038916600090815260038352604080822061ffff9093168252600190920190925290205490565b905083811115612472578093505b505b8061247e816142a2565b9150506123d3565b50909392505050565b600061249b83836124a7565b83546102ab919061420f565b60006124c58360010154600f81810b600160801b909204900b131590565b156124d2575060006102ae565b60005b6001840154600f81810b600160801b909204900b038110156125645760006125006001860183612cec565b905083811161254b5760038501600061251c6001880185612cec565b81526020019081526020016000205483612536919061428a565b9250838114156125465750612564565b612551565b50612564565b508061255c8161411d565b9150506124d5565b5092915050565b6040805180820190915260008082526020820152600061258d83600101612d8c565b80835260009081526003909301602090815260409093205492820192909252919050565b808214156125be57611937565b80821061260d5760405162461bcd60e51b815260206004820152601b60248201527f4f7264657265645374616b654c69623a2057726f6e6752616e676500000000006044820152606401610395565b6001840154600f81810b600160801b909204900b1361266e5760405162461bcd60e51b815260206004820152601660248201527f4f7264657265645374616b654c69623a20456d707479000000000000000000006044820152606401610395565b61193784848484612df7565b611c0b838383612eac565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052611937908590612f73565b60006102ab8383613058565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101829052600061274f858561205c565b61ffff86166000908152600288016020526040902090915061277190826130a7565b15611375576000818152600387016020526040808220815160a081019092528054829060ff1660028111156127a8576127a8613c88565b60028111156127b9576127b9613c88565b8152815461ffff610100820481166020808501919091526301000000909204811660408085019190915260018086015460608087019190915260029096015460809095019490945293850151908b166000908152928c019091529181208054939450919261282890849061420f565b909155505061ffff8087166000908152602089905260408120805460019391929161285591859116614248565b825461ffff9182166101009390930a9283029190920219909116179055506000918252600387016020526040822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000016815560018181018490556002909101929092559092509050610302565b60006128e385606001518660800151866130b39092919063ffffffff16565b9050806128f05750611937565b6000838210612900575082612903565b50805b6129258187608001516301e133808661291c919061420f565b88929190613114565b505050505050565b60006102ab6301e133808361420f565b600081815260018301602052604081205415156102ab565b60606102ae8261312c565b60006102ae825490565b600080806129788585613188565b600081815260029690960160205260409095205494959350505050565b60006102ab838361293d565b606060006129b083600261426b565b6129bb90600261428a565b67ffffffffffffffff8111156129d3576129d36141f9565b6040519080825280601f01601f1916602001820160405280156129fd576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612a3457612a346140cb565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612a9757612a976140cb565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612ad384600261426b565b612ade90600161428a565b90505b6001811115612b7b577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612b1f57612b1f6140cb565b1a60f81b828281518110612b3557612b356140cb565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93612b74816143cb565b9050612ae1565b5083156102ab5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610395565b60008181526001830160205260408120548015612cb3576000612bee60018361420f565b8554909150600090612c029060019061420f565b9050818114612c67576000866000018281548110612c2257612c226140cb565b9060005260206000200154905080876000018481548110612c4557612c456140cb565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612c7857612c786143e2565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506102ae565b60009150506102ae565b6001600160a01b038116600090815260018301602052604081205415156102ab565b6000611591848484613194565b600080612d0f612cfb846131b1565b8554612d0a9190600f0b6143f8565b61324d565b8454909150600160801b9004600f90810b9082900b12612d715760405162461bcd60e51b815260206004820152600b60248201527f4f75744f66426f756e64730000000000000000000000000000000000000000006044820152606401610395565b600f0b60009081526001939093016020525050604090205490565b6000612da78254600f81810b600160801b909204900b131590565b15612ddc5760405162461bcd60e51b8152602060048201526005602482015264456d70747960d81b6044820152606401610395565b508054600f0b60009081526001909101602052604090205490565b6000612e0285613301565b8051909150831415612e91578381602001511415612e2a57612e25858584613360565b6105f3565b8381602001511115612e5c57612e41858584613360565b612e2585858360200151612e55919061420f565b8351613360565b612e6b85826020015184613360565b612e2585826020015186612e7f919061420f565b612e8b88600101612d8c565b85612df7565b612e9d85858585612df7565b6105f385826020015183600001515b6001830154600f81810b600160801b909204900b13612ed057611c0b8383836134d8565b6000612ede846001016135da565b905081811015612ef857612ef38484846134d8565b611937565b81811415612f0b57612ef3848484613654565b6000612f1985600101613712565b9050612f26858585612eac565b6105f360018601828154600160801b90819004600f0b6000818152600180860160205260409091209390935583546fffffffffffffffffffffffffffffffff908116939091011602179055565b6000612fc8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166137b29092919063ffffffff16565b805190915015611c0b5780806020019051810190612fe6919061446c565b611c0b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610395565b600081815260018301602052604081205461309f575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556102ae565b5060006102ae565b60006102ab83836137c1565b6000805b6130c0856137de565b811015610f915760006130d386836137fb565b9050848160000151101580156130ea575080518410155b156131015760208101516130fe908461428a565b92505b508061310c8161411d565b9150506130b7565b81811061312057611937565b61193784848484613843565b60608160000180548060200260200160405190810160405280929190818152602001828054801561317c57602002820191906000526020600020905b815481526020019060010190808311613168575b50505050509050919050565b60006102ab8383613882565b60008281526002840160205260408120829055611591848461270d565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8211156132495760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e743235360000000000000000000000000000000000000000000000006064820152608401610395565b5090565b60007fffffffffffffffffffffffffffffffff80000000000000000000000000000000821280159061328f57506f7fffffffffffffffffffffffffffffff8213155b6132495760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f32382062697473000000000000000000000000000000000000000000000000006064820152608401610395565b60408051808201909152600080825260208201526000613323836001016138ac565b600081815260038501602052604081208054908290558554929350918291869161334e90849061420f565b90915550509082526020820152919050565b6001830154600f81810b600160801b909204900b136133d957611c0b838383806135ab60018501828154600f90810b600019019081900b600090815260018401602052604090209190915581546fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff909116179055565b60006133e784600101612d8c565b90508181111561345157612ef3848484806135ab60018501828154600f90810b600019019081900b600090815260018401602052604090209190915581546fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff909116179055565b8181141561346457612ef3848484613654565b6000613472856001016138ac565b905061347f858585613360565b6105f360018601828154600f90810b600019019081900b600090815260018401602052604090209190915581546fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff909116179055565b600081815260038401602052604090205481901561355e5760405162461bcd60e51b815260206004820152602c60248201527f4f7264657265645374616b654c69623a2043414e204e4f54204f56455252494460448201527f452054494d455354414d505300000000000000000000000000000000000000006064820152608401610395565b6135ab60018501828154600160801b90819004600f0b6000818152600180860160205260409091209390935583546fffffffffffffffffffffffffffffffff908116939091011602179055565b600081815260038501602052604081208490558454849186916135cf90849061428a565b909155505050505050565b60006135f58254600f81810b600160801b909204900b131590565b1561362a5760405162461bcd60e51b8152602060048201526005602482015264456d70747960d81b6044820152606401610395565b508054600160801b9004600f90810b60001901900b60009081526001909101602052604090205490565b600081815260038401602052604090205481906136d95760405162461bcd60e51b815260206004820152602760248201527f4f7264657265645374616b654c69623a20547279696e6720746f20757064617460448201527f6520656d707479000000000000000000000000000000000000000000000000006064820152608401610395565b6000818152600385016020526040812080548592906136f990849061428a565b90915550508354839085906000906135cf90849061428a565b600061372d8254600f81810b600160801b909204900b131590565b156137625760405162461bcd60e51b8152602060048201526005602482015264456d70747960d81b6044820152606401610395565b508054600160801b90819004600f90810b600019019081900b60009081526001840160205260408120805491905583546fffffffffffffffffffffffffffffffff90811692169092021790915590565b6060611591848460008561394b565b600081815260028301602052604081208190556102ab838361218a565b60006102ae8260010154600f81810b600160801b909204900b0390565b6040805180820190915260008082526020820152600061381e6001850184612cec565b8083526000908152600390940160209081526040909420549382019390935292915050565b600061384e85613a88565b90508281600001511161386b57612e258585836000015185613aaa565b61387485613b61565b9050612e9d85858585613843565b6000826000018281548110613899576138996140cb565b9060005260206000200154905092915050565b60006138c78254600f81810b600160801b909204900b131590565b156138fc5760405162461bcd60e51b8152602060048201526005602482015264456d70747960d81b6044820152606401610395565b508054600f0b6000818152600180840160205260408220805492905583546fffffffffffffffffffffffffffffffff191692016fffffffffffffffffffffffffffffffff169190911790915590565b6060824710156139c35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610395565b6001600160a01b0385163b613a1a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610395565b600080866001600160a01b03168587604051613a369190614489565b60006040518083038185875af1925050503d8060008114613a73576040519150601f19603f3d011682016040523d82523d6000602084013e613a78565b606091505b50915091506117bd828286613bd0565b6040805180820190915260008082526020820152600061258d836001016135da565b82613ab457611937565b6000613abf85613b61565b8051909150831415613b55578381602001511415613ae257612e25858584612eac565b8381602001511115613b1457613af9858584612eac565b612e2585858360200151613b0d919061420f565b8351612eac565b8060200151841115612e2557613b2f85826020015184612eac565b612e2585826020015186613b43919061420f565b613b4f886001016135da565b85613aaa565b612e9d85858585613aaa565b60408051808201909152600080825260208201526000613b8383600101613712565b80835260008181526003850160209081526040822054908501819052855492935091859190613bb390849061420f565b909155505060009081526003909201602052604082209190915590565b60608315613bdf575081610b2c565b825115613bef5782518084602001fd5b8160405162461bcd60e51b81526004016103959190614398565b60405180604001604052806002906020820280368337509192915050565b80356001600160a01b0381168114613c3e57600080fd5b919050565b803561ffff81168114613c3e57600080fd5b60008060408385031215613c6857600080fd5b613c7183613c27565b9150613c7f60208401613c43565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b805160038110613cbe57634e487b7160e01b600052602160045260246000fd5b80835250602081015161ffff8082166020850152806040840151166040850152505060608101516060830152608081015160808301525050565b6020808252825182820181905260009190848201906040850190845b81811015613d3a57613d27838551613c9e565b9284019260a09290920191600101613d14565b50909695505050505050565b600080600060608486031215613d5b57600080fd5b613d6484613c27565b9250613d7260208501613c43565b9150613d8060408501613c43565b90509250925092565b821515815260c08101610b2c6020830184613c9e565b600060208284031215613db157600080fd5b6102ab82613c43565b60008083601f840112613dcc57600080fd5b50813567ffffffffffffffff811115613de457600080fd5b6020830191508360208260061b850101111561202e57600080fd5b600080600060408486031215613e1457600080fd5b613e1d84613c27565b9250602084013567ffffffffffffffff811115613e3957600080fd5b613e4586828701613dba565b9497909650939450505050565b600080600060408486031215613e6757600080fd5b833567ffffffffffffffff811115613e7e57600080fd5b613e8a86828701613dba565b909790965060209590950135949350505050565b8015158114613eac57600080fd5b50565b600080600080600060a08688031215613ec757600080fd5b613ed086613c43565b94506020860135613ee081613e9e565b935060408601359250606086013591506080860135613efe81613e9e565b809150509295509295909350565b60008060208385031215613f1f57600080fd5b823567ffffffffffffffff811115613f3657600080fd5b613f4285828601613dba565b90969095509350505050565b600060208284031215613f6057600080fd5b6102ab82613c27565b60208082528251828201819052600091906040908185019086840185805b83811015613fc857825185835b6002811015613fb557825161ffff1682529189019190890190600101613f94565b5050509385019391860191600101613f87565b509298975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015613d3a5761403883855161ffff815116825260208101511515602083015260408101516040830152606081015160608301526080810151151560808301525050565b9284019260a09290920191600101613ff2565b821515815260c08101610b2c602083018461ffff815116825260208101511515602083015260408101516040830152606081015160608301526080810151151560808301525050565b600080604083850312156140a757600080fd5b6140b083613c43565b915060208301356140c081613e9e565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600061ffff808316818516808303821115614114576141146140e1565b01949350505050565b6000600019821415614131576141316140e1565b5060010190565b818352600060208085019450826000805b86811015614193578783835b600281101561417d5761ffff61416a83613c43565b1683529186019190860190600101614155565b5050506040978801979290920191600101614149565b50959695505050505050565b60006001600160a01b038087168352808616602084015250606060408301526141cc606083018486614138565b9695505050505050565b6001600160a01b0384168152604060208201526000611a9a604083018486614138565b634e487b7160e01b600052604160045260246000fd5b600082821015614221576142216140e1565b500390565b60008261424357634e487b7160e01b600052601260045260246000fd5b500490565b600061ffff83811690831681811015614263576142636140e1565b039392505050565b6000816000190483118215151615614285576142856140e1565b500290565b6000821982111561429d5761429d6140e1565b500190565b600061ffff808316818114156142ba576142ba6140e1565b6001019392505050565b805160208083015191908110156142e5576000198160200360031b1b821691505b50919050565b60005b838110156143065781810151838201526020016142ee565b838111156119375750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161434f8160178501602088016142eb565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161438c8160288401602088016142eb565b01602801949350505050565b60208152600082518060208401526143b78160408501602087016142eb565b601f01601f19169190910160400192915050565b6000816143da576143da6140e1565b506000190190565b634e487b7160e01b600052603160045260246000fd5b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03841381151615614432576144326140e1565b827f8000000000000000000000000000000000000000000000000000000000000000038412811615614466576144666140e1565b50500190565b60006020828403121561447e57600080fd5b81516102ab81613e9e565b6000825161449b8184602087016142eb565b919091019291505056fea2646970667358221220f19c3cf7a84559ff33662691f5bc1286848b371fa2072572417e60f9b0fd8df064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15814,
        "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)15782_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)4139": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(BookingStatus)16081": {
        "encoding": "inplace",
        "label": "enum BookingMapLib.BookingStatus",
        "numberOfBytes": "1"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Store)17107_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct OrderedStakeLib.Store)",
        "numberOfBytes": "32",
        "value": "t_struct(Store)17107_storage"
      },
      "t_mapping(t_address,t_struct(UserStore)16116_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BookingMapLib.UserStore)",
        "numberOfBytes": "32",
        "value": "t_struct(UserStore)16116_storage"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)9466_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)9466_storage"
      },
      "t_mapping(t_bytes32,t_struct(Booking)16093_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct BookingMapLib.Booking)",
        "numberOfBytes": "32",
        "value": "t_struct(Booking)16093_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)15391_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlLib.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)15391_storage"
      },
      "t_mapping(t_bytes32,t_struct(Year)16127_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct BookingMapLib.Year)",
        "numberOfBytes": "32",
        "value": "t_struct(Year)16127_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_int128,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_int128",
        "label": "mapping(int128 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint16,t_struct(Bytes32ToUintMap)8971_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct EnumerableMap.Bytes32ToUintMap)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32ToUintMap)8971_storage"
      },
      "t_mapping(t_uint16,t_uint16)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)9466_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 9465,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)9165_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AppStorage)15782_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 15757,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 15759,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "paused",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 15762,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "communityToken",
            "offset": 2,
            "slot": "0",
            "type": "t_contract(IERC20)4139"
          },
          {
            "astId": 15765,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "_roleStore",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(RoleStore)15402_storage"
          },
          {
            "astId": 15770,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "_accommodationBookings",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(UserStore)16116_storage)"
          },
          {
            "astId": 15773,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "_accommodationYears",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(YearsStore)16136_storage"
          },
          {
            "astId": 15778,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "staking",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_struct(Store)17107_storage)"
          },
          {
            "astId": 15781,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "members",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(Store)16981_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Booking)16093_storage": {
        "encoding": "inplace",
        "label": "struct BookingMapLib.Booking",
        "members": [
          {
            "astId": 16084,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(BookingStatus)16081"
          },
          {
            "astId": 16086,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "year",
            "offset": 1,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 16088,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "dayOfYear",
            "offset": 3,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 16090,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16092,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Bytes32Deque)13358_storage": {
        "encoding": "inplace",
        "label": "struct CustomDoubleEndedQueue.Bytes32Deque",
        "members": [
          {
            "astId": 13351,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "_begin",
            "offset": 0,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 13353,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "_end",
            "offset": 16,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 13357,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "_data",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_int128,t_bytes32)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32Set)9359_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 9358,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)9165_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToBytes32Map)8048_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToBytes32Map",
        "members": [
          {
            "astId": 8043,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)9359_storage"
          },
          {
            "astId": 8047,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Bytes32ToUintMap)8971_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToUintMap",
        "members": [
          {
            "astId": 8970,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32ToBytes32Map)8048_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)15391_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlLib.RoleData",
        "members": [
          {
            "astId": 15388,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 15390,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleStore)15402_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlLib.RoleStore",
        "members": [
          {
            "astId": 15396,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "_roles",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)15391_storage)"
          },
          {
            "astId": 15401,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "_roleMembers",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)9466_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)9165_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 9160,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 9164,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Store)16981_storage": {
        "encoding": "inplace",
        "label": "struct MembershipLib.Store",
        "members": [
          {
            "astId": 16980,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)9466_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Store)17107_storage": {
        "encoding": "inplace",
        "label": "struct OrderedStakeLib.Store",
        "members": [
          {
            "astId": 17099,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "_balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 17102,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "_queue",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Bytes32Deque)13358_storage"
          },
          {
            "astId": 17106,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "_amounts",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UserStore)16116_storage": {
        "encoding": "inplace",
        "label": "struct BookingMapLib.UserStore",
        "members": [
          {
            "astId": 16097,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "nights",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint16,t_uint16)"
          },
          {
            "astId": 16101,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "balance",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint16,t_uint256)"
          },
          {
            "astId": 16106,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "dates",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint16,t_struct(Bytes32ToUintMap)8971_storage)"
          },
          {
            "astId": 16111,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "bookings",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_struct(Booking)16093_storage)"
          },
          {
            "astId": 16115,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "checkedInNights",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint16,t_uint16)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Year)16127_storage": {
        "encoding": "inplace",
        "label": "struct BookingMapLib.Year",
        "members": [
          {
            "astId": 16118,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "number",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 16120,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "leapYear",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 16122,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "start",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16124,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "end",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 16126,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "enabled",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(YearsStore)16136_storage": {
        "encoding": "inplace",
        "label": "struct BookingMapLib.YearsStore",
        "members": [
          {
            "astId": 16130,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)9359_storage"
          },
          {
            "astId": 16135,
            "contract": "src/diamond/facets/BookingFacet.sol:BookingFacet",
            "label": "elems",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_struct(Year)16127_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}