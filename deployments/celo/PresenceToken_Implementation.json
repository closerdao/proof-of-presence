{
  "address": "0x06FFe751B58C6A421b32CA47edDBac82686598A7",
  "abi": [
    {
      "inputs": [],
      "name": "ApproveNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonDecayedAmountToBurn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decayedAmountToBurn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonDecayedUserBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decayedUserBalance",
          "type": "uint256"
        }
      ],
      "name": "BurnAmountExceedsDecayedBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BurnDataEmpty",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "invalidDaoAddress",
          "type": "address"
        }
      ],
      "name": "InvalidDaoAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAllowedValue",
          "type": "uint256"
        }
      ],
      "name": "InvalidDecayRatePerDay",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintDataEmpty",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintWithZeroAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "allowedRoles",
          "type": "string[]"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "BurnAllUserPresence",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burnedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decayedBurnedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burnedForDaysAgo",
          "type": "uint256"
        }
      ],
      "name": "BurnWithDecay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "DaoAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDecayRatePerDay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDecayRatePerDay",
          "type": "uint256"
        }
      ],
      "name": "DecayRatePerDayChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decayedMintedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintedForDaysAgo",
          "type": "uint256"
        }
      ],
      "name": "MintWithDecay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DECAY_RATE_PER_DAY_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_ALLOWED_ROUNDING_ERROR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_DECAY_RATE_PER_DAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION_SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "daysAgo",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct PresenceToken.BurnData[]",
          "name": "burnDataArray",
          "type": "tuple[]"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "finalBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "burnAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "daysAgo",
          "type": "uint256"
        }
      ],
      "name": "calculateDecayForDays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoAddress",
      "outputs": [
        {
          "internalType": "contract TDFDiamondPartial",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decayRatePerDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentDecayRatePerYear",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "decayRatePerYear",
          "type": "uint256"
        }
      ],
      "name": "getDecayRatePerDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "decayRatePerDay_",
          "type": "uint256"
        }
      ],
      "name": "getDecayRatePerYear",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "decayRatePerYear",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "holders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "daoAddress_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "decayRatePerDay_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isHolder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastDecayTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastDecayedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "daysAgo",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "daysAgo",
              "type": "uint256"
            }
          ],
          "internalType": "struct PresenceToken.MintData[]",
          "name": "mintDataArray",
          "type": "tuple[]"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "nonDecayedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonDecayedTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newDaoAddress",
          "type": "address"
        }
      ],
      "name": "setDaoAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newDecayRatePerDay",
          "type": "uint256"
        }
      ],
      "name": "setDecayRatePerDay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "decayedTotalSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa7a53888a1bca00f654051f1b0164889b7270b5a8e9f16f4991bc52bbb728363",
  "receipt": {
    "to": null,
    "from": "0x4410c9De0B7523b48B6EF4190eEb439aACC5F4D3",
    "contractAddress": "0x06FFe751B58C6A421b32CA47edDBac82686598A7",
    "transactionIndex": 17,
    "gasUsed": "2210023",
    "logsBloom": "0x
    "blockHash": "0xfb2738c2d8e55df7e936aea6b1049e1a3b0770f6c8fbd32c997b09a476b1f90b",
    "transactionHash": "0xa7a53888a1bca00f654051f1b0164889b7270b5a8e9f16f4991bc52bbb728363",
    "logs": [],
    "blockNumber": 28839665,
    "cumulativeGasUsed": "3583861",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4de6f1123007f6317b774501bb0f6368",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ApproveNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonDecayedAmountToBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decayedAmountToBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonDecayedUserBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decayedUserBalance\",\"type\":\"uint256\"}],\"name\":\"BurnAmountExceedsDecayedBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnDataEmpty\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"invalidDaoAddress\",\"type\":\"address\"}],\"name\":\"InvalidDaoAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAllowedValue\",\"type\":\"uint256\"}],\"name\":\"InvalidDecayRatePerDay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintDataEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintWithZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"allowedRoles\",\"type\":\"string[]\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BurnAllUserPresence\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decayedBurnedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedForDaysAgo\",\"type\":\"uint256\"}],\"name\":\"BurnWithDecay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"DaoAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDecayRatePerDay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDecayRatePerDay\",\"type\":\"uint256\"}],\"name\":\"DecayRatePerDayChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decayedMintedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedForDaysAgo\",\"type\":\"uint256\"}],\"name\":\"MintWithDecay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECAY_RATE_PER_DAY_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ALLOWED_ROUNDING_ERROR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DECAY_RATE_PER_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"daysAgo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct PresenceToken.BurnData[]\",\"name\":\"burnDataArray\",\"type\":\"tuple[]\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"burnAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daysAgo\",\"type\":\"uint256\"}],\"name\":\"calculateDecayForDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoAddress\",\"outputs\":[{\"internalType\":\"contract TDFDiamondPartial\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decayRatePerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentDecayRatePerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"decayRatePerYear\",\"type\":\"uint256\"}],\"name\":\"getDecayRatePerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"decayRatePerDay_\",\"type\":\"uint256\"}],\"name\":\"getDecayRatePerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"decayRatePerYear\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"daoAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decayRatePerDay_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDecayTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDecayedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daysAgo\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daysAgo\",\"type\":\"uint256\"}],\"internalType\":\"struct PresenceToken.MintData[]\",\"name\":\"mintDataArray\",\"type\":\"tuple[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"nonDecayedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonDecayedTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDaoAddress\",\"type\":\"address\"}],\"name\":\"setDaoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDecayRatePerDay\",\"type\":\"uint256\"}],\"name\":\"setDecayRatePerDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"decayedTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The decay functionality is implemented with following logic:          Prerequisites:              - since the PRESENCE token is non-transferrable, the account's balance can only change when:                  - minting                  - burning          The fact that the PRESENCE token is non-transferrable means that we do not need to handle          the balance changes during transfers, but only during the `mint`, `burn` and `balanceOf` functions.          There are 2 additional mappings introduced:              - lastDecayedBalance[account]: this one stores the last calculated decayed balance              - lastDecayedTimestamp[account]: this one stores the timestamp when we last calculated a new decayed balance          Both these mappings are updated only inside the `mint` and `burn` function.          We also override the `balanceOf` function, where we calculate the current decayed balance, using          the 2 mappings `lastDecayedBalance` and `lastDecayedTimestamp`. Additional decay calculation on top of these          2 mappings is necessary inside the `balanceOf` function because the values in these mappings are not regularly updated          so they can contain even e.g. 1 year+ outdated data (if the user did not mint or burn any token during that time),          but inside the `balanceOf` function we want to return the current decayed balance at the time of calling.          Inside `mint` and `burn` we update these 2 mappings to make sure that the decay for each token is calculated correctly.          Example:              - assume ~10% decay per day              1) Mint 1 PRESENCE              2) Wait 2 days              3) Now the balance is ~0.81 PRESENCE              4) Mint 1 PRESENCE, so the total balance is ~1.81 PRESENCE              5) Wait 1 day              6) The final balance is 1.629 PRESENCE          If we would not recalculate the decayed balance on the mint of additional PRESENCE token , at the step 6 we would not know          when each token has been minted. So that's why there are these 2 additional mappings introduced. By recalculating the decayed balance on          every balance change, we do not need to store full history of when each token has been minted, as it's sufficient on balance change to          just recalculate the previous decayed balance and then add the new minted tokens to that.          With burning the situation is a little bit more tricky, as there is a difference if I would like to burn a PRESENCE token          minted 10 days ago or 2 days ago, as the one minted 10 days ago decayed already more than the one 2 days ago. Because of that          it's necessary to pass to the `burn` function also how many days ago the token was minted. Here we assume that the booking platform          will know for which dates it actually wants to burn the PRESENCE tokens, as the burning will most likely happen only when the person          did not stay at the property, despite having the booking.\",\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"custom:see\":\"PresenceToken.calculateDecayedBalance for more info about the calculation\",\"returns\":{\"_0\":\"Current decayed balance of the user.\"}},\"burn(address,(uint256,uint256)[])\":{\"params\":{\"account\":\"to burn the PRESENCE tokens for\",\"burnDataArray\":\"array of struct{amount,daysAgo}. It's necessary to pass the `daysAgo` in order to also          correctly calculate and update the decayed balance (=> PRESENCE token minted 10 days ago is already          more decayed than PRESENCE token minted 2 days ago, so for us to correctly calculate the decayed          balance to burn, we need to know when the PRESENCE token was minted).\"},\"returns\":{\"finalBalance\":\"Account's decayed balance after burning. Useful for e.g. preview of the burn operation to make sure          that the passed burnDataArray makes sense and leads to the desireable result.\"}},\"burnAll(address)\":{\"params\":{\"account\":\"to burn all the PRESENCE tokens for\"}},\"calculateDecayForDays(uint256,uint256)\":{\"params\":{\"amount\":\"The initial amount (with 18 decimals)\",\"daysAgo\":\"Number of days to calculate decay for, when 0 it returns the `amount`\"},\"returns\":{\"_0\":\"The decayed amount (with 18 decimals)\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getCurrentDecayRatePerYear()\":{\"returns\":{\"_0\":\"Decay rate per year for currently used decayRatePerDay in contract. The result is multiplied by 10^DECAY_RATE_PER_DAY_DECIMALS\"}},\"getDecayRatePerDay(uint256)\":{\"params\":{\"decayRatePerYear\":\"should be multiplied by 10^DECAY_RATE_PER_DAY_DECIMALS, see the getDecayRatePerYear function docs          for more info about how to format this parameter\"},\"returns\":{\"_0\":\"Daily decay rate multiplied by 10^DECAY_RATE_PER_DAY_DECIMALS\"}},\"getDecayRatePerYear(uint256)\":{\"params\":{\"decayRatePerDay_\":\"should be multiplied by 10^DECAY_RATE_PER_DAY_DECIMALS          so for example:              a) start with percentage decay per day: 0.028_8617%              b) now we need to convert it to decimal form: 0.028_8617 / 100 == 0.000_288_617              c) now we multiply by the decimals: 0.000_288_617 * 10^DECAY_RATE_PER_DECIMALS == 288_617\"},\"returns\":{\"decayRatePerYear\":\"multiplied by 10^DECAY_RATE_PER_DAY_DECIMALS\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"mint(address,uint256,uint256)\":{\"custom:see\":\"PresenceToken._mint function docs for description of additions to mint functionality\"},\"mintBatch((address,uint256,uint256)[])\":{\"custom:see\":\"PresenceToken._mint function docs for description of additions to mint functionality\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDaoAddress(address)\":{\"params\":{\"newDaoAddress\":\"updated dao address\"}},\"setDecayRatePerDay(uint256)\":{\"params\":{\"newDecayRatePerDay\":\"updated decay rate\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"In order to get the decayed balance of each user at the time of calling this function, we need to iterate          over the `holders` array, which makes this function gas expensive. Ideally do not use this inside          state-mutating functions, only in the external getters. I could not change the modifier from `public` to `external`          since the ERC20Upgradeable from OpenZeppelin declares this function with `public` modifier.\",\"returns\":{\"decayedTotalSupply\":\"decayedTotalSupply\"}},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"stateVariables\":{\"decayRatePerDay\":{\"custom:see\":\"getDecayRatePerDay function for more info and examples about how to calculate value          for this variable, e.g. for 10% decay rate per year\"},\"holders\":{\"details\":\"necessary for iterating over `lastDecayedBalance` mapping when calculating decayed totalSupply\"},\"isHolder\":{\"details\":\"used for speeding up / gas savings when need to check if the account is in `holders` array\"}},\"title\":\"Proof of Presence token with a continous decay functionality. The token is decayed every 24 hours.\",\"version\":1},\"userdoc\":{\"errors\":{\"ApproveNotAllowed()\":[{\"notice\":\"Thrown when trying to call approve. Since PresenceToken is non-transferrable, it does not make sense to enable approvals.\"}],\"InvalidDecayRatePerDay(uint256,uint256)\":[{\"notice\":\"Thrown when trying to set invalid decayRatePerDay.\"}],\"TransferNotAllowed()\":[{\"notice\":\"Thrown when trying to transfer PresenceToken from one address to another. Only minting and burning is allowed.\"}],\"Unauthorized(address,string[])\":[{\"notice\":\"Thrown when a function is called by not allowed address.\"}]},\"kind\":\"user\",\"methods\":{\"MAX_ALLOWED_ROUNDING_ERROR()\":{\"notice\":\"denominated in wei, used for preventing underflows when small rounding error happens (e.g. during burn)\"},\"balanceOf(address)\":{\"notice\":\"Override of the standard balanceOf function that takes into the account gradual decay of user balance\"},\"burn(address,(uint256,uint256)[])\":{\"notice\":\"Burn PRESENCE tokens for a user.This function can be only called by the owner of the contract, which will be the TDF Multisig.\"},\"burnAll(address)\":{\"notice\":\"Burns all tokens for a given account. Useful e.g. in case of blacklisting a person.This function can be only called by the owner of the contract, which will be the TDF Multisig.\"},\"calculateDecayForDays(uint256,uint256)\":{\"notice\":\"Calculates decay over a number of days with high precisionBasic formula: [initialAmount] * (1 - [percentageDecayPerDay] / 100)^[numberOfDays]\"},\"daoAddress()\":{\"notice\":\"used for accessing user roles store in DAO + allow DAO setting a decay rate\"},\"decayRatePerDay()\":{\"notice\":\"Holds decimal decay rate per day, the value is padded by DECAY_RATE_PER_DAY_DECIMALSThis value is set on contract init and after that is possible to overwrite by DAO address\"},\"getDecayRatePerDay(uint256)\":{\"notice\":\"DECAY RATE PER YEAR => DECAY RATE PER DAYConverts a yearly decay rate to a daily decay rateBasic formula: 1 - (1 - [percentageDecayPerYear] / 100)^(1/365)to get the decimal representation, divide the result by `10^DECAY_RATE_PER_DAY_DECIMALS`...to get the percentage representation, divide the result by `10^(DECAY_RATE_PER_DAY_DECIMALS - 2)`\"},\"getDecayRatePerYear(uint256)\":{\"notice\":\"DECAY RATE PER DAY =>. DECAY RATE PER YEARConverts a daily decay rate to a yearly decay rateBasic formula: 1 - (1 - [percentageDecayPerDay] / 100)^365to get the decimal representation, divide the result by `10^DECAY_RATE_PER_DAY_DECIMALS`...to get the percentage representation, divide the result by `10^(DECAY_RATE_PER_DAY_DECIMALS - 2)`\"},\"lastDecayTimestamp(address)\":{\"notice\":\"mapping that holds timestamp of last decay... this value is updated either during `mint` or `burn`\"},\"lastDecayedBalance(address)\":{\"notice\":\"mapping that holds last decayed balances... this value is updated (decayed) either during `mint` or `burn`\"},\"mintBatch((address,uint256,uint256)[])\":{\"notice\":\"Batch mint function, possibly useful for saving gas when want to mint PRESENCE for all people          that stayed in the accomodation during the night.\"},\"setDaoAddress(address)\":{\"notice\":\"This function can be only called by the owner of this contract, which is TDF Multisig\"},\"setDecayRatePerDay(uint256)\":{\"notice\":\"This function can be only called by the daoAddress or the owner of this contract, which is TDF Multisig\"},\"totalSupply()\":{\"notice\":\"Override of the standard totalSupply function that takes into the account gradual decay of user balances\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ERC20/PresenceToken.sol\":\"PresenceToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2087726a8f8256cc02339ff049df57ba59541d649e1f80af3a60bd87b76047f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xf2efdd01f01f127e8b631675a359cd8cabfbcdcd2e8587ecf906181bcd667bc9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x49dc49ecb70251b262769f4cd54fea0e6714d84e30b2737885c76194c285b452\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabed77589961adbaaa36817e0914bcbe4c447311c9451bf3fc9b073c1f092d8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x02686c31ccb9ee77a299fa5f47327af5271f251a707a0e24f321957166ff0434\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/DoubleEndedQueue.sol)\\npragma solidity ^0.8.4;\\n\\nimport \\\"../math/SafeCast.sol\\\";\\n\\n/**\\n * @dev A sequence of items with the ability to efficiently push and pop items (i.e. insert and remove) on both ends of\\n * the sequence (called front and back). Among other access patterns, it can be used to implement efficient LIFO and\\n * FIFO queues. Storage use is optimized, and all operations are O(1) constant time. This includes {clear}, given that\\n * the existing queue contents are left in storage.\\n *\\n * The struct is called `Bytes32Deque`. Other types can be cast to and from `bytes32`. This data structure can only be\\n * used in storage, and not in memory.\\n * ```\\n * DoubleEndedQueue.Bytes32Deque queue;\\n * ```\\n *\\n * _Available since v4.6._\\n */\\nlibrary DoubleEndedQueue {\\n    /**\\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\\n     */\\n    error Empty();\\n\\n    /**\\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\\n     */\\n    error OutOfBounds();\\n\\n    /**\\n     * @dev Indices are signed integers because the queue can grow in any direction. They are 128 bits so begin and end\\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\\n     *\\n     * Struct members have an underscore prefix indicating that they are \\\"private\\\" and should not be read or written to\\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\\n     * lead to unexpected behavior.\\n     *\\n     * Indices are in the range [begin, end) which means the first item is at data[begin] and the last item is at\\n     * data[end - 1].\\n     */\\n    struct Bytes32Deque {\\n        int128 _begin;\\n        int128 _end;\\n        mapping(int128 => bytes32) _data;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the end of the queue.\\n     */\\n    function pushBack(Bytes32Deque storage deque, bytes32 value) internal {\\n        int128 backIndex = deque._end;\\n        deque._data[backIndex] = value;\\n        unchecked {\\n            deque._end = backIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes the item at the end of the queue and returns it.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function popBack(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 backIndex;\\n        unchecked {\\n            backIndex = deque._end - 1;\\n        }\\n        value = deque._data[backIndex];\\n        delete deque._data[backIndex];\\n        deque._end = backIndex;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the beginning of the queue.\\n     */\\n    function pushFront(Bytes32Deque storage deque, bytes32 value) internal {\\n        int128 frontIndex;\\n        unchecked {\\n            frontIndex = deque._begin - 1;\\n        }\\n        deque._data[frontIndex] = value;\\n        deque._begin = frontIndex;\\n    }\\n\\n    /**\\n     * @dev Removes the item at the beginning of the queue and returns it.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function popFront(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 frontIndex = deque._begin;\\n        value = deque._data[frontIndex];\\n        delete deque._data[frontIndex];\\n        unchecked {\\n            deque._begin = frontIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the item at the beginning of the queue.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function front(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 frontIndex = deque._begin;\\n        return deque._data[frontIndex];\\n    }\\n\\n    /**\\n     * @dev Returns the item at the end of the queue.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function back(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 backIndex;\\n        unchecked {\\n            backIndex = deque._end - 1;\\n        }\\n        return deque._data[backIndex];\\n    }\\n\\n    /**\\n     * @dev Return the item at a position in the queue given by `index`, with the first item at 0 and last item at\\n     * `length(deque) - 1`.\\n     *\\n     * Reverts with `OutOfBounds` if the index is out of bounds.\\n     */\\n    function at(Bytes32Deque storage deque, uint256 index) internal view returns (bytes32 value) {\\n        // int256(deque._begin) is a safe upcast\\n        int128 idx = SafeCast.toInt128(int256(deque._begin) + SafeCast.toInt256(index));\\n        if (idx >= deque._end) revert OutOfBounds();\\n        return deque._data[idx];\\n    }\\n\\n    /**\\n     * @dev Resets the queue back to being empty.\\n     *\\n     * NOTE: The current items are left behind in storage. This does not affect the functioning of the queue, but misses\\n     * out on potential gas refunds.\\n     */\\n    function clear(Bytes32Deque storage deque) internal {\\n        deque._begin = 0;\\n        deque._end = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of items in the queue.\\n     */\\n    function length(Bytes32Deque storage deque) internal view returns (uint256) {\\n        // The interface preserves the invariant that begin <= end so we assume this will not overflow.\\n        // We also assume there are at most int256.max items in the queue.\\n        unchecked {\\n            return uint256(int256(deque._end) - int256(deque._begin));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the queue is empty.\\n     */\\n    function empty(Bytes32Deque storage deque) internal view returns (bool) {\\n        return deque._end <= deque._begin;\\n    }\\n}\\n\",\"keccak256\":\"0x4859ffd6dd69382a1462930c00b6e394007da80e78e510f56930271034737bf2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableMap.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n}\\n\",\"keccak256\":\"0x1b8ac5ffdb80c20c9188267455197d9dcfeef46379aeb1b3a6cc622e879895ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"},\"src/ERC20/PresenceToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport \\\"../diamond/libraries/AccessControlLib.sol\\\";\\nimport \\\"../diamond/libraries/AppStorage.sol\\\";\\nimport \\\"../Libraries/FixedPointMathLib.sol\\\";\\n\\n// TODO is there a better way how to e.g. auto generate the interface for all the methods on diamond automatically,\\n//  so it's always up to date and no need to write it manually?\\ninterface TDFDiamondPartial {\\n    // only contains functions from the diamond that we care about in the PresenceToken contract\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n}\\n\\n// TODO extract the decay functionality into more generic ERC20NonTransferrableWithDecay contract and let the PresenceToken inherit from it?\\n\\n/**\\n * @title Proof of Presence token with a continous decay functionality. The token is decayed every 24 hours.\\n * @dev The decay functionality is implemented with following logic:\\n *          Prerequisites:\\n *              - since the PRESENCE token is non-transferrable, the account's balance can only change when:\\n *                  - minting\\n *                  - burning\\n *\\n *          The fact that the PRESENCE token is non-transferrable means that we do not need to handle\\n *          the balance changes during transfers, but only during the `mint`, `burn` and `balanceOf` functions.\\n *\\n *          There are 2 additional mappings introduced:\\n *              - lastDecayedBalance[account]: this one stores the last calculated decayed balance\\n *              - lastDecayedTimestamp[account]: this one stores the timestamp when we last calculated a new decayed balance\\n *          Both these mappings are updated only inside the `mint` and `burn` function.\\n *\\n *          We also override the `balanceOf` function, where we calculate the current decayed balance, using\\n *          the 2 mappings `lastDecayedBalance` and `lastDecayedTimestamp`. Additional decay calculation on top of these\\n *          2 mappings is necessary inside the `balanceOf` function because the values in these mappings are not regularly updated\\n *          so they can contain even e.g. 1 year+ outdated data (if the user did not mint or burn any token during that time),\\n *          but inside the `balanceOf` function we want to return the current decayed balance at the time of calling.\\n *\\n *          Inside `mint` and `burn` we update these 2 mappings to make sure that the decay for each token is calculated correctly.\\n *          Example:\\n *              - assume ~10% decay per day\\n *              1) Mint 1 PRESENCE\\n *              2) Wait 2 days\\n *              3) Now the balance is ~0.81 PRESENCE\\n *              4) Mint 1 PRESENCE, so the total balance is ~1.81 PRESENCE\\n *              5) Wait 1 day\\n *              6) The final balance is 1.629 PRESENCE\\n *          If we would not recalculate the decayed balance on the mint of additional PRESENCE token , at the step 6 we would not know\\n *          when each token has been minted. So that's why there are these 2 additional mappings introduced. By recalculating the decayed balance on\\n *          every balance change, we do not need to store full history of when each token has been minted, as it's sufficient on balance change to\\n *          just recalculate the previous decayed balance and then add the new minted tokens to that.\\n *\\n *          With burning the situation is a little bit more tricky, as there is a difference if I would like to burn a PRESENCE token\\n *          minted 10 days ago or 2 days ago, as the one minted 10 days ago decayed already more than the one 2 days ago. Because of that\\n *          it's necessary to pass to the `burn` function also how many days ago the token was minted. Here we assume that the booking platform\\n *          will know for which dates it actually wants to burn the PRESENCE tokens, as the burning will most likely happen only when the person\\n *          did not stay at the property, despite having the booking.\\n */\\ncontract PresenceToken is ERC20Upgradeable, Ownable2StepUpgradeable {\\n    /*----------------------------------------------------------*|\\n    |*  # VARIABLES & CONSTANTS DEFINITIONS                     *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @notice used for accessing user roles store in DAO + allow DAO setting a decay rate\\n     */\\n    TDFDiamondPartial public daoAddress;\\n\\n    /*----------------------------------------------------------*|\\n    |*  # VARIABLES FOR DECAY FUNCTIONALITY                     *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @notice denominated in wei, used for preventing underflows when small rounding error happens (e.g. during burn)\\n     */\\n    uint256 public constant MAX_ALLOWED_ROUNDING_ERROR = 100_000;\\n\\n    uint256 public constant DECAY_RATE_PER_DAY_DECIMALS = 9;\\n\\n    uint256 public constant MAX_DECAY_RATE_PER_DAY = 4_399_711; // equals to ~80% decay per year\\n\\n    uint256 public constant PRECISION_SCALE = 1e18; // used for decimal arithmetic operation\\n\\n    /**\\n     * @notice Holds decimal decay rate per day, the value is padded by DECAY_RATE_PER_DAY_DECIMALS\\n     * @notice This value is set on contract init and after that is possible to overwrite by DAO address\\n     * @custom:see getDecayRatePerDay function for more info and examples about how to calculate value\\n     *          for this variable, e.g. for 10% decay rate per year\\n     */\\n    uint256 public decayRatePerDay;\\n\\n    /**\\n     * @notice mapping that holds timestamp of last decay... this value is updated either during `mint` or `burn`\\n     */\\n    mapping(address => uint256) public lastDecayTimestamp;\\n    /**\\n     * @notice mapping that holds last decayed balances... this value is updated (decayed) either during `mint` or `burn`\\n     */\\n    mapping(address => uint256) public lastDecayedBalance;\\n    /**\\n     * @dev necessary for iterating over `lastDecayedBalance` mapping when calculating decayed totalSupply\\n     */\\n    address[] public holders;\\n    /**\\n     * @dev used for speeding up / gas savings when need to check if the account is in `holders` array\\n     */\\n    mapping(address => bool) public isHolder;\\n\\n    /*----------------------------------------------------------*|\\n    |*  # EVENTS DEFINITIONS                                    *|\\n    |*----------------------------------------------------------*/\\n\\n    event DaoAddressChanged(address indexed oldAddress, address indexed newAddress);\\n\\n    event DecayRatePerDayChanged(uint256 oldDecayRatePerDay, uint256 newDecayRatePerDay);\\n\\n    event MintWithDecay(address indexed account, uint256 mintedAmount, uint256 decayedMintedAmount, uint256 mintedForDaysAgo);\\n\\n    event BurnWithDecay(address indexed account, uint256 burnedAmount, uint256 decayedBurnedAmount, uint256 burnedForDaysAgo);\\n\\n    event BurnAllUserPresence(address indexed account);\\n\\n    /*----------------------------------------------------------*|\\n    |*  # ERRORS DEFINITIONS                                    *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @notice Thrown when trying to transfer PresenceToken from one address to another. Only minting and burning is allowed.\\n     */\\n    error TransferNotAllowed();\\n\\n    /**\\n     * @notice Thrown when trying to call approve. Since PresenceToken is non-transferrable, it does not make sense to enable approvals.\\n     */\\n    error ApproveNotAllowed();\\n\\n    /**\\n     * @notice Thrown when a function is called by not allowed address.\\n     */\\n    error Unauthorized(address sender, string[] allowedRoles);\\n\\n    /**\\n     * @notice Thrown when trying to set invalid decayRatePerDay.\\n     */\\n    error InvalidDecayRatePerDay(uint256 value, uint256 maxAllowedValue);\\n\\n    error MintDataEmpty();\\n\\n    error MintWithZeroAmount();\\n\\n    error BurnDataEmpty();\\n\\n    error BurnAmountExceedsDecayedBalance(\\n        uint256 nonDecayedAmountToBurn,\\n        uint256 decayedAmountToBurn,\\n        uint256 nonDecayedUserBalance,\\n        uint256 decayedUserBalance\\n    );\\n\\n    error InvalidDaoAddress(address invalidDaoAddress);\\n\\n    /*----------------------------------------------------------*|\\n    |*  # CONSTRUCTOR                                           *|\\n    |*----------------------------------------------------------*/\\n\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address daoAddress_,\\n        uint256 decayRatePerDay_\\n    ) public initializer {\\n        __PresenceToken_init(name_, symbol_, daoAddress_, decayRatePerDay_);\\n    }\\n\\n    function __PresenceToken_init(\\n        string memory name_,\\n        string memory symbol_,\\n        address daoAddress_,\\n        uint256 decayRatePerDay_\\n    ) internal onlyInitializing {\\n        __ERC20_init(name_, symbol_);\\n        __Ownable2Step_init();\\n        __PresenceToken_init_unchained(daoAddress_, decayRatePerDay_);\\n    }\\n\\n    function __PresenceToken_init_unchained(address daoAddress_, uint256 decayRatePerDay_) internal onlyInitializing {\\n        setDaoAddress(daoAddress_);\\n        setDecayRatePerDay(decayRatePerDay_);\\n    }\\n\\n    /*----------------------------------------------------------*|\\n    |*  # SETTERS                                               *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @notice This function can be only called by the owner of this contract, which is TDF Multisig\\n     * @param newDaoAddress updated dao address\\n     */\\n    function setDaoAddress(address newDaoAddress) public onlyOwner {\\n        if (newDaoAddress == address(0) || newDaoAddress.code.length == 0) {\\n            revert InvalidDaoAddress({invalidDaoAddress: newDaoAddress});\\n        }\\n        address oldAddress = address(daoAddress);\\n        daoAddress = TDFDiamondPartial(newDaoAddress);\\n        emit DaoAddressChanged(oldAddress, newDaoAddress);\\n    }\\n\\n    /**\\n     * @notice This function can be only called by the daoAddress or the owner of this contract, which is TDF Multisig\\n     * @param newDecayRatePerDay updated decay rate\\n     */\\n    function setDecayRatePerDay(uint256 newDecayRatePerDay) public onlyOwner {\\n        if (newDecayRatePerDay > MAX_DECAY_RATE_PER_DAY) {\\n            revert InvalidDecayRatePerDay({value: newDecayRatePerDay, maxAllowedValue: MAX_DECAY_RATE_PER_DAY});\\n        }\\n\\n        uint256 oldDecayRatePerDay = decayRatePerDay;\\n        decayRatePerDay = newDecayRatePerDay;\\n        emit DecayRatePerDayChanged(oldDecayRatePerDay, newDecayRatePerDay);\\n    }\\n\\n    /*----------------------------------------------------------*|\\n    |*  # GETTERS                                               *|\\n    |*----------------------------------------------------------*/\\n\\n    function nonDecayedBalanceOf(address account) public view returns (uint256) {\\n        return ERC20Upgradeable.balanceOf(account);\\n    }\\n\\n    function nonDecayedTotalSupply() public view returns (uint256) {\\n        return ERC20Upgradeable.totalSupply();\\n    }\\n\\n    /**\\n     * @notice Override of the standard balanceOf function that takes into the account gradual decay of user balance\\n     * @custom:see PresenceToken.calculateDecayedBalance for more info about the calculation\\n     * @return Current decayed balance of the user.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return calculateDecayedBalance(account);\\n    }\\n\\n    /**\\n     * @notice Override of the standard totalSupply function that takes into the account gradual decay of user balances\\n     * @dev In order to get the decayed balance of each user at the time of calling this function, we need to iterate\\n     *          over the `holders` array, which makes this function gas expensive. Ideally do not use this inside\\n     *          state-mutating functions, only in the external getters. I could not change the modifier from `public` to `external`\\n     *          since the ERC20Upgradeable from OpenZeppelin declares this function with `public` modifier.\\n     * @return decayedTotalSupply\\n     */\\n    function totalSupply() public view override returns (uint256 decayedTotalSupply) {\\n        decayedTotalSupply = 0;\\n        uint256 holdersLength = holders.length;\\n        for (uint256 i = 0; i < holdersLength; i++) {\\n            decayedTotalSupply += balanceOf(holders[i]);\\n        }\\n        return decayedTotalSupply;\\n    }\\n\\n    /*----------------------------------------------------------*|\\n    |*  # DECAY CALCULATIONS                                    *|\\n    |*----------------------------------------------------------*/\\n\\n    // NOTE: For all decay calculations we assume here that the year has 365 days.\\n\\n    /**\\n     * @notice Calculates decay over a number of days with high precision\\n     * @notice Basic formula: [initialAmount] * (1 - [percentageDecayPerDay] / 100)^[numberOfDays]\\n     * @param amount The initial amount (with 18 decimals)\\n     * @param daysAgo Number of days to calculate decay for, when 0 it returns the `amount`\\n     * @return The decayed amount (with 18 decimals)\\n     */\\n    function calculateDecayForDays(uint256 amount, uint256 daysAgo) public view returns (uint256) {\\n        if (daysAgo == 0) return amount;\\n\\n        // Convert decay rate to 18 decimal precision\\n        uint256 decayRateScaled = (decayRatePerDay * PRECISION_SCALE) / (10**DECAY_RATE_PER_DAY_DECIMALS);\\n\\n        // Calculate (1 - decayRate) with 18 decimals precision\\n        uint256 retentionRate = PRECISION_SCALE - decayRateScaled;\\n\\n        // Calculate (1 - decayRate)^daysAgo\\n        uint256 totalRetentionRate = FixedPointMathLib.powWithPrecision(retentionRate, daysAgo);\\n\\n        // Calculate final amount\\n        return FixedPointMathLib.mulDiv(amount, totalRetentionRate, PRECISION_SCALE);\\n    }\\n\\n    /**\\n     * @custom:see PresenceToken.calculateDecayForDays function docs for more information about decay calculation\\n     * @param account to get the decayed balance for\\n     * @return account's decayed balance at the time of calling this function\\n     */\\n    function calculateDecayedBalance(address account) internal view returns (uint256) {\\n        uint256 lastUserDecayTimestamp = lastDecayTimestamp[account];\\n        if (lastUserDecayTimestamp == 0) {\\n            // can only happen when account either did not mint any tokens or all of account tokens were burnt\\n            return 0;\\n        }\\n\\n        uint256 balance = lastDecayedBalance[account];\\n        if (balance == 0) {\\n            return 0;\\n        }\\n\\n        // we only care about full passed days, so the integer division is correct here\\n        uint256 passedDays = (block.timestamp - lastUserDecayTimestamp) / 86_400;\\n        return calculateDecayForDays(balance, passedDays);\\n    }\\n\\n    /**\\n     * DECAY RATE PER DAY =>. DECAY RATE PER YEAR\\n     * @notice Converts a daily decay rate to a yearly decay rate\\n     * @notice Basic formula: 1 - (1 - [percentageDecayPerDay] / 100)^365\\n     * @param decayRatePerDay_ should be multiplied by 10^DECAY_RATE_PER_DAY_DECIMALS\\n     *          so for example:\\n     *              a) start with percentage decay per day: 0.028_8617%\\n     *              b) now we need to convert it to decimal form: 0.028_8617 / 100 == 0.000_288_617\\n     *              c) now we multiply by the decimals: 0.000_288_617 * 10^DECAY_RATE_PER_DECIMALS == 288_617\\n     * @return decayRatePerYear multiplied by 10^DECAY_RATE_PER_DAY_DECIMALS\\n     * @notice to get the decimal representation, divide the result by `10^DECAY_RATE_PER_DAY_DECIMALS`...\\n     * @notice to get the percentage representation, divide the result by `10^(DECAY_RATE_PER_DAY_DECIMALS - 2)`\\n     */\\n    function getDecayRatePerYear(uint256 decayRatePerDay_) public pure returns (uint256 decayRatePerYear) {\\n        // Convert daily decay rate to 18 decimal precision for calculations\\n        uint256 decayRateScaled = (decayRatePerDay_ * PRECISION_SCALE) / (10**DECAY_RATE_PER_DAY_DECIMALS);\\n\\n        // Calculate retention rate (1 - daily_decay_rate)\\n        uint256 dailyRetentionRate = PRECISION_SCALE - decayRateScaled;\\n\\n        // Calculate (1 - daily_decay_rate)^365\\n        uint256 yearlyRetentionRate = FixedPointMathLib.powWithPrecision(dailyRetentionRate, 365);\\n\\n        // Calculate yearly decay rate = 1 - (1 - daily_decay_rate)^365\\n        uint256 yearlyDecayRateScaled = PRECISION_SCALE - yearlyRetentionRate;\\n\\n        // Convert back to 9 decimal precision\\n        return (yearlyDecayRateScaled * (10**DECAY_RATE_PER_DAY_DECIMALS)) / PRECISION_SCALE;\\n    }\\n\\n    /**\\n     * @return Decay rate per year for currently used decayRatePerDay in contract. The result is multiplied by 10^DECAY_RATE_PER_DAY_DECIMALS\\n     */\\n    function getCurrentDecayRatePerYear() public view returns (uint256) {\\n        return getDecayRatePerYear(decayRatePerDay);\\n    }\\n\\n    /**\\n     * DECAY RATE PER YEAR => DECAY RATE PER DAY\\n     * @notice Converts a yearly decay rate to a daily decay rate\\n     * @notice Basic formula: 1 - (1 - [percentageDecayPerYear] / 100)^(1/365)\\n     * @param decayRatePerYear should be multiplied by 10^DECAY_RATE_PER_DAY_DECIMALS, see the getDecayRatePerYear function docs\\n     *          for more info about how to format this parameter\\n     * @return Daily decay rate multiplied by 10^DECAY_RATE_PER_DAY_DECIMALS\\n     * @notice to get the decimal representation, divide the result by `10^DECAY_RATE_PER_DAY_DECIMALS`...\\n     * @notice to get the percentage representation, divide the result by `10^(DECAY_RATE_PER_DAY_DECIMALS - 2)`\\n     */\\n    function getDecayRatePerDay(uint256 decayRatePerYear) external pure returns (uint256) {\\n        // Calculate yearly retention rate = (1 - yearly_decay_rate)\\n        // Both sides scaled to 9 decimals\\n        uint256 yearlyRetentionRateScaled = 10**DECAY_RATE_PER_DAY_DECIMALS - decayRatePerYear;\\n\\n        // Convert to 18 decimals for higher precision in calculations\\n        uint256 yearlyRetentionRate = (yearlyRetentionRateScaled * PRECISION_SCALE) / (10**DECAY_RATE_PER_DAY_DECIMALS);\\n\\n        // Calculate daily retention rate = (1 - yearly_decay_rate)^(1/365)\\n        uint256 dailyRetentionRate = FixedPointMathLib.nthRoot(yearlyRetentionRate, 365);\\n\\n        // Calculate daily decay rate = 1 - daily_retention_rate\\n        uint256 dailyDecayRateScaled = PRECISION_SCALE - dailyRetentionRate;\\n\\n        // Convert back to 9 decimal precision\\n        return (dailyDecayRateScaled * (10**DECAY_RATE_PER_DAY_DECIMALS)) / PRECISION_SCALE;\\n    }\\n\\n    /*----------------------------------------------------------*|\\n    |*  # MINTING                                               *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * Classic ERC20 minting extended with additional logic for the decay calculation.\\n     * Whenever a new token is minted, we recalculate the lastDecayedBalance plus add the\\n     * minted amount to it. We also update lastDecayTimestamp.\\n     * If we recalculate the decayed on every balance change (which can happen only\\n     * during mint or burn, as the token is non-transferrable) and update\\n     * the lastDecayTimestamp, we do not need to hold the mapping when each token was created to be able\\n     * to correctly calculate the decayed balance.\\n     */\\n    function _mint(address account, uint256 amount, uint256 daysAgo) internal {\\n        if (amount == 0) {\\n            revert MintWithZeroAmount();\\n        }\\n\\n        addHolderIfNotExists(account);\\n        uint256 decayedMintedAmount = calculateDecayForDays(amount, daysAgo);\\n        emit MintWithDecay({\\n            account: account,\\n            mintedAmount: amount,\\n            decayedMintedAmount: decayedMintedAmount,\\n            mintedForDaysAgo: daysAgo\\n        });\\n        lastDecayedBalance[account] = calculateDecayedBalance(account) + decayedMintedAmount;\\n        lastDecayTimestamp[account] = block.timestamp;\\n        ERC20Upgradeable._mint(account, amount);\\n    }\\n\\n    /**\\n     * @custom:see PresenceToken._mint function docs for description of additions to mint functionality\\n     */\\n    function mint(address account, uint256 amount, uint256 daysAgo) external {\\n        checkBurnOrMintPermission();\\n        _mint(account, amount, daysAgo);\\n    }\\n\\n    struct MintData {\\n        address account;\\n        uint256 amount;\\n        uint256 daysAgo;\\n    }\\n\\n    /**\\n     * @notice Batch mint function, possibly useful for saving gas when want to mint PRESENCE for all people\\n     *          that stayed in the accomodation during the night.\\n     * @custom:see PresenceToken._mint function docs for description of additions to mint functionality\\n     */\\n    function mintBatch(MintData[] calldata mintDataArray) external {\\n        uint256 mintDataArrayLength = mintDataArray.length;\\n        if (mintDataArrayLength == 0) {\\n            revert MintDataEmpty();\\n        }\\n\\n        checkBurnOrMintPermission();\\n        for (uint256 i = 0; i < mintDataArrayLength;) {\\n            _mint(mintDataArray[i].account, mintDataArray[i].amount, mintDataArray[i].daysAgo);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /*----------------------------------------------------------*|\\n    |*  # BURNING                                               *|\\n    |*----------------------------------------------------------*/\\n\\n\\n    struct BurnData {\\n        uint256 daysAgo;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @notice Burn PRESENCE tokens for a user.\\n     * @notice This function can be only called by the owner of the contract, which will be the TDF Multisig.\\n     * @param account to burn the PRESENCE tokens for\\n     * @param burnDataArray array of struct{amount,daysAgo}. It's necessary to pass the `daysAgo` in order to also\\n     *          correctly calculate and update the decayed balance (=> PRESENCE token minted 10 days ago is already\\n     *          more decayed than PRESENCE token minted 2 days ago, so for us to correctly calculate the decayed\\n     *          balance to burn, we need to know when the PRESENCE token was minted).\\n     * @return finalBalance Account's decayed balance after burning. Useful for e.g. preview of the burn operation to make sure\\n     *          that the passed burnDataArray makes sense and leads to the desireable result.\\n     */\\n    function burn(address account, BurnData[] calldata burnDataArray)\\n        external\\n        returns (uint256 finalBalance)\\n    {\\n        checkBurnOrMintPermission();\\n\\n        uint256 burnDataArrayLength = burnDataArray.length;\\n        if (burnDataArrayLength == 0) {\\n            revert BurnDataEmpty();\\n        }\\n\\n        uint256 nonDecayedAmountToBurn;\\n        uint256 decayedAmountToBurn;\\n\\n        for (uint256 i = 0; i < burnDataArrayLength;) {\\n            nonDecayedAmountToBurn += burnDataArray[i].amount;\\n            uint256 decayedBurnedAmount = calculateDecayForDays(burnDataArray[i].amount, burnDataArray[i].daysAgo);\\n            decayedAmountToBurn += decayedBurnedAmount;\\n            emit BurnWithDecay({\\n                account: account,\\n                burnedAmount: burnDataArray[i].amount,\\n                decayedBurnedAmount: decayedBurnedAmount,\\n                burnedForDaysAgo: burnDataArray[i].daysAgo\\n            });\\n            unchecked { ++i; }\\n        }\\n\\n        // update decayed balances and timestamp before burning\\n        finalBalance = calculateDecayedBalance(account);\\n        lastDecayedBalance[account] = finalBalance;\\n        lastDecayTimestamp[account] = block.timestamp;\\n\\n        if (decayedAmountToBurn > finalBalance) {\\n            // In a certain cases there are some very small rounding arithmetic\\n            // differences in the calculations, so this should prevent the `burn`\\n            // from underflow revert, if the difference is very small (MAX_ALLOWED_ROUNDING_ERROR wei)\\n            uint256 difference = decayedAmountToBurn - finalBalance;\\n            if (difference > MAX_ALLOWED_ROUNDING_ERROR) {\\n                revert BurnAmountExceedsDecayedBalance({\\n                    nonDecayedAmountToBurn: nonDecayedAmountToBurn,\\n                    decayedAmountToBurn: decayedAmountToBurn,\\n                    nonDecayedUserBalance: nonDecayedBalanceOf(account),\\n                    decayedUserBalance: finalBalance\\n                });\\n            }\\n            finalBalance = 0;\\n            lastDecayedBalance[account] = 0;\\n        } else {\\n            unchecked {\\n                finalBalance -= decayedAmountToBurn;\\n                lastDecayedBalance[account] = finalBalance;\\n            }\\n        }\\n\\n        ERC20Upgradeable._burn(account, nonDecayedAmountToBurn);\\n\\n        return finalBalance;\\n    }\\n\\n    /**\\n     * @notice Burns all tokens for a given account. Useful e.g. in case of blacklisting a person.\\n     * @notice This function can be only called by the owner of the contract, which will be the TDF Multisig.\\n     * @param account to burn all the PRESENCE tokens for\\n     */\\n    function burnAll(address account) external onlyOwner {\\n        ERC20Upgradeable._burn(account, nonDecayedBalanceOf(account));\\n        lastDecayedBalance[account] = 0;\\n        lastDecayTimestamp[account] = block.timestamp;\\n        emit BurnAllUserPresence({account: account});\\n    }\\n\\n    /*----------------------------------------------------------*|\\n    |*  # DISABLE TRANSFERS + APPROVALS                         *|\\n    |*----------------------------------------------------------*/\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public pure virtual override returns (bool) {\\n        from;\\n        to;\\n        amount;\\n        revert TransferNotAllowed();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        // allow only minting or burning\\n        if (from != address(0) && to != address(0)) {\\n            revert TransferNotAllowed();\\n        }\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal pure override {\\n        owner;\\n        spender;\\n        amount;\\n        revert ApproveNotAllowed();\\n    }\\n\\n    /*----------------------------------------------------------*|\\n    |*  # HELPER FUNCTIONS                                      *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @custom:throws Unauthorized if called by user without permissioned roles\\n     */\\n    function checkPermission(bytes32[] memory allowedRoles, string[] memory allowedRolesStr, bool allowOwner) internal view {\\n        TDFDiamondPartial daoAddress_ = daoAddress; // read from storage only once\\n\\n        if (allowOwner && owner() == _msgSender()) {\\n            return;\\n        }\\n\\n        uint256 allowedRolesLength = allowedRoles.length;\\n        for (uint256 i = 0; i < allowedRolesLength;) {\\n            if (daoAddress_.hasRole(allowedRoles[i], _msgSender())) {\\n                return;\\n            }\\n            unchecked { ++i; }\\n        }\\n\\n        revert Unauthorized({sender: _msgSender(), allowedRoles: allowedRolesStr});\\n    }\\n\\n    /**\\n     * @notice only accounts with BOOKING_MANAGER_ROLE or BOOKING_PLATFORM_ROLE should be able to mint new tokens\\n     * @custom:throws Unauthorized if called by user without permissioned roles\\n     */\\n    function checkBurnOrMintPermission() internal view {\\n        bytes32[] memory allowedRoles = new bytes32[](2);\\n        allowedRoles[0] = AccessControlLib.BOOKING_PLATFORM_ROLE;\\n        allowedRoles[1] = AccessControlLib.BOOKING_MANAGER_ROLE;\\n\\n        string[] memory allowedRolesStr = new string[](2);\\n        allowedRolesStr[0] = \\\"BOOKING_PLATFORM_ROLE\\\";\\n        allowedRolesStr[1] = \\\"BOOKING_MANAGER_ROLE\\\";\\n        checkPermission(allowedRoles, allowedRolesStr, true);\\n    }\\n\\n    function addHolderIfNotExists(address holder) internal returns (bool wasAdded) {\\n        wasAdded = false;\\n        if (!isHolder[holder]) {\\n            wasAdded = true;\\n            isHolder[holder] = true;\\n            holders.push(holder);\\n        }\\n        return wasAdded;\\n    }\\n}\\n\",\"keccak256\":\"0xede887bb6338a5dda056e0e2110c822254a63be4f3eb40875ea8699aedf4e0bb\",\"license\":\"AGPL-1.0\"},\"src/Libraries/CustomDoubleEndedQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/DoubleEndedQueue.sol)\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n/**\\n * @dev A sequence of items with the ability to efficiently push and pop items (i.e. insert and remove) on both ends of\\n * the sequence (called front and back). Among other access patterns, it can be used to implement efficient LIFO and\\n * FIFO queues. Storage use is optimized, and all operations are O(1) constant time. This includes {clear}, given that\\n * the existing queue contents are left in storage.\\n *\\n * The struct is called `Bytes32Deque`. Other types can be cast to and from `bytes32`. This data structure can only be\\n * used in storage, and not in memory.\\n * ```\\n * DoubleEndedQueue.Bytes32Deque queue;\\n * ```\\n *\\n * _Available since v4.6._\\n */\\nlibrary CustomDoubleEndedQueue {\\n    /**\\n     * @dev Indices are signed integers because the queue can grow in any direction. They are 128 bits so begin and end\\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\\n     *\\n     * Struct members have an underscore prefix indicating that they are \\\"private\\\" and should not be read or written to\\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\\n     * lead to unexpected behavior.\\n     *\\n     * Indices are in the range [begin, end) which means the first item is at data[begin] and the last item is at\\n     * data[end - 1].\\n     */\\n    struct Bytes32Deque {\\n        int128 _begin;\\n        int128 _end;\\n        mapping(int128 => bytes32) _data;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the end of the queue.\\n     */\\n    function pushBack(Bytes32Deque storage deque, bytes32 value) internal {\\n        int128 backIndex = deque._end;\\n        deque._data[backIndex] = value;\\n        unchecked {\\n            deque._end = backIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes the item at the end of the queue and returns it.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function popBack(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        if (empty(deque)) revert(\\\"Empty\\\");\\n        int128 backIndex;\\n        unchecked {\\n            backIndex = deque._end - 1;\\n        }\\n        value = deque._data[backIndex];\\n        delete deque._data[backIndex];\\n        deque._end = backIndex;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the beginning of the queue.\\n     */\\n    function pushFront(Bytes32Deque storage deque, bytes32 value) internal {\\n        int128 frontIndex;\\n        unchecked {\\n            frontIndex = deque._begin - 1;\\n        }\\n        deque._data[frontIndex] = value;\\n        deque._begin = frontIndex;\\n    }\\n\\n    /**\\n     * @dev Removes the item at the beginning of the queue and returns it.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function popFront(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        if (empty(deque)) revert(\\\"Empty\\\");\\n        int128 frontIndex = deque._begin;\\n        value = deque._data[frontIndex];\\n        delete deque._data[frontIndex];\\n        unchecked {\\n            deque._begin = frontIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the item at the beginning of the queue.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function front(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) revert(\\\"Empty\\\");\\n        int128 frontIndex = deque._begin;\\n        return deque._data[frontIndex];\\n    }\\n\\n    /**\\n     * @dev Returns the item at the end of the queue.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function back(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) revert(\\\"Empty\\\");\\n        int128 backIndex;\\n        unchecked {\\n            backIndex = deque._end - 1;\\n        }\\n        return deque._data[backIndex];\\n    }\\n\\n    /**\\n     * @dev Return the item at a position in the queue given by `index`, with the first item at 0 and last item at\\n     * `length(deque) - 1`.\\n     *\\n     * Reverts with `OutOfBounds` if the index is out of bounds.\\n     */\\n    function at(Bytes32Deque storage deque, uint256 index) internal view returns (bytes32 value) {\\n        // int256(deque._begin) is a safe upcast\\n        int128 idx = SafeCast.toInt128(int256(deque._begin) + SafeCast.toInt256(index));\\n        if (idx >= deque._end) revert(\\\"OutOfBounds\\\");\\n        return deque._data[idx];\\n    }\\n\\n    /**\\n     * @dev Resets the queue back to being empty.\\n     *\\n     * NOTE: The current items are left behind in storage. This does not affect the functioning of the queue, but misses\\n     * out on potential gas refunds.\\n     */\\n    function clear(Bytes32Deque storage deque) internal {\\n        deque._begin = 0;\\n        deque._end = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of items in the queue.\\n     */\\n    function length(Bytes32Deque storage deque) internal view returns (uint256) {\\n        // The interface preserves the invariant that begin <= end so we assume this will not overflow.\\n        // We also assume there are at most int256.max items in the queue.\\n        unchecked {\\n            return uint256(int256(deque._end) - int256(deque._begin));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the queue is empty.\\n     */\\n    function empty(Bytes32Deque storage deque) internal view returns (bool) {\\n        return deque._end <= deque._begin;\\n    }\\n}\\n\",\"keccak256\":\"0xf79288055411f0e900e66c27b470b38595259135c4157e2f2c3b81c7930b2f07\",\"license\":\"MIT\"},\"src/Libraries/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\nlibrary FixedPointMathLib {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The operation failed, as the output exceeds the maximum value of uint256.\\n    error ExpOverflow();\\n\\n    /// @dev The operation failed, as the output exceeds the maximum value of uint256.\\n    error FactorialOverflow();\\n\\n    /// @dev The operation failed, due to an overflow.\\n    error RPowOverflow();\\n\\n    /// @dev The mantissa is too big to fit.\\n    error MantissaOverflow();\\n\\n    /// @dev The operation failed, due to an multiplication overflow.\\n    error MulWadFailed();\\n\\n    /// @dev The operation failed, due to an multiplication overflow.\\n    error SMulWadFailed();\\n\\n    /// @dev The operation failed, either due to a multiplication overflow, or a division by a zero.\\n    error DivWadFailed();\\n\\n    /// @dev The operation failed, either due to a multiplication overflow, or a division by a zero.\\n    error SDivWadFailed();\\n\\n    /// @dev The operation failed, either due to a multiplication overflow, or a division by a zero.\\n    error MulDivFailed();\\n\\n    /// @dev The division failed, as the denominator is zero.\\n    error DivFailed();\\n\\n    /// @dev The full precision multiply-divide operation failed, either due\\n    /// to the result being larger than 256 bits, or a division by a zero.\\n    error FullMulDivFailed();\\n\\n    /// @dev The output is undefined, as the input is less-than-or-equal to zero.\\n    error LnWadUndefined();\\n\\n    /// @dev The input outside the acceptable domain.\\n    error OutOfDomain();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The scalar of ETH and most ERC20s.\\n    uint256 internal constant WAD = 1e18;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*              SIMPLIFIED FIXED POINT OPERATIONS             */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `(x * y) / WAD` rounded down.\\n    function mulWad(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to `require(y == 0 || x <= type(uint256).max / y)`.\\n            if gt(x, div(not(0), y)) {\\n                if y {\\n                    mstore(0x00, 0xbac65e5b) // `MulWadFailed()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            z := div(mul(x, y), WAD)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * y) / WAD` rounded down.\\n    function sMulWad(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mul(x, y)\\n            // Equivalent to `require((x == 0 || z / x == y) && !(x == -1 && y == type(int256).min))`.\\n            if iszero(gt(or(iszero(x), eq(sdiv(z, x), y)), lt(not(x), eq(y, shl(255, 1))))) {\\n                mstore(0x00, 0xedcd4dd4) // `SMulWadFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := sdiv(z, WAD)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * y) / WAD` rounded down, but without overflow checks.\\n    function rawMulWad(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := div(mul(x, y), WAD)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * y) / WAD` rounded down, but without overflow checks.\\n    function rawSMulWad(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := sdiv(mul(x, y), WAD)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * y) / WAD` rounded up.\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mul(x, y)\\n            // Equivalent to `require(y == 0 || x <= type(uint256).max / y)`.\\n            if iszero(eq(div(z, y), x)) {\\n                if y {\\n                    mstore(0x00, 0xbac65e5b) // `MulWadFailed()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            z := add(iszero(iszero(mod(z, WAD))), div(z, WAD))\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * y) / WAD` rounded up, but without overflow checks.\\n    function rawMulWadUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := add(iszero(iszero(mod(mul(x, y), WAD))), div(mul(x, y), WAD))\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * WAD) / y` rounded down.\\n    function divWad(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to `require(y != 0 && x <= type(uint256).max / WAD)`.\\n            if iszero(mul(y, lt(x, add(1, div(not(0), WAD))))) {\\n                mstore(0x00, 0x7c5f487d) // `DivWadFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := div(mul(x, WAD), y)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * WAD) / y` rounded down.\\n    function sDivWad(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mul(x, WAD)\\n            // Equivalent to `require(y != 0 && ((x * WAD) / WAD == x))`.\\n            if iszero(mul(y, eq(sdiv(z, WAD), x))) {\\n                mstore(0x00, 0x5c43740d) // `SDivWadFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := sdiv(z, y)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * WAD) / y` rounded down, but without overflow and divide by zero checks.\\n    function rawDivWad(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := div(mul(x, WAD), y)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * WAD) / y` rounded down, but without overflow and divide by zero checks.\\n    function rawSDivWad(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := sdiv(mul(x, WAD), y)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * WAD) / y` rounded up.\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to `require(y != 0 && x <= type(uint256).max / WAD)`.\\n            if iszero(mul(y, lt(x, add(1, div(not(0), WAD))))) {\\n                mstore(0x00, 0x7c5f487d) // `DivWadFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := add(iszero(iszero(mod(mul(x, WAD), y))), div(mul(x, WAD), y))\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * WAD) / y` rounded up, but without overflow and divide by zero checks.\\n    function rawDivWadUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := add(iszero(iszero(mod(mul(x, WAD), y))), div(mul(x, WAD), y))\\n        }\\n    }\\n\\n    /// @dev Equivalent to `x` to the power of `y`.\\n    /// because `x ** y = (e ** ln(x)) ** y = e ** (ln(x) * y)`.\\n    /// Note: This function is an approximation.\\n    function powWad(int256 x, int256 y) internal pure returns (int256) {\\n        // Using `ln(x)` means `x` must be greater than 0.\\n        return expWad((lnWad(x) * y) / int256(WAD));\\n    }\\n\\n    /// @dev Returns `exp(x)`, denominated in `WAD`.\\n    /// Credit to Remco Bloemen under MIT license: https://2\\u03c0.com/22/exp-ln\\n    /// Note: This function is an approximation. Monotonically increasing.\\n    function expWad(int256 x) internal pure returns (int256 r) {\\n        unchecked {\\n            // When the result is less than 0.5 we return zero.\\n            // This happens when `x <= (log(1e-18) * 1e18) ~ -4.15e19`.\\n            if (x <= -41446531673892822313) return r;\\n\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // When the result is greater than `(2**255 - 1) / 1e18` we can not represent it as\\n                // an int. This happens when `x >= floor(log((2**255 - 1) / 1e18) * 1e18) \\u2248 135`.\\n                if iszero(slt(x, 135305999368893231589)) {\\n                    mstore(0x00, 0xa37bfec9) // `ExpOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n\\n            // `x` is now in the range `(-42, 136) * 1e18`. Convert to `(-42, 136) * 2**96`\\n            // for more intermediate precision and a binary basis. This base conversion\\n            // is a multiplication by 1e18 / 2**96 = 5**18 / 2**78.\\n            x = (x << 78) / 5**18;\\n\\n            // Reduce range of x to (-\\u00bd ln 2, \\u00bd ln 2) * 2**96 by factoring out powers\\n            // of two such that exp(x) = exp(x') * 2**k, where k is an integer.\\n            // Solving this gives k = round(x / log(2)) and x' = x - k * log(2).\\n            int256 k = ((x << 96) / 54916777467707473351141471128 + 2**95) >> 96;\\n            x = x - k * 54916777467707473351141471128;\\n\\n            // `k` is in the range `[-61, 195]`.\\n\\n            // Evaluate using a (6, 7)-term rational approximation.\\n            // `p` is made monic, we'll multiply by a scale factor later.\\n            int256 y = x + 1346386616545796478920950773328;\\n            y = ((y * x) >> 96) + 57155421227552351082224309758442;\\n            int256 p = y + x - 94201549194550492254356042504812;\\n            p = ((p * y) >> 96) + 28719021644029726153956944680412240;\\n            p = p * x + (4385272521454847904659076985693276 << 96);\\n\\n            // We leave `p` in `2**192` basis so we don't need to scale it back up for the division.\\n            int256 q = x - 2855989394907223263936484059900;\\n            q = ((q * x) >> 96) + 50020603652535783019961831881945;\\n            q = ((q * x) >> 96) - 533845033583426703283633433725380;\\n            q = ((q * x) >> 96) + 3604857256930695427073651918091429;\\n            q = ((q * x) >> 96) - 14423608567350463180887372962807573;\\n            q = ((q * x) >> 96) + 26449188498355588339934803723976023;\\n\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Div in assembly because solidity adds a zero check despite the unchecked.\\n                // The q polynomial won't have zeros in the domain as all its roots are complex.\\n                // No scaling is necessary because p is already `2**96` too large.\\n                r := sdiv(p, q)\\n            }\\n\\n            // r should be in the range `(0.09, 0.25) * 2**96`.\\n\\n            // We now need to multiply r by:\\n            // - The scale factor `s \\u2248 6.031367120`.\\n            // - The `2**k` factor from the range reduction.\\n            // - The `1e18 / 2**96` factor for base conversion.\\n            // We do this all at once, with an intermediate result in `2**213`\\n            // basis, so the final right shift is always by a positive amount.\\n            r = int256((uint256(r) * 3822833074963236453042738258902158003155416615667) >> uint256(195 - k));\\n        }\\n    }\\n\\n    /// @dev Returns `ln(x)`, denominated in `WAD`.\\n    /// Credit to Remco Bloemen under MIT license: https://2\\u03c0.com/22/exp-ln\\n    /// Note: This function is an approximation. Monotonically increasing.\\n    function lnWad(int256 x) internal pure returns (int256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We want to convert `x` from `10**18` fixed point to `2**96` fixed point.\\n            // We do this by multiplying by `2**96 / 10**18`. But since\\n            // `ln(x * C) = ln(x) + ln(C)`, we can simply do nothing here\\n            // and add `ln(2**96 / 10**18)` at the end.\\n\\n            // Compute `k = log2(x) - 96`, `r = 159 - k = 255 - log2(x) = 255 ^ log2(x)`.\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // We place the check here for more optimal stack operations.\\n            if iszero(sgt(x, 0)) {\\n                mstore(0x00, 0x1615e638) // `LnWadUndefined()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // forgefmt: disable-next-item\\n            r := xor(\\n                r,\\n                byte(\\n                    and(0x1f, shr(shr(r, x), 0x8421084210842108cc6318c6db6d54be)),\\n                    0xf8f9f9faf9fdfafbf9fdfcfdfafbfcfef9fafdfafcfcfbfefafafcfbffffffff\\n                )\\n            )\\n\\n            // Reduce range of x to (1, 2) * 2**96\\n            // ln(2^k * x) = k * ln(2) + ln(x)\\n            x := shr(159, shl(r, x))\\n\\n            // Evaluate using a (8, 8)-term rational approximation.\\n            // `p` is made monic, we will multiply by a scale factor later.\\n            // forgefmt: disable-next-item\\n            let p := sub(\\n                // This heavily nested expression is to avoid stack-too-deep for via-ir.\\n                sar(\\n                    96,\\n                    mul(\\n                        add(\\n                            43456485725739037958740375743393,\\n                            sar(\\n                                96,\\n                                mul(\\n                                    add(\\n                                        24828157081833163892658089445524,\\n                                        sar(96, mul(add(3273285459638523848632254066296, x), x))\\n                                    ),\\n                                    x\\n                                )\\n                            )\\n                        ),\\n                        x\\n                    )\\n                ),\\n                11111509109440967052023855526967\\n            )\\n            p := sub(sar(96, mul(p, x)), 45023709667254063763336534515857)\\n            p := sub(sar(96, mul(p, x)), 14706773417378608786704636184526)\\n            p := sub(mul(p, x), shl(96, 795164235651350426258249787498))\\n            // We leave `p` in `2**192` basis so we don't need to scale it back up for the division.\\n\\n            // `q` is monic by convention.\\n            let q := add(5573035233440673466300451813936, x)\\n            q := add(71694874799317883764090561454958, sar(96, mul(x, q)))\\n            q := add(283447036172924575727196451306956, sar(96, mul(x, q)))\\n            q := add(401686690394027663651624208769553, sar(96, mul(x, q)))\\n            q := add(204048457590392012362485061816622, sar(96, mul(x, q)))\\n            q := add(31853899698501571402653359427138, sar(96, mul(x, q)))\\n            q := add(909429971244387300277376558375, sar(96, mul(x, q)))\\n\\n            // `p / q` is in the range `(0, 0.125) * 2**96`.\\n\\n            // Finalization, we need to:\\n            // - Multiply by the scale factor `s = 5.549\\u2026`.\\n            // - Add `ln(2**96 / 10**18)`.\\n            // - Add `k * ln(2)`.\\n            // - Multiply by `10**18 / 2**96 = 5**18 >> 78`.\\n\\n            // The q polynomial is known not to have zeros in the domain.\\n            // No scaling required because p is already `2**96` too large.\\n            p := sdiv(p, q)\\n            // Multiply by the scaling factor: `s * 5**18 * 2**96`, base is now `5**18 * 2**192`.\\n            p := mul(1677202110996718588342820967067443963516166, p)\\n            // Add `ln(2) * k * 5**18 * 2**192`.\\n            // forgefmt: disable-next-item\\n            p := add(mul(16597577552685614221487285958193947469193820559219878177908093499208371, sub(159, r)), p)\\n            // Add `ln(2**96 / 10**18) * 5**18 * 2**192`.\\n            p := add(600920179829731861736702779321621459595472258049074101567377883020018308, p)\\n            // Base conversion: mul `2**18 / 2**192`.\\n            r := sar(174, p)\\n        }\\n    }\\n\\n    /// @dev Returns `W_0(x)`, denominated in `WAD`.\\n    /// See: https://en.wikipedia.org/wiki/Lambert_W_function\\n    /// a.k.a. Product log function. This is an approximation of the principal branch.\\n    /// Note: This function is an approximation. Monotonically increasing.\\n    function lambertW0Wad(int256 x) internal pure returns (int256 w) {\\n        // forgefmt: disable-next-item\\n        unchecked {\\n            if ((w = x) <= -367879441171442322) revert OutOfDomain(); // `x` less than `-1/e`.\\n            (int256 wad, int256 p) = (int256(WAD), x);\\n            uint256 c; // Whether we need to avoid catastrophic cancellation.\\n            uint256 i = 4; // Number of iterations.\\n            if (w <= 0x1ffffffffffff) {\\n                if (-0x4000000000000 <= w) {\\n                    i = 1; // Inputs near zero only take one step to converge.\\n                } else if (w <= -0x3ffffffffffffff) {\\n                    i = 32; // Inputs near `-1/e` take very long to converge.\\n                }\\n            } else if (uint256(w >> 63) == uint256(0)) {\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    // Inline log2 for more performance, since the range is small.\\n                    let v := shr(49, w)\\n                    let l := shl(3, lt(0xff, v))\\n                    l := add(\\n                        or(\\n                            l,\\n                            byte(\\n                                and(0x1f, shr(shr(l, v), 0x8421084210842108cc6318c6db6d54be)),\\n                                0x0706060506020504060203020504030106050205030304010505030400000000\\n                            )\\n                        ),\\n                        49\\n                    )\\n                    w := sdiv(shl(l, 7), byte(sub(l, 31), 0x0303030303030303040506080c13))\\n                    c := gt(l, 60)\\n                    i := add(2, add(gt(l, 53), c))\\n                }\\n            } else {\\n                int256 ll = lnWad(w = lnWad(w));\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    // `w = ln(x) - ln(ln(x)) + b * ln(ln(x)) / ln(x)`.\\n                    w := add(sdiv(mul(ll, 1023715080943847266), w), sub(w, ll))\\n                    i := add(3, iszero(shr(68, x)))\\n                    c := iszero(shr(143, x))\\n                }\\n                if (c == uint256(0)) {\\n                    do {\\n                        // If `x` is big, use Newton's so that intermediate values won't overflow.\\n                        int256 e = expWad(w);\\n                        /// @solidity memory-safe-assembly\\n                        assembly {\\n                            let t := mul(w, div(e, wad))\\n                            w := sub(w, sdiv(sub(t, x), div(add(e, t), wad)))\\n                        }\\n                        if (p <= w) break;\\n                        p = w;\\n                    } while (--i != uint256(0));\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        w := sub(w, sgt(w, 2))\\n                    }\\n                    return w;\\n                }\\n            }\\n            do {\\n                // Otherwise, use Halley's for faster convergence.\\n                int256 e = expWad(w);\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let t := add(w, wad)\\n                    let s := sub(mul(w, e), mul(x, wad))\\n                    w := sub(w, sdiv(mul(s, wad), sub(mul(e, t), sdiv(mul(add(t, wad), s), add(t, t)))))\\n                }\\n                if (p <= w) break;\\n                p = w;\\n            } while (--i != c);\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                w := sub(w, sgt(w, 2))\\n            }\\n            // For certain ranges of `x`, we'll use the quadratic-rate recursive formula of\\n            // R. Iacono and J.P. Boyd for the last iteration, to avoid catastrophic cancellation.\\n            if (c == uint256(0)) return w;\\n            int256 t = w | 1;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                x := sdiv(mul(x, wad), t)\\n            }\\n            x = (t * (wad + lnWad(x)));\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                w := sdiv(x, add(wad, t))\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  GENERAL NUMBER UTILITIES                  */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Calculates `floor(x * y / d)` with full precision.\\n    /// Throws if result overflows a uint256 or when `d` is zero.\\n    /// Credit to Remco Bloemen under MIT license: https://2\\u03c0.com/21/muldiv\\n    function fullMulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // 512-bit multiply `[p1 p0] = x * y`.\\n            // Compute the product mod `2**256` and mod `2**256 - 1`\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that `product = p1 * 2**256 + p0`.\\n\\n            // Temporarily use `result` as `p0` to save gas.\\n            result := mul(x, y) // Lower 256 bits of `x * y`.\\n            for {\\n\\n            } 1 {\\n\\n            } {\\n                // If overflows.\\n                if iszero(mul(or(iszero(x), eq(div(result, x), y)), d)) {\\n                    let mm := mulmod(x, y, not(0))\\n                    let p1 := sub(mm, add(result, lt(mm, result))) // Upper 256 bits of `x * y`.\\n\\n                    /*------------------- 512 by 256 division --------------------*/\\n\\n                    // Make division exact by subtracting the remainder from `[p1 p0]`.\\n                    let r := mulmod(x, y, d) // Compute remainder using mulmod.\\n                    let t := and(d, sub(0, d)) // The least significant bit of `d`. `t >= 1`.\\n                    // Make sure the result is less than `2**256`. Also prevents `d == 0`.\\n                    // Placing the check here seems to give more optimal stack operations.\\n                    if iszero(gt(d, p1)) {\\n                        mstore(0x00, 0xae47f702) // `FullMulDivFailed()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                    d := div(d, t) // Divide `d` by `t`, which is a power of two.\\n                    // Invert `d mod 2**256`\\n                    // Now that `d` is an odd number, it has an inverse\\n                    // modulo `2**256` such that `d * inv = 1 mod 2**256`.\\n                    // Compute the inverse by starting with a seed that is correct\\n                    // correct for four bits. That is, `d * inv = 1 mod 2**4`.\\n                    let inv := xor(2, mul(3, d))\\n                    // Now use Newton-Raphson iteration to improve the precision.\\n                    // Thanks to Hensel's lifting lemma, this also works in modular\\n                    // arithmetic, doubling the correct bits in each step.\\n                    inv := mul(inv, sub(2, mul(d, inv))) // inverse mod 2**8\\n                    inv := mul(inv, sub(2, mul(d, inv))) // inverse mod 2**16\\n                    inv := mul(inv, sub(2, mul(d, inv))) // inverse mod 2**32\\n                    inv := mul(inv, sub(2, mul(d, inv))) // inverse mod 2**64\\n                    inv := mul(inv, sub(2, mul(d, inv))) // inverse mod 2**128\\n                    result := mul(\\n                        // Divide [p1 p0] by the factors of two.\\n                        // Shift in bits from `p1` into `p0`. For this we need\\n                        // to flip `t` such that it is `2**256 / t`.\\n                        or(mul(sub(p1, gt(r, result)), add(div(sub(0, t), t), 1)), div(sub(result, r), t)),\\n                        mul(sub(2, mul(d, inv)), inv) // inverse mod 2**256\\n                    )\\n                    break\\n                }\\n                result := div(result, d)\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Calculates `floor(x * y / d)` with full precision.\\n    /// Behavior is undefined if `d` is zero or the final result cannot fit in 256 bits.\\n    /// Performs the full 512 bit calculation regardless.\\n    function fullMulDivUnchecked(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mul(x, y)\\n            let mm := mulmod(x, y, not(0))\\n            let p1 := sub(mm, add(result, lt(mm, result)))\\n            let t := and(d, sub(0, d))\\n            let r := mulmod(x, y, d)\\n            d := div(d, t)\\n            let inv := xor(2, mul(3, d))\\n            inv := mul(inv, sub(2, mul(d, inv)))\\n            inv := mul(inv, sub(2, mul(d, inv)))\\n            inv := mul(inv, sub(2, mul(d, inv)))\\n            inv := mul(inv, sub(2, mul(d, inv)))\\n            inv := mul(inv, sub(2, mul(d, inv)))\\n            result := mul(\\n                or(mul(sub(p1, gt(r, result)), add(div(sub(0, t), t), 1)), div(sub(result, r), t)),\\n                mul(sub(2, mul(d, inv)), inv)\\n            )\\n        }\\n    }\\n\\n    /// @dev Calculates `floor(x * y / d)` with full precision, rounded up.\\n    /// Throws if result overflows a uint256 or when `d` is zero.\\n    /// Credit to Uniswap-v3-core under MIT license:\\n    /// https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/FullMath.sol\\n    function fullMulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256 result) {\\n        result = fullMulDiv(x, y, d);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mulmod(x, y, d) {\\n                result := add(result, 1)\\n                if iszero(result) {\\n                    mstore(0x00, 0xae47f702) // `FullMulDivFailed()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns `floor(x * y / d)`.\\n    /// Reverts if `x * y` overflows, or `d` is zero.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mul(x, y)\\n            // Equivalent to `require(d != 0 && (y == 0 || x <= type(uint256).max / y))`.\\n            if iszero(mul(or(iszero(x), eq(div(z, x), y)), d)) {\\n                mstore(0x00, 0xad251c27) // `MulDivFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := div(z, d)\\n        }\\n    }\\n\\n    /// @dev Returns `ceil(x * y / d)`.\\n    /// Reverts if `x * y` overflows, or `d` is zero.\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mul(x, y)\\n            // Equivalent to `require(d != 0 && (y == 0 || x <= type(uint256).max / y))`.\\n            if iszero(mul(or(iszero(x), eq(div(z, x), y)), d)) {\\n                mstore(0x00, 0xad251c27) // `MulDivFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := add(iszero(iszero(mod(z, d))), div(z, d))\\n        }\\n    }\\n\\n    /// @dev Returns `ceil(x / d)`.\\n    /// Reverts if `d` is zero.\\n    function divUp(uint256 x, uint256 d) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(d) {\\n                mstore(0x00, 0x65244e4e) // `DivFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := add(iszero(iszero(mod(x, d))), div(x, d))\\n        }\\n    }\\n\\n    /// @dev Returns `max(0, x - y)`.\\n    function zeroFloorSub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mul(gt(x, y), sub(x, y))\\n        }\\n    }\\n\\n    /// @dev Returns `condition ? x : y`, without branching.\\n    function ternary(\\n        bool condition,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := xor(x, mul(xor(x, y), iszero(condition)))\\n        }\\n    }\\n\\n    /// @dev Exponentiate `x` to `y` by squaring, denominated in base `b`.\\n    /// Reverts if the computation overflows.\\n    function rpow(\\n        uint256 x,\\n        uint256 y,\\n        uint256 b\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mul(b, iszero(y)) // `0 ** 0 = 1`. Otherwise, `0 ** n = 0`.\\n            if x {\\n                z := xor(b, mul(xor(b, x), and(y, 1))) // `z = isEven(y) ? scale : x`\\n                let half := shr(1, b) // Divide `b` by 2.\\n                // Divide `y` by 2 every iteration.\\n                for {\\n                    y := shr(1, y)\\n                } y {\\n                    y := shr(1, y)\\n                } {\\n                    let xx := mul(x, x) // Store x squared.\\n                    let xxRound := add(xx, half) // Round to the nearest number.\\n                    // Revert if `xx + half` overflowed, or if `x ** 2` overflows.\\n                    if or(lt(xxRound, xx), shr(128, x)) {\\n                        mstore(0x00, 0x49f7642b) // `RPowOverflow()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                    x := div(xxRound, b) // Set `x` to scaled `xxRound`.\\n                    // If `y` is odd:\\n                    if and(y, 1) {\\n                        let zx := mul(z, x) // Compute `z * x`.\\n                        let zxRound := add(zx, half) // Round to the nearest number.\\n                        // If `z * x` overflowed or `zx + half` overflowed:\\n                        if or(xor(div(zx, x), z), lt(zxRound, zx)) {\\n                            // Revert if `x` is non-zero.\\n                            if x {\\n                                mstore(0x00, 0x49f7642b) // `RPowOverflow()`.\\n                                revert(0x1c, 0x04)\\n                            }\\n                        }\\n                        z := div(zxRound, b) // Return properly scaled `zxRound`.\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the square root of `x`, rounded down.\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // `floor(sqrt(2**15)) = 181`. `sqrt(2**15) - 181 = 2.84`.\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // Let `y = x / 2**r`. We check `y >= 2**(k + 8)`\\n            // but shift right by `k` bits to ensure that if `x >= 256`, then `y >= 256`.\\n            let r := shl(7, lt(0xffffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffffff, shr(r, x))))\\n            z := shl(shr(1, r), z)\\n\\n            // Goal was to get `z*z*y` within a small factor of `x`. More iterations could\\n            // get y in a tighter range. Currently, we will have y in `[256, 256*(2**16))`.\\n            // We ensured `y >= 256` so that the relative difference between `y` and `y+1` is small.\\n            // That's not possible if `x < 256` but we can just verify those cases exhaustively.\\n\\n            // Now, `z*z*y <= x < z*z*(y+1)`, and `y <= 2**(16+8)`, and either `y >= 256`, or `x < 256`.\\n            // Correctness can be checked exhaustively for `x < 256`, so we assume `y >= 256`.\\n            // Then `z*sqrt(y)` is within `sqrt(257)/sqrt(256)` of `sqrt(x)`, or about 20bps.\\n\\n            // For `s` in the range `[1/256, 256]`, the estimate `f(s) = (181/1024) * (s+1)`\\n            // is in the range `(1/2.84 * sqrt(s), 2.84 * sqrt(s))`,\\n            // with largest error when `s = 1` and when `s = 256` or `1/256`.\\n\\n            // Since `y` is in `[256, 256*(2**16))`, let `a = y/65536`, so that `a` is in `[1/256, 256)`.\\n            // Then we can estimate `sqrt(y)` using\\n            // `sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2**18`.\\n\\n            // There is no overflow risk here since `y < 2**136` after the first branch above.\\n            z := shr(18, mul(z, add(shr(r, x), 65536))) // A `mul()` is saved from starting `z` at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If `x+1` is a perfect square, the Babylonian method cycles between\\n            // `floor(sqrt(x))` and `ceil(sqrt(x))`. This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    /// @dev Returns the cube root of `x`, rounded down.\\n    /// Credit to bout3fiddy and pcaversaccio under AGPLv3 license:\\n    /// https://github.com/pcaversaccio/snekmate/blob/main/src/utils/Math.vy\\n    /// Formally verified by xuwinnie:\\n    /// https://github.com/vectorized/solady/blob/main/audits/xuwinnie-solady-cbrt-proof.pdf\\n    function cbrt(uint256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // Makeshift lookup table to nudge the approximate log2 result.\\n            z := div(shl(div(r, 3), shl(lt(0xf, shr(r, x)), 0xf)), xor(7, mod(r, 3)))\\n            // Newton-Raphson's.\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            // Round down.\\n            z := sub(z, lt(div(x, mul(z, z)), z))\\n        }\\n    }\\n\\n    /// @dev Returns the square root of `x`, denominated in `WAD`, rounded down.\\n    function sqrtWad(uint256 x) internal pure returns (uint256 z) {\\n        unchecked {\\n            if (x <= type(uint256).max / 10**18) return sqrt(x * 10**18);\\n            z = (1 + sqrt(x)) * 10**9;\\n            z = (fullMulDivUnchecked(x, 10**18, z) + z) >> 1;\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := sub(z, gt(999999999999999999, sub(mulmod(z, z, x), 1))) // Round down.\\n        }\\n    }\\n\\n    /// @dev Returns the cube root of `x`, denominated in `WAD`, rounded down.\\n    /// Formally verified by xuwinnie:\\n    /// https://github.com/vectorized/solady/blob/main/audits/xuwinnie-solady-cbrt-proof.pdf\\n    function cbrtWad(uint256 x) internal pure returns (uint256 z) {\\n        unchecked {\\n            if (x <= type(uint256).max / 10**36) return cbrt(x * 10**36);\\n            z = (1 + cbrt(x)) * 10**12;\\n            z = (fullMulDivUnchecked(x, 10**36, z * z) + z + z) / 3;\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let p := x\\n            for {\\n\\n            } 1 {\\n\\n            } {\\n                if iszero(shr(229, p)) {\\n                    if iszero(shr(199, p)) {\\n                        p := mul(p, 100000000000000000) // 10 ** 17.\\n                        break\\n                    }\\n                    p := mul(p, 100000000) // 10 ** 8.\\n                    break\\n                }\\n                if iszero(shr(249, p)) {\\n                    p := mul(p, 100)\\n                }\\n                break\\n            }\\n            let t := mulmod(mul(z, z), z, p)\\n            z := sub(z, gt(lt(t, shr(1, p)), iszero(t))) // Round down.\\n        }\\n    }\\n\\n    /// @dev Returns the factorial of `x`.\\n    function factorial(uint256 x) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := 1\\n            if iszero(lt(x, 58)) {\\n                mstore(0x00, 0xaba0f2a2) // `FactorialOverflow()`.\\n                revert(0x1c, 0x04)\\n            }\\n            for {\\n\\n            } x {\\n                x := sub(x, 1)\\n            } {\\n                result := mul(result, x)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the log2 of `x`.\\n    /// Equivalent to computing the index of the most significant bit (MSB) of `x`.\\n    /// Returns 0 if `x` is zero.\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            r := or(\\n                r,\\n                byte(\\n                    and(0x1f, shr(shr(r, x), 0x8421084210842108cc6318c6db6d54be)),\\n                    0x0706060506020504060203020504030106050205030304010505030400000000\\n                )\\n            )\\n        }\\n    }\\n\\n    /// @dev Returns the log2 of `x`, rounded up.\\n    /// Returns 0 if `x` is zero.\\n    function log2Up(uint256 x) internal pure returns (uint256 r) {\\n        r = log2(x);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r := add(r, lt(shl(r, 1), x))\\n        }\\n    }\\n\\n    /// @dev Returns the log10 of `x`.\\n    /// Returns 0 if `x` is zero.\\n    function log10(uint256 x) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(lt(x, 100000000000000000000000000000000000000)) {\\n                x := div(x, 100000000000000000000000000000000000000)\\n                r := 38\\n            }\\n            if iszero(lt(x, 100000000000000000000)) {\\n                x := div(x, 100000000000000000000)\\n                r := add(r, 20)\\n            }\\n            if iszero(lt(x, 10000000000)) {\\n                x := div(x, 10000000000)\\n                r := add(r, 10)\\n            }\\n            if iszero(lt(x, 100000)) {\\n                x := div(x, 100000)\\n                r := add(r, 5)\\n            }\\n            r := add(r, add(gt(x, 9), add(gt(x, 99), add(gt(x, 999), gt(x, 9999)))))\\n        }\\n    }\\n\\n    /// @dev Returns the log10 of `x`, rounded up.\\n    /// Returns 0 if `x` is zero.\\n    function log10Up(uint256 x) internal pure returns (uint256 r) {\\n        r = log10(x);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r := add(r, lt(exp(10, r), x))\\n        }\\n    }\\n\\n    /// @dev Returns the log256 of `x`.\\n    /// Returns 0 if `x` is zero.\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(shr(3, r), lt(0xff, shr(r, x)))\\n        }\\n    }\\n\\n    /// @dev Returns the log256 of `x`, rounded up.\\n    /// Returns 0 if `x` is zero.\\n    function log256Up(uint256 x) internal pure returns (uint256 r) {\\n        r = log256(x);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r := add(r, lt(shl(shl(3, r), 1), x))\\n        }\\n    }\\n\\n    /// @dev Returns the scientific notation format `mantissa * 10 ** exponent` of `x`.\\n    /// Useful for compressing prices (e.g. using 25 bit mantissa and 7 bit exponent).\\n    function sci(uint256 x) internal pure returns (uint256 mantissa, uint256 exponent) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mantissa := x\\n            if mantissa {\\n                if iszero(mod(mantissa, 1000000000000000000000000000000000)) {\\n                    mantissa := div(mantissa, 1000000000000000000000000000000000)\\n                    exponent := 33\\n                }\\n                if iszero(mod(mantissa, 10000000000000000000)) {\\n                    mantissa := div(mantissa, 10000000000000000000)\\n                    exponent := add(exponent, 19)\\n                }\\n                if iszero(mod(mantissa, 1000000000000)) {\\n                    mantissa := div(mantissa, 1000000000000)\\n                    exponent := add(exponent, 12)\\n                }\\n                if iszero(mod(mantissa, 1000000)) {\\n                    mantissa := div(mantissa, 1000000)\\n                    exponent := add(exponent, 6)\\n                }\\n                if iszero(mod(mantissa, 10000)) {\\n                    mantissa := div(mantissa, 10000)\\n                    exponent := add(exponent, 4)\\n                }\\n                if iszero(mod(mantissa, 100)) {\\n                    mantissa := div(mantissa, 100)\\n                    exponent := add(exponent, 2)\\n                }\\n                if iszero(mod(mantissa, 10)) {\\n                    mantissa := div(mantissa, 10)\\n                    exponent := add(exponent, 1)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Convenience function for packing `x` into a smaller number using `sci`.\\n    /// The `mantissa` will be in bits [7..255] (the upper 249 bits).\\n    /// The `exponent` will be in bits [0..6] (the lower 7 bits).\\n    /// Use `SafeCastLib` to safely ensure that the `packed` number is small\\n    /// enough to fit in the desired unsigned integer type:\\n    /// ```\\n    ///     uint32 packed = SafeCastLib.toUint32(FixedPointMathLib.packSci(777 ether));\\n    /// ```\\n    function packSci(uint256 x) internal pure returns (uint256 packed) {\\n        (x, packed) = sci(x); // Reuse for `mantissa` and `exponent`.\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if shr(249, x) {\\n                mstore(0x00, 0xce30380c) // `MantissaOverflow()`.\\n                revert(0x1c, 0x04)\\n            }\\n            packed := or(shl(7, x), packed)\\n        }\\n    }\\n\\n    /// @dev Convenience function for unpacking a packed number from `packSci`.\\n    function unpackSci(uint256 packed) internal pure returns (uint256 unpacked) {\\n        unchecked {\\n            unpacked = (packed >> 7) * 10**(packed & 0x7f);\\n        }\\n    }\\n\\n    /// @dev Returns the average of `x` and `y`. Rounds towards zero.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = (x & y) + ((x ^ y) >> 1);\\n        }\\n    }\\n\\n    /// @dev Returns the average of `x` and `y`. Rounds towards negative infinity.\\n    function avg(int256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            z = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @dev Returns the absolute value of `x`.\\n    function abs(int256 x) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = (uint256(x) + uint256(x >> 255)) ^ uint256(x >> 255);\\n        }\\n    }\\n\\n    /// @dev Returns the absolute distance between `x` and `y`.\\n    function dist(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := add(xor(sub(0, gt(x, y)), sub(y, x)), gt(x, y))\\n        }\\n    }\\n\\n    /// @dev Returns the absolute distance between `x` and `y`.\\n    function dist(int256 x, int256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := add(xor(sub(0, sgt(x, y)), sub(y, x)), sgt(x, y))\\n        }\\n    }\\n\\n    /// @dev Returns the minimum of `x` and `y`.\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, y), lt(y, x)))\\n        }\\n    }\\n\\n    /// @dev Returns the minimum of `x` and `y`.\\n    function min(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, y), slt(y, x)))\\n        }\\n    }\\n\\n    /// @dev Returns the maximum of `x` and `y`.\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, y), gt(y, x)))\\n        }\\n    }\\n\\n    /// @dev Returns the maximum of `x` and `y`.\\n    function max(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, y), sgt(y, x)))\\n        }\\n    }\\n\\n    /// @dev Returns `x`, bounded to `minValue` and `maxValue`.\\n    function clamp(\\n        uint256 x,\\n        uint256 minValue,\\n        uint256 maxValue\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, minValue), gt(minValue, x)))\\n            z := xor(z, mul(xor(z, maxValue), lt(maxValue, z)))\\n        }\\n    }\\n\\n    /// @dev Returns `x`, bounded to `minValue` and `maxValue`.\\n    function clamp(\\n        int256 x,\\n        int256 minValue,\\n        int256 maxValue\\n    ) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, minValue), sgt(minValue, x)))\\n            z := xor(z, mul(xor(z, maxValue), slt(maxValue, z)))\\n        }\\n    }\\n\\n    /// @dev Returns greatest common divisor of `x` and `y`.\\n    function gcd(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {\\n                z := x\\n            } y {\\n\\n            } {\\n                let t := y\\n                y := mod(z, y)\\n                z := t\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns `a + (b - a) * (t - begin) / (end - begin)`,\\n    /// with `t` clamped between `begin` and `end` (inclusive).\\n    /// Agnostic to the order of (`a`, `b`) and (`end`, `begin`).\\n    /// If `begins == end`, returns `t <= begin ? a : b`.\\n    function lerp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 t,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (uint256) {\\n        if (begin > end) (t, begin, end) = (~t, ~begin, ~end);\\n        if (t <= begin) return a;\\n        if (t >= end) return b;\\n        unchecked {\\n            if (b >= a) return a + fullMulDiv(b - a, t - begin, end - begin);\\n            return a - fullMulDiv(a - b, t - begin, end - begin);\\n        }\\n    }\\n\\n    /// @dev Returns `a + (b - a) * (t - begin) / (end - begin)`.\\n    /// with `t` clamped between `begin` and `end` (inclusive).\\n    /// Agnostic to the order of (`a`, `b`) and (`end`, `begin`).\\n    /// If `begins == end`, returns `t <= begin ? a : b`.\\n    function lerp(\\n        int256 a,\\n        int256 b,\\n        int256 t,\\n        int256 begin,\\n        int256 end\\n    ) internal pure returns (int256) {\\n        if (begin > end) (t, begin, end) = (~t, ~begin, ~end);\\n        if (t <= begin) return a;\\n        if (t >= end) return b;\\n        // forgefmt: disable-next-item\\n        unchecked {\\n            if (b >= a)\\n                return int256(uint256(a) + fullMulDiv(uint256(b - a), uint256(t - begin), uint256(end - begin)));\\n            return int256(uint256(a) - fullMulDiv(uint256(a - b), uint256(t - begin), uint256(end - begin)));\\n        }\\n    }\\n\\n    /// @dev Returns if `x` is an even number. Some people may need this.\\n    function isEven(uint256 x) internal pure returns (bool) {\\n        return x & uint256(1) == uint256(0);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   RAW NUMBER OPERATIONS                    */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns `x + y`, without checking for overflow.\\n    function rawAdd(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x + y;\\n        }\\n    }\\n\\n    /// @dev Returns `x + y`, without checking for overflow.\\n    function rawAdd(int256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            z = x + y;\\n        }\\n    }\\n\\n    /// @dev Returns `x - y`, without checking for underflow.\\n    function rawSub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x - y;\\n        }\\n    }\\n\\n    /// @dev Returns `x - y`, without checking for underflow.\\n    function rawSub(int256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            z = x - y;\\n        }\\n    }\\n\\n    /// @dev Returns `x * y`, without checking for overflow.\\n    function rawMul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x * y;\\n        }\\n    }\\n\\n    /// @dev Returns `x * y`, without checking for overflow.\\n    function rawMul(int256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            z = x * y;\\n        }\\n    }\\n\\n    /// @dev Returns `x / y`, returning 0 if `y` is zero.\\n    function rawDiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := div(x, y)\\n        }\\n    }\\n\\n    /// @dev Returns `x / y`, returning 0 if `y` is zero.\\n    function rawSDiv(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := sdiv(x, y)\\n        }\\n    }\\n\\n    /// @dev Returns `x % y`, returning 0 if `y` is zero.\\n    function rawMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mod(x, y)\\n        }\\n    }\\n\\n    /// @dev Returns `x % y`, returning 0 if `y` is zero.\\n    function rawSMod(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := smod(x, y)\\n        }\\n    }\\n\\n    /// @dev Returns `(x + y) % d`, return 0 if `d` if zero.\\n    function rawAddMod(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := addmod(x, y, d)\\n        }\\n    }\\n\\n    /// @dev Returns `(x * y) % d`, return 0 if `d` if zero.\\n    function rawMulMod(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mulmod(x, y, d)\\n        }\\n    }\\n\\n    /*\\n     * CUSTOM ADDITIONS\\n     */\\n\\n    /**\\n     * @notice Helper function to calculate power with high precision\\n     * @param base The base number (with 18 decimals)\\n     * @param exponent The exponent\\n     * @return The result (with 18 decimals)\\n     */\\n    function powWithPrecision(uint256 base, uint256 exponent) internal pure returns (uint256) {\\n        uint256 result = 10**18;\\n\\n        while (exponent != 0) {\\n            if (exponent & 1 == 1) {\\n                result = mulDiv(result, base, WAD);\\n            }\\n            base = mulDiv(base, base, WAD);\\n            exponent = exponent >> 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Calculates nth root using binary search\\n     * @param value The value to find the root of (with 18 decimals)\\n     * @param n The root to calculate (e.g., 2 for square root)\\n     * @return The nth root of the value (with 18 decimals)\\n     */\\n    function nthRoot(uint256 value, uint256 n) internal pure returns (uint256) {\\n        uint256 SCALE = 10**18;\\n\\n        if (value == 0) return 0;\\n        if (n == 0) return SCALE;\\n        if (n == 1) return value;\\n\\n        uint256 low = 0;\\n        uint256 high = SCALE;\\n        uint256 mid;\\n\\n        // Binary search with high precision\\n        while (low <= high && high - low > 1) {\\n            mid = (low + high) / 2;\\n\\n            uint256 midToN = powWithPrecision(mid, n);\\n\\n            if (midToN == value) {\\n                return mid;\\n            } else if (midToN < value) {\\n                low = mid;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n\\n        // Return the closest value\\n        uint256 lowToN = powWithPrecision(low, n);\\n        uint256 highToN = powWithPrecision(high, n);\\n\\n        if (value - lowToN < highToN - value) {\\n            return low;\\n        } else {\\n            return high;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa9e44a2441aa09fc1fb2e086097c8abfde7c39c790884c77802a230e40ff8855\",\"license\":\"MIT\"},\"src/diamond/libraries/AccessControlLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\n\\npragma solidity 0.8.9;\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary AccessControlLib {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 constant DEFAULT_ADMIN_ROLE = 0x00;\\n    bytes32 constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 constant BOOKING_MANAGER_ROLE = keccak256(\\\"BOOKING_MANAGER_ROLE\\\");\\n    bytes32 constant STAKE_MANAGER_ROLE = keccak256(\\\"STAKE_MANAGER_ROLE\\\");\\n    bytes32 constant VAULT_MANAGER_ROLE = keccak256(\\\"VAULT_MANAGER_ROLE\\\");\\n    bytes32 constant MEMBERSHIP_MANAGER_ROLE = keccak256(\\\"MEMBERSHIP_MANAGER_ROLE\\\");\\n    bytes32 constant BOOKING_PLATFORM_ROLE = keccak256(\\\"BOOKING_PLATFORM_ROLE\\\");\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct RoleStore {\\n        mapping(bytes32 => RoleData) _roles;\\n        mapping(bytes32 => EnumerableSet.AddressSet) _roleMembers;\\n    }\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function checkRole(RoleStore storage store, bytes32 role) internal view {\\n        checkRole(store, role, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function checkRole(\\n        RoleStore storage store,\\n        bytes32 role,\\n        address account\\n    ) internal view {\\n        if (!hasRole(store, role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(\\n        RoleStore storage store,\\n        bytes32 role,\\n        address account\\n    ) internal view returns (bool) {\\n        return store._roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(RoleStore storage store, bytes32 role) internal view returns (bytes32) {\\n        return store._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function setRoleAdmin(\\n        RoleStore storage store,\\n        bytes32 role,\\n        bytes32 adminRole\\n    ) internal {\\n        bytes32 previousAdminRole = getRoleAdmin(store, role);\\n        store._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(\\n        RoleStore storage store,\\n        bytes32 role,\\n        address account\\n    ) internal {\\n        if (!hasRole(store, role, account)) {\\n            store._roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n        store._roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(\\n        RoleStore storage store,\\n        bytes32 role,\\n        address account\\n    ) internal {\\n        if (hasRole(store, role, account)) {\\n            store._roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n        store._roleMembers[role].remove(account);\\n    }\\n\\n    function getRoles() internal pure returns (string[2][7] memory roles) {\\n        roles[0] = [\\\"DEFAULT_ADMIN_ROLE\\\", string(abi.encodePacked(DEFAULT_ADMIN_ROLE))];\\n        roles[1] = [\\\"MINTER_ROLE\\\", string(abi.encodePacked(MINTER_ROLE))];\\n        roles[2] = [\\\"BOOKING_MANAGER_ROLE\\\", string(abi.encodePacked(BOOKING_MANAGER_ROLE))];\\n        roles[3] = [\\\"STAKE_MANAGER_ROLE\\\", string(abi.encodePacked(STAKE_MANAGER_ROLE))];\\n        roles[4] = [\\\"VAULT_MANAGER_ROLE\\\", string(abi.encodePacked(VAULT_MANAGER_ROLE))];\\n        roles[5] = [\\\"MEMBERSHIP_MANAGER_ROLE\\\", string(abi.encodePacked(MEMBERSHIP_MANAGER_ROLE))];\\n        roles[6] = [\\\"BOOKING_PLATFORM_ROLE\\\", string(abi.encodePacked(BOOKING_PLATFORM_ROLE))];\\n        return roles;\\n    }\\n}\\n\",\"keccak256\":\"0xeaa235917dbb14e43abb0f8ae51b813bdfd8d997b9d31e2147cb6c5b5786ec97\",\"license\":\"AGPL-1.0\"},\"src/diamond/libraries/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\nimport \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"../libraries/BookingMapLib.sol\\\";\\nimport \\\"../libraries/AccessControlLib.sol\\\";\\nimport \\\"../libraries/MembershipLib.sol\\\";\\nimport \\\"../libraries/StakeLibV2.sol\\\";\\n\\n// when upgrading AppStorage add new state vars to the end of the struct\\n// structs can only be upgraded if they are referred to within AppStorage by a mapping\\nstruct AppStorage {\\n    bool initialized;\\n    // execution\\n    bool paused;\\n    // The ERC!!\\n    IERC20 communityToken;\\n    // Roles; the AccessControlLib.RoleStore struct can be upgraded\\n    AccessControlLib.RoleStore _roleStore;\\n    // Booking; the BookingMapLib.UserStore struct can be upgraded\\n    // BookingMapLib.YearsStore cannot be upgraded\\n    mapping(address => BookingMapLib.UserStore) _accommodationBookings;\\n    BookingMapLib.YearsStore _accommodationYears;\\n    // Stake; the OrderedStakeLib.Store struct can be upgraded\\n    mapping(address => OrderedStakeLib.Store) staking;\\n    // Members; the MembershipLib.Store struct cannot be upgraded\\n    MembershipLib.Store members;\\n    // Address of the TDF Treasury, used to make exception for transferring TDF while not yet go-live event\\n    address tdfTreasury;\\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n}\\n\\ncontract Modifiers {\\n    using AccessControlLib for AccessControlLib.RoleStore;\\n    using MembershipLib for MembershipLib.Store;\\n    using StakeLibV2 for StakeLibV2.Context;\\n    using BookingMapLib for BookingMapLib.UserStore;\\n    using BookingMapLib for BookingMapLib.YearsStore;\\n\\n    AppStorage internal s;\\n\\n    modifier onlyOwner() {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n\\n    modifier whenNotInitalized() {\\n        if (s.initialized) {\\n            revert(\\\"Already initialized\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        s._roleStore.checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    modifier onlyMember() {\\n        _requireMember(_msgSender());\\n        _;\\n    }\\n\\n    function _requireMember(address account) internal view {\\n        require(_isMember(account), \\\"Membership: only members allowed\\\");\\n    }\\n\\n    function _isMember(address account) internal view returns (bool) {\\n        return s.members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!s.paused, \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(s.paused, \\\"Pausable: not paused\\\");\\n    }\\n\\n    function _stakeLibContext(address account) internal view returns (StakeLibV2.Context memory) {\\n        return\\n            StakeLibV2.Context({account: account, token: s.communityToken, requiredBalance: _expectedStaked(account)});\\n    }\\n\\n    function _stakeLibBookingContext(address account, uint16 year_)\\n        internal\\n        view\\n        returns (StakeLibV2.BookingContext memory)\\n    {\\n        (, BookingMapLib.Year memory year) = s._accommodationYears.get(year_);\\n        return\\n            StakeLibV2.BookingContext({\\n                account: account,\\n                token: s.communityToken,\\n                requiredBalance: _expectedStaked(account),\\n                initYearTm: year.start,\\n                endYearTm: year.end\\n            });\\n    }\\n\\n    function _expectedStaked(address account) internal view returns (uint256) {\\n        uint256 max;\\n        BookingMapLib.Year[] memory _yearList = s._accommodationYears.values();\\n        for (uint16 i = 0; i < _yearList.length; i++) {\\n            // TODO: should it be + 1 year?\\n            if (_yearList[i].end < block.timestamp) continue;\\n            uint256 amount = s._accommodationBookings[account].getBalance(_yearList[i].number);\\n            if (amount > max) max = amount;\\n        }\\n        return max;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x19a8346ad297427e4dbf018ef39080eb7830cf36f37f4df07363d2cabde27406\",\"license\":\"MIT\"},\"src/diamond/libraries/BookingMapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\n\\nlibrary BookingMapLib {\\n    using EnumerableMap for EnumerableMap.Bytes32ToUintMap;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    enum BookingStatus {\\n        Pending,\\n        Confirmed,\\n        CheckedIn\\n    }\\n\\n    struct Booking {\\n        BookingStatus status;\\n        uint16 year;\\n        uint16 dayOfYear;\\n        uint256 price;\\n        uint256 timestamp;\\n    }\\n\\n    struct UserStore {\\n        mapping(uint16 => uint16) nights;\\n        mapping(uint16 => uint256) balance;\\n        mapping(uint16 => EnumerableMap.Bytes32ToUintMap) dates;\\n        mapping(bytes32 => Booking) bookings;\\n        // TODO: still not in use but added here to optimize proofOfPresence calculations\\n        mapping(uint16 => uint16) checkedInNights;\\n    }\\n\\n    struct Year {\\n        uint16 number;\\n        bool leapYear;\\n        uint256 start;\\n        uint256 end;\\n        bool enabled;\\n    }\\n\\n    struct YearsStore {\\n        EnumerableSet.Bytes32Set _inner;\\n        mapping(bytes32 => Year) elems;\\n    }\\n\\n    function checkedInNightsOn(UserStore storage store, uint16 year_) internal view returns (uint16) {\\n        Booking[] memory localList = list(store, year_);\\n        uint16 acc;\\n        for (uint256 i; i < localList.length; i++) {\\n            if (localList[i].status == BookingMapLib.BookingStatus.CheckedIn) {\\n                acc++;\\n            }\\n        }\\n        return acc;\\n    }\\n\\n    function add(UserStore storage store, Booking memory booking) internal returns (bool) {\\n        bytes32 key = _buildKey(booking.year, booking.dayOfYear);\\n        if (store.dates[booking.year].set(key, booking.timestamp)) {\\n            store.balance[booking.year] += booking.price;\\n            store.bookings[key] = booking; //Booking(booking.price, booking.timestamp);\\n            store.nights[booking.year] += uint16(1);\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function get(\\n        UserStore storage store,\\n        uint16 _year,\\n        uint16 dayOfYear\\n    ) internal view returns (bool, Booking memory) {\\n        bytes32 key = _buildKey(_year, dayOfYear);\\n        if (store.dates[_year].contains(key)) {\\n            return (true, store.bookings[key]);\\n        }\\n        return (false, Booking(BookingStatus.Pending, 0, 0, 0, 0));\\n    }\\n\\n    function getBalance(UserStore storage store, uint16 _year) internal view returns (uint256) {\\n        return store.balance[_year];\\n    }\\n\\n    function getNights(UserStore storage store, uint16 _year) internal view returns (uint256) {\\n        return store.nights[_year];\\n    }\\n\\n    function list(UserStore storage store, uint16 _year) internal view returns (Booking[] memory) {\\n        Booking[] memory bookings = new Booking[](store.dates[_year].length());\\n        for (uint256 i; i < store.dates[_year].length(); i++) {\\n            (bytes32 key, ) = store.dates[_year].at(i);\\n            bookings[i] = store.bookings[key];\\n        }\\n        return bookings;\\n    }\\n\\n    function remove(\\n        UserStore storage store,\\n        uint16 _year,\\n        uint16 _dayOfYear\\n    ) internal returns (bool, Booking memory) {\\n        bytes32 key = _buildKey(_year, _dayOfYear);\\n        if (store.dates[_year].remove(key)) {\\n            Booking memory booking = store.bookings[key];\\n            store.balance[_year] -= booking.price;\\n            store.nights[_year] -= uint16(1);\\n            delete store.bookings[key];\\n            return (true, booking);\\n        }\\n        return (false, Booking(BookingStatus.Pending, 0, 0, 0, 0));\\n    }\\n\\n    function updateStatus(\\n        UserStore storage store,\\n        uint16 _year,\\n        uint16 _dayOfYear,\\n        BookingStatus _status\\n    ) internal returns (bool) {\\n        bytes32 key = _buildKey(_year, _dayOfYear);\\n        if (store.dates[_year].contains(key)) {\\n            Booking memory booking = store.bookings[key];\\n            booking.status = _status;\\n            store.bookings[key] = booking;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _buildKey(uint16 year, uint16 dayOfYear) internal pure returns (bytes32) {\\n        return bytes32(abi.encodePacked(year, dayOfYear));\\n    }\\n\\n    // ==========================================================\\n    // Years\\n    // ==========================================================\\n    function buildTimestamp(\\n        YearsStore storage _years,\\n        uint16 yearNum,\\n        uint16 dayOfTheYear\\n    ) internal view returns (bool, uint256) {\\n        (bool found, Year memory year) = get(_years, yearNum);\\n        if (found && year.enabled) {\\n            uint256 day;\\n\\n            if (year.leapYear) {\\n                day = (year.end - year.start) / 366;\\n            } else {\\n                day = (year.end - year.start) / 365;\\n            }\\n            return (true, year.start + (day * (dayOfTheYear - 1)) + (day / 2));\\n        }\\n        return (false, uint256(0));\\n    }\\n\\n    function buildBooking(\\n        YearsStore storage _years,\\n        BookingStatus status,\\n        uint16 yearNum,\\n        uint16 dayOfTheYear,\\n        uint256 price\\n    ) internal view returns (bool, Booking memory) {\\n        (bool success, uint256 tm) = buildTimestamp(_years, yearNum, dayOfTheYear);\\n        if (success) {\\n            return (true, Booking(status, yearNum, dayOfTheYear, price, tm));\\n        }\\n        return (false, Booking(BookingStatus.Pending, 0, 0, 0, 0));\\n    }\\n\\n    /// YearsStore -------------------------------------------\\n\\n    function length(YearsStore storage store) internal view returns (uint256) {\\n        return store._inner.length();\\n    }\\n\\n    function add(YearsStore storage store, Year memory _year) internal returns (bool) {\\n        bytes32 k = _buildYearKey(_year.number);\\n        if (store._inner.add(k)) {\\n            store.elems[k] = _year;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function values(YearsStore storage store) internal view returns (Year[] memory) {\\n        bytes32[] memory ks = store._inner.values();\\n        Year[] memory elems = new Year[](ks.length);\\n        for (uint256 i; i < ks.length; i++) {\\n            elems[i] = store.elems[ks[i]];\\n        }\\n        return elems;\\n    }\\n\\n    function get(YearsStore storage store, uint16 num) internal view returns (bool, Year memory) {\\n        bytes32 k = _buildYearKey(num);\\n        if (store._inner.contains(k)) {\\n            return (true, store.elems[k]);\\n        }\\n        return (false, Year(0, false, 0, 0, false));\\n    }\\n\\n    function remove(YearsStore storage store, uint16 num) internal returns (bool) {\\n        bytes32 k = _buildYearKey(num);\\n        if (store._inner.remove(k)) {\\n            delete store.elems[k];\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function contains(YearsStore storage store, uint16 num) internal view returns (bool) {\\n        bytes32 k = _buildYearKey(num);\\n        return store._inner.contains(k);\\n    }\\n\\n    function update(YearsStore storage store, Year memory _year) internal returns (bool) {\\n        bytes32 k = _buildYearKey(_year.number);\\n        if (store._inner.contains(k)) {\\n            store.elems[k] = _year;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    // function length\\n\\n    function _buildYearKey(uint16 num) internal pure returns (bytes32) {\\n        return bytes32(abi.encodePacked(num));\\n    }\\n}\\n\",\"keccak256\":\"0xd76f48b6bbcfbdd593d6e936d4065101e712c249d2957affe1fc79ebc39541a6\",\"license\":\"MIT\"},\"src/diamond/libraries/MembershipLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary MembershipLib {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct Store {\\n        EnumerableSet.AddressSet _inner;\\n        // NOTE: the only way to expand this struct after deployment si by adding data in maps\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Store storage store, address value) internal returns (bool) {\\n        return store._inner.add(value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Store storage store, address value) internal returns (bool) {\\n        return store._inner.remove(value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Store storage store, address value) internal view returns (bool) {\\n        return store._inner.contains(value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Store storage store) internal view returns (uint256) {\\n        return store._inner.length();\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Store storage store, uint256 index) internal view returns (address) {\\n        return store._inner.at(index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Store storage store) internal view returns (address[] memory) {\\n        return store._inner.values();\\n    }\\n}\\n\",\"keccak256\":\"0x41ff8eb6db7f89ddcbc9c4a07ea52349550ef3016fa6d24c11335abd681e988f\",\"license\":\"MIT\"},\"src/diamond/libraries/OrderedStakeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../Libraries/CustomDoubleEndedQueue.sol\\\";\\n\\nlibrary OrderedStakeLib {\\n    using CustomDoubleEndedQueue for CustomDoubleEndedQueue.Bytes32Deque;\\n\\n    // ONLY MEMORY!!\\n    struct Deposit {\\n        uint256 timestamp;\\n        uint256 amount;\\n    }\\n\\n    // TODO rename to Account\\n    struct Store {\\n        uint256 _balance;\\n        CustomDoubleEndedQueue.Bytes32Deque _queue;\\n        mapping(bytes32 => uint256) _amounts;\\n    }\\n\\n    function back(Store storage store) internal view returns (Deposit memory deposit) {\\n        bytes32 key = store._queue.back();\\n        deposit.timestamp = uint256(key);\\n        deposit.amount = uint256(store._amounts[key]);\\n    }\\n\\n    function front(Store storage store) internal view returns (Deposit memory deposit) {\\n        bytes32 key = store._queue.front();\\n        deposit.timestamp = uint256(key);\\n        deposit.amount = uint256(store._amounts[key]);\\n    }\\n\\n    function tryBack(Store storage store) internal view returns (bool, Deposit memory) {\\n        if (!empty(store)) {\\n            return (true, back(store));\\n        }\\n        return (false, Deposit(0, 0));\\n    }\\n\\n    function tryFront(Store storage store) internal view returns (bool, Deposit memory) {\\n        if (!empty(store)) {\\n            return (true, front(store));\\n        }\\n        return (false, Deposit(0, 0));\\n    }\\n\\n    function push(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 timestamp\\n    ) internal {\\n        _pushBackOrdered(store, amount, timestamp);\\n    }\\n\\n    function pushFront(\\n        OrderedStakeLib.Store storage store,\\n        uint256 amount,\\n        uint256 tm\\n    ) internal {\\n        _pushFrontOrdered(store, amount, tm);\\n    }\\n\\n    function length(Store storage store) internal view returns (uint256) {\\n        return store._queue.length();\\n    }\\n\\n    function at(Store storage store, uint256 index) internal view returns (Deposit memory deposit) {\\n        bytes32 key = store._queue.at(index);\\n        deposit.timestamp = uint256(key);\\n        deposit.amount = uint256(store._amounts[key]);\\n    }\\n\\n    function list(Store storage store) internal view returns (OrderedStakeLib.Deposit[] memory) {\\n        Deposit[] memory deposits_ = new Deposit[](length(store));\\n        for (uint256 i; i < length(store); i++) {\\n            deposits_[i] = at(store, i);\\n        }\\n        return deposits_;\\n    }\\n\\n    function empty(Store storage store) internal view returns (bool) {\\n        return store._queue.empty();\\n    }\\n\\n    function tryTakeUntil(\\n        Store storage store,\\n        uint256 requested,\\n        uint256 untilTm\\n    ) internal returns (bool) {\\n        if (requested >= balanceUntil(store, untilTm)) return false;\\n        takeUntil(store, requested, untilTm);\\n        return true;\\n    }\\n\\n    // TAKE from specific timestamp\\n    function takeAt(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 tm\\n    ) internal {\\n        Deposit memory _back = _popBack(store);\\n        if (_back.timestamp == tm) {\\n            if (_back.amount < amount) revert(\\\"OrderedStakeLib: InsufficientDeposit\\\");\\n            if (_back.amount > amount) {\\n                _pushBackOrdered(store, _back.amount - amount, _back.timestamp);\\n            }\\n            // return;\\n        } else if (_back.timestamp < tm) {\\n            revert(\\\"OrderedStakeLib: NotFound\\\");\\n        } else {\\n            takeAt(store, amount, tm);\\n            _pushBackOrdered(store, _back.amount, _back.timestamp);\\n        }\\n    }\\n\\n    function balanceFromTo(\\n        Store storage store,\\n        uint256 from,\\n        uint256 to\\n    ) internal view returns (uint256 amount) {\\n        for (uint256 i; i < length(store); i++) {\\n            Deposit memory deposit = at(store, i);\\n            if (deposit.timestamp >= from && deposit.timestamp <= to) {\\n                amount += deposit.amount;\\n            }\\n        }\\n    }\\n\\n    function moveFrontRanged(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 initScanTm,\\n        uint256 to\\n    ) internal {\\n        if (to >= initScanTm) return;\\n        // require(initScanTm > to)\\n        _moveBackToFrontRanged(store, amount, initScanTm, to);\\n    }\\n\\n    function _moveBackToFrontRanged(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 initScanTm,\\n        uint256 to\\n    ) internal {\\n        Deposit memory _back = back(store);\\n        if (_back.timestamp <= initScanTm) {\\n            _moveFront(store, amount, _back.timestamp, to);\\n        } else {\\n            _back = _popBack(store);\\n            _moveBackToFrontRanged(store, amount, initScanTm, to);\\n            _pushBackOrdered(store, _back.amount, _back.timestamp);\\n        }\\n    }\\n\\n    function moveBackRanged(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 initScanTm,\\n        uint256 to\\n    ) internal {\\n        if (to <= initScanTm) return;\\n        require(initScanTm < to);\\n        _moveFrontToBackRanged(store, amount, initScanTm, to);\\n    }\\n\\n    function _moveFrontToBackRanged(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 initScanTm,\\n        uint256 to\\n    ) internal {\\n        Deposit memory _front = front(store);\\n        if (_front.timestamp >= initScanTm) {\\n            _moveBack(store, amount, _front.timestamp, to);\\n        } else {\\n            _front = _popFront(store);\\n            _moveFrontToBackRanged(store, amount, initScanTm, to);\\n            _pushFrontOrdered(store, _front.amount, _front.timestamp);\\n        }\\n    }\\n\\n    // FRONT to BACK\\n    function takeUntil(\\n        Store storage store,\\n        uint256 requested,\\n        uint256 untilTm\\n    ) internal {\\n        require(requested > uint256(0), \\\"OrderedStakeLib: Nothing Requested\\\");\\n        require(store._balance >= requested, \\\"OrderedStakeLib: NOT_ENOUGH_BALANCE\\\");\\n\\n        uint256 current_extracted;\\n\\n        while (current_extracted < requested) {\\n            OrderedStakeLib.Deposit memory current_deposit = _popFront(store);\\n            if (current_deposit.timestamp <= untilTm) {\\n                if (current_deposit.amount + current_extracted == requested) {\\n                    current_extracted += current_deposit.amount;\\n                } else if (current_deposit.amount + current_extracted > requested) {\\n                    // substract front\\n                    uint256 reminder = current_deposit.amount + current_extracted - requested;\\n                    _pushFront(store, reminder, current_deposit.timestamp);\\n                    current_extracted = requested;\\n                } else {\\n                    current_extracted += current_deposit.amount;\\n                }\\n            } else {\\n                revert(\\\"OrderedStakeLib: NOT_ENOUGHT_UNLOCKABLE_BALANCE\\\");\\n            }\\n        }\\n    }\\n\\n    function takeMaxUntil(Store storage store, uint256 untilTm) internal returns (uint256 amount) {\\n        amount = balanceUntil(store, untilTm);\\n        if (amount == uint256(0)) return amount;\\n        takeUntil(store, amount, untilTm);\\n    }\\n\\n    // We have know the real key to use this method\\n    // TODO: rename _moveBackToFront\\n    function moveFront(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 from,\\n        uint256 to\\n    ) internal {\\n        if (from == to) return;\\n        require(from > to, \\\"OrderedStakeLib: WrongRange\\\");\\n        if (store._queue.empty()) revert(\\\"OrderedStakeLib: Empty\\\");\\n        _moveFront(store, amount, from, to);\\n    }\\n\\n    function moveBack(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 from,\\n        uint256 to\\n    ) internal {\\n        if (from == to) return;\\n        require(from < to, \\\"OrderedStakeLib: WrongRange\\\");\\n        if (store._queue.empty()) revert(\\\"OrderedStakeLib: Empty\\\");\\n        _moveBack(store, amount, from, to);\\n    }\\n\\n    // @dev\\n    // Including current timestamp\\n    function balanceUntil(Store storage store, uint256 untilTm) internal view returns (uint256 amount) {\\n        if (store._queue.empty()) return 0;\\n        for (uint256 i; i < store._queue.length(); i++) {\\n            uint256 tm = uint256(store._queue.at(i));\\n            if (tm <= untilTm) {\\n                amount += store._amounts[store._queue.at(i)];\\n                if (tm == untilTm) break;\\n            } else {\\n                break;\\n            }\\n        }\\n    }\\n\\n    // @dev\\n    // NonIncluded\\n    // including current TM since balanceUntil includes the current timestamp\\n    function balanceFrom(Store storage store, uint256 fromTm) internal view returns (uint256) {\\n        return store._balance - balanceUntil(store, fromTm);\\n    }\\n\\n    function balance(Store storage store) internal view returns (uint256) {\\n        return store._balance;\\n    }\\n\\n    // ===================================\\n    // PRIVATE FUNCTIONS\\n    // ===================================\\n\\n    // We have to be sure that we know the key to execute this function\\n    function _moveFront(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 from,\\n        uint256 to\\n    ) internal {\\n        if (amount == uint256(0)) return;\\n        Deposit memory _back = _popBack(store);\\n        if (_back.timestamp == from) {\\n            if (_back.amount == amount) {\\n                _pushBackOrdered(store, amount, to);\\n            } else if (_back.amount > amount) {\\n                _pushBackOrdered(store, amount, to);\\n                _pushBackOrdered(store, _back.amount - amount, _back.timestamp);\\n            } else if (amount > _back.amount) {\\n                // amount is bigger than current\\n                _pushBackOrdered(store, _back.amount, to);\\n                // TODO: I do not understand this condition\\n                // Should be something like\\n                // not empty, but pop back already fails on empty\\n                // require(uint256(store._queue.back()) != from, \\\"_moveFront: OutOfBounds\\\");\\n                _moveFront(store, amount - _back.amount, uint256(store._queue.back()), to);\\n            }\\n        } else {\\n            _moveFront(store, amount, from, to);\\n            _pushBackOrdered(store, _back.amount, _back.timestamp);\\n        }\\n    }\\n\\n    function _moveBack(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 from,\\n        uint256 to\\n    ) internal {\\n        Deposit memory _front = _popFront(store);\\n        if (_front.timestamp == from) {\\n            if (_front.amount == amount) {\\n                // TODO: this should use pushFrontOrdered\\n                _pushFrontOrdered(store, amount, to);\\n            } else if (_front.amount > amount) {\\n                _pushFrontOrdered(store, amount, to);\\n                _pushFrontOrdered(store, _front.amount - amount, _front.timestamp);\\n            } else {\\n                // amount is bigger than current\\n                _pushFrontOrdered(store, _front.amount, to);\\n                // TODO: review what condition I was trying to enfore here\\n                // require(uint256(store._queue.front()) != from, \\\"OrderedStakeLib: OutOfBounds\\\");\\n                _moveBack(store, amount - _front.amount, uint256(store._queue.front()), to);\\n            }\\n        } else {\\n            _moveBack(store, amount, from, to);\\n            _pushBackOrdered(store, _front.amount, _front.timestamp);\\n        }\\n    }\\n\\n    function _pushBackOrdered(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 timestamp\\n    ) internal {\\n        if (store._queue.empty()) {\\n            _pushBack(store, amount, timestamp);\\n        } else {\\n            uint256 backTm = uint256(store._queue.back());\\n            if (backTm < timestamp) {\\n                _pushBack(store, amount, timestamp);\\n            } else if (backTm == timestamp) {\\n                _addBalanceTo(store, amount, timestamp);\\n            } else {\\n                bytes32 last = store._queue.popBack();\\n                _pushBackOrdered(store, amount, timestamp);\\n                store._queue.pushBack(last);\\n            }\\n        }\\n    }\\n\\n    function _pushFrontOrdered(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 timestamp\\n    ) internal {\\n        if (store._queue.empty()) {\\n            _pushFront(store, amount, timestamp);\\n        } else {\\n            uint256 frontTm = uint256(store._queue.front());\\n            if (frontTm > timestamp) {\\n                _pushFront(store, amount, timestamp);\\n            } else if (frontTm == timestamp) {\\n                _addBalanceTo(store, amount, timestamp);\\n            } else {\\n                bytes32 first = store._queue.popFront();\\n                _pushFrontOrdered(store, amount, timestamp);\\n                store._queue.pushFront(first);\\n            }\\n        }\\n    }\\n\\n    function _popFront(Store storage store) internal returns (Deposit memory deposit) {\\n        bytes32 key = store._queue.popFront();\\n        uint256 val = store._amounts[key];\\n        delete store._amounts[key];\\n        store._balance -= val;\\n        deposit.timestamp = uint256(key);\\n        deposit.amount = val;\\n    }\\n\\n    function _pushFront(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 timestamp\\n    ) internal {\\n        bytes32 key = bytes32(timestamp);\\n        store._queue.pushFront(key);\\n        store._amounts[key] = amount;\\n        store._balance += amount;\\n    }\\n\\n    function _popBack(Store storage store) internal returns (Deposit memory deposit) {\\n        bytes32 key = store._queue.popBack();\\n        deposit.timestamp = uint256(key);\\n        deposit.amount = store._amounts[key];\\n        store._balance -= deposit.amount;\\n        delete store._amounts[key];\\n    }\\n\\n    // PRIVATE do not use use _pushBackOrdered instead\\n    function _pushBack(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 timestamp\\n    ) internal {\\n        bytes32 key = bytes32(timestamp);\\n        require(store._amounts[key] == uint256(0), \\\"OrderedStakeLib: CAN NOT OVERRIDE TIMESTAMPS\\\");\\n        store._queue.pushBack(key);\\n        store._amounts[key] = amount;\\n        store._balance += amount;\\n    }\\n\\n    function _addBalanceTo(\\n        Store storage store,\\n        uint256 amount,\\n        uint256 timestamp\\n    ) internal {\\n        bytes32 key = bytes32(timestamp);\\n        require(store._amounts[key] != uint256(0), \\\"OrderedStakeLib: Trying to update empty\\\");\\n        store._amounts[key] += amount;\\n        store._balance += amount;\\n    }\\n}\\n\",\"keccak256\":\"0xd3b5073c7ee2e93f4ceb921a55cff6009bf027774bff97e83f95a23c2cd44447\",\"license\":\"MIT\"},\"src/diamond/libraries/StakeLibV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./OrderedStakeLib.sol\\\";\\n\\nlibrary StakeLibV2 {\\n    using SafeERC20 for IERC20;\\n    using OrderedStakeLib for OrderedStakeLib.Store;\\n\\n    event DepositedTokens(address account, uint256 amount);\\n    event WithdrawnTokens(address account, uint256 amount);\\n\\n    uint256 constant ONE_YEAR = 365 * 86400;\\n\\n    // ONLY MEMORY\\n    struct Context {\\n        address account;\\n        IERC20 token;\\n        uint256 requiredBalance;\\n    }\\n    struct BookingContext {\\n        address account;\\n        IERC20 token;\\n        uint256 requiredBalance;\\n        uint256 initYearTm;\\n        uint256 endYearTm;\\n    }\\n\\n    function handleBooking(\\n        BookingContext memory context,\\n        OrderedStakeLib.Store storage store,\\n        uint256 amount,\\n        uint256 timestamp\\n    ) internal {\\n        uint256 nextYearsBalance = store.balanceFrom(context.endYearTm);\\n        if (nextYearsBalance >= context.requiredBalance) return;\\n\\n        uint256 required = amount;\\n        required -= nextYearsBalance;\\n\\n        uint256 prevYearsBalance = store.balanceUntil(context.initYearTm);\\n        if (prevYearsBalance >= required) {\\n            // move from the past\\n            store.moveBack(required, store.front().timestamp, timestamp);\\n            return;\\n        }\\n        if (prevYearsBalance > uint256(0)) {\\n            // move all prevYearsBalance\\n            store.moveBack(prevYearsBalance, store.front().timestamp, timestamp);\\n            required -= prevYearsBalance;\\n        }\\n\\n        // rest tranfer\\n        store.push(required, timestamp);\\n        context.token.safeTransferFrom(context.account, address(this), required);\\n    }\\n\\n    function handleCancelation(\\n        BookingContext memory context,\\n        OrderedStakeLib.Store storage store,\\n        uint256 amount,\\n        uint256 timestamp\\n    ) internal {\\n        uint256 yearBalance = store.balanceFromTo(context.initYearTm, context.endYearTm);\\n        if (yearBalance == 0) return;\\n        uint256 toMove;\\n        if (yearBalance >= amount) {\\n            toMove = amount;\\n        } else {\\n            toMove = yearBalance;\\n        }\\n\\n        store.moveFrontRanged(toMove, context.endYearTm, timestamp - ONE_YEAR);\\n    }\\n\\n    function remove(\\n        Context memory context,\\n        OrderedStakeLib.Store storage store,\\n        uint256 requested\\n    ) internal {\\n        _remove(context, store, requested);\\n    }\\n\\n    function restakeOrDepositAt(\\n        Context memory context,\\n        OrderedStakeLib.Store storage store,\\n        uint256 requested,\\n        uint256 tm\\n    ) internal {\\n        uint256 releasableTm = tm - ONE_YEAR;\\n        uint256 restakeable = store.balanceUntil(releasableTm);\\n        if (restakeable >= requested) {\\n            // No need to transfer more funds\\n            store.takeUntil(requested, releasableTm);\\n            store.push(requested, tm);\\n        } else {\\n            if (restakeable > uint256(0)) {\\n                // reappend releasable tokens\\n                store.takeUntil(restakeable, releasableTm);\\n                store.push(restakeable, tm);\\n            }\\n            uint256 toDeposit = requested - restakeable;\\n            // get the rest from the external account\\n            store.push(toDeposit, tm);\\n            context.token.safeTransferFrom(context.account, address(this), toDeposit);\\n            emit DepositedTokens(context.account, toDeposit);\\n        }\\n    }\\n\\n    function takeMax(Context memory context, OrderedStakeLib.Store storage store) internal returns (uint256) {\\n        uint256 amount = releasable(context, store);\\n\\n        if (amount > 0) {\\n            _remove(context, store, amount);\\n        }\\n        return amount;\\n    }\\n\\n    function _remove(\\n        Context memory context,\\n        OrderedStakeLib.Store storage store,\\n        uint256 requested\\n    ) internal {\\n        store.takeUntil(requested, _currentReleaseTimestamp(context));\\n        context.token.safeTransfer(context.account, requested);\\n        emit WithdrawnTokens(context.account, requested);\\n    }\\n\\n    function locked(Context memory context, OrderedStakeLib.Store storage store) internal view returns (uint256) {\\n        return store.balanceFrom(_currentReleaseTimestamp(context));\\n    }\\n\\n    function releasable(Context memory context, OrderedStakeLib.Store storage store) internal view returns (uint256) {\\n        return store.balanceUntil(_currentReleaseTimestamp(context));\\n    }\\n\\n    function lockedAt(\\n        Context memory context,\\n        OrderedStakeLib.Store storage store,\\n        uint256 at\\n    ) internal view returns (uint256) {\\n        return store.balanceFrom(_releaseTimestampAt(context, at));\\n    }\\n\\n    function releasableAt(\\n        Context memory context,\\n        OrderedStakeLib.Store storage store,\\n        uint256 at\\n    ) internal view returns (uint256) {\\n        return store.balanceUntil(_releaseTimestampAt(context, at));\\n    }\\n\\n    function restakeMax(Context memory context, OrderedStakeLib.Store storage store) internal returns (uint256) {\\n        uint256 amount = store.balanceUntil(_currentReleaseTimestamp(context));\\n        if (amount > 0) {\\n            store.takeUntil(amount, _currentReleaseTimestamp(context));\\n            store.push(amount, block.timestamp);\\n        }\\n        return amount;\\n    }\\n\\n    function restakeAmount(\\n        Context memory context,\\n        OrderedStakeLib.Store storage store,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        store.takeUntil(amount, _currentReleaseTimestamp(context));\\n        store.push(amount, block.timestamp);\\n        return amount;\\n    }\\n\\n    // @dev\\n    // DO NOT USE IN SEND FUNCTIONS\\n    function deposits(OrderedStakeLib.Store storage store) internal view returns (OrderedStakeLib.Deposit[] memory) {\\n        return store.list();\\n    }\\n\\n    function balance(OrderedStakeLib.Store storage store) internal view returns (uint256) {\\n        return store.balance();\\n    }\\n\\n    // function buildContext(address account, IERC20 token, uint256 lockingTimePeriod) returns\\n    function add(\\n        Context memory context,\\n        OrderedStakeLib.Store storage store,\\n        uint256 amount\\n    ) internal {\\n        _addAt(context, store, amount, block.timestamp);\\n        emit DepositedTokens(context.account, amount);\\n    }\\n\\n    // =========================================\\n    // PRIVATE FUNCTIONS\\n    // =========================================\\n\\n    function _currentReleaseTimestamp(Context memory context) internal view returns (uint256) {\\n        return _releaseTimestampAt(context, block.timestamp);\\n    }\\n\\n    function _releaseTimestampAt(Context memory, uint256 at) internal pure returns (uint256) {\\n        return at - ONE_YEAR;\\n    }\\n\\n    function _addAt(\\n        Context memory context,\\n        OrderedStakeLib.Store storage store,\\n        uint256 amount,\\n        uint256 timestamp\\n    ) internal {\\n        store.push(amount, timestamp);\\n        context.token.safeTransferFrom(context.account, address(this), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x79ccfb66a9d06cd175af6f738651db1b153098995179191432bbef3c85d86c82\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612721806100206000396000f3fe608060405234801561001057600080fd5b50600436106102ad5760003560e01c8063715018a61161017b578063a9059cbb116100d8578063dd62ed3e1161008c578063f0307fd711610071578063f0307fd714610578578063f2fde38b1461058b578063f542033f1461059e57600080fd5b8063dd62ed3e1461052e578063e30c39781461056757600080fd5b8063ad84e871116100bd578063ad84e871146104f3578063d4d7b19a146104fc578063d7050f071461051f57600080fd5b8063a9059cbb146104cd578063a9e76193146104e057600080fd5b80638c5884c11161012f57806395d89b411161011457806395d89b411461049f5780639a3cac6a146104a7578063a457c2d7146104ba57600080fd5b80638c5884c1146104865780638da5cb5b1461048e57600080fd5b80637969be6b116101605780637969be6b1461046357806379ba50971461046b5780637e9d2ac11461047357600080fd5b8063715018a6146104485780637235ab291461045057600080fd5b806323b872dd116102295780634dd85d85116101dd5780636b6eaa06116101c25780636b6eaa061461040f5780636f1066a11461042257806370a082311461043557600080fd5b80634dd85d85146103e55780635d2ece641461040557600080fd5b8063313ce5671161020e578063313ce567146103b057806339509351146103bf5780633cf1d874146103d257600080fd5b806323b872dd1461038a5780632a11ced01461039d57600080fd5b80630ec6a2621161028057806318160ddd1161026557806318160ddd1461034d5780631e01aa93146103555780632131c68c1461035f57600080fd5b80630ec6a26214610325578063156e29f61461033857600080fd5b806303579309146102b257806306fdde03146102e5578063095ea7b3146102fa5780630c7005ea1461031d575b600080fd5b6102d26102c03660046120ba565b60cb6020526000908152604090205481565b6040519081526020015b60405180910390f35b6102ed6105b1565b6040516102dc9190612122565b61030d610308366004612135565b610643565b60405190151581526020016102dc565b6102d261065d565b6102d26103333660046120ba565b61066f565b61034b61034636600461215f565b61068d565b005b6102d26106a5565b6102d2620186a081565b60c954610372906001600160a01b031681565b6040516001600160a01b0390911681526020016102dc565b61030d610398366004612192565b610708565b6103726103ab3660046121ce565b61073c565b604051601281526020016102dc565b61030d6103cd366004612135565b610766565b6102d26103e03660046121ce565b6107a5565b6102d26103f33660046120ba565b60cc6020526000908152604090205481565b6102d26243225f81565b61034b61041d3660046121ce565b610841565b6102d26104303660046121e7565b6108dc565b6102d26104433660046120ba565b610b2f565b61034b610b3a565b6102d261045e3660046121ce565b610b4e565b6102d2610ba4565b61034b610baf565b61034b6104813660046120ba565b610c3d565b6102d2600981565b6065546001600160a01b0316610372565b6102ed610ca8565b61034b6104b53660046120ba565b610cb7565b61030d6104c8366004612135565b610d7e565b61030d6104db366004612135565b610e33565b61034b6104ee36600461226d565b610e41565b6102d260ca5481565b61030d61050a3660046120ba565b60ce6020526000908152604090205460ff1681565b6102d2670de0b6b3a764000081565b6102d261053c3660046122e2565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6097546001600160a01b0316610372565b6102d2610586366004612315565b610f02565b61034b6105993660046120ba565b610f77565b61034b6105ac3660046123da565b610ff5565b6060603680546105c090612456565b80601f01602080910402602001604051908101604052809291908181526020018280546105ec90612456565b80156106395780601f1061060e57610100808354040283529160200191610639565b820191906000526020600020905b81548152906001019060200180831161061c57829003601f168201915b5050505050905090565b60003361065181858561111d565b60019150505b92915050565b600061066a60ca546107a5565b905090565b6001600160a01b038116600090815260336020526040812054610657565b61069561114f565b6106a08383836112d6565b505050565b60cd54600090815b81811015610703576106e560cd82815481106106cb576106cb612491565b6000918252602090912001546001600160a01b0316610b2f565b6106ef90846124bd565b9250806106fb816124d5565b9150506106ad565b505090565b60006040517f8cd22d1900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cd818154811061074c57600080fd5b6000918252602090912001546001600160a01b0316905081565b3360008181526034602090815260408083206001600160a01b038716845290915281205490919061065190829086906107a09087906124bd565b61111d565b6000806107b46009600a6125d4565b6107c6670de0b6b3a7640000856125e0565b6107d091906125ff565b905060006107e682670de0b6b3a7640000612621565b905060006107f68261016d6113b7565b9050600061080c82670de0b6b3a7640000612621565b9050670de0b6b3a76400006108236009600a6125d4565b61082d90836125e0565b61083791906125ff565b9695505050505050565b610849611413565b6243225f811115610897576040517f3ea7a580000000000000000000000000000000000000000000000000000000008152600481018290526243225f60248201526044015b60405180910390fd5b60ca80549082905560408051828152602081018490527f4003165e6e939d07c2c57561dd7b9b6b34284496fcdaf4cee19c0103bac44531910160405180910390a15050565b60006108e661114f565b818061091e576040517f4da5dad800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060005b83811015610a2d5786868281811061093e5761093e612491565b905060400201602001358361095391906124bd565b9250600061099788888481811061096c5761096c612491565b9050604002016020013589898581811061098857610988612491565b90506040020160000135610f02565b90506109a381846124bd565b9250886001600160a01b03167f7b6b5e456ceba756b7ddf5dbe45b0a5dec9ddf6bc9a9fff13f955241d033489b8989858181106109e2576109e2612491565b90506040020160200135838b8b878181106109ff576109ff612491565b604080519586526020860194909452830291909101358383015250519081900360600190a250600101610924565b50610a378761146d565b6001600160a01b038816600090815260cc6020908152604080832084905560cb9091529020429055935083811115610afa576000610a758583612621565b9050620186a0811115610ad7578282610a8d8a61066f565b6040517fc506bc270000000000000000000000000000000000000000000000000000000081526004810193909352602483019190915260448201526064810186905260840161088e565b506001600160a01b038716600090815260cc602052604081208190559350610b1b565b6001600160a01b038716600090815260cc6020526040902093819003938490555b610b2587836114eb565b5050509392505050565b60006106578261146d565b610b42611413565b610b4c6000611662565b565b60008082610b5e6009600a6125d4565b610b689190612621565b90506000610b786009600a6125d4565b610b8a670de0b6b3a7640000846125e0565b610b9491906125ff565b905060006107f68261016d611688565b600061066a60355490565b60975433906001600160a01b03168114610c315760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f74207468652060448201527f6e6577206f776e65720000000000000000000000000000000000000000000000606482015260840161088e565b610c3a81611662565b50565b610c45611413565b610c5781610c528361066f565b6114eb565b6001600160a01b038116600081815260cc6020908152604080832083905560cb909152808220429055517f82011752a4fc4085ae0a2f52d77c8e017677c8cbbde3292a7e4daa061bd517bb9190a250565b6060603780546105c090612456565b610cbf611413565b6001600160a01b0381161580610cdd57506001600160a01b0381163b155b15610d1f576040517fff28c19a0000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260240161088e565b60c980546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907fd5b3b0e6e0098a82fa04cf04faff9109f98389a10c80f20eb7186b927416894690600090a35050565b3360008181526034602090815260408083206001600160a01b038716845290915281205490919083811015610e1b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015260840161088e565b610e28828686840361111d565b506001949350505050565b600033610651818585611789565b8080610e79576040517fa288032100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e8161114f565b60005b81811015610efc57610ef4848483818110610ea157610ea1612491565b610eb792602060609092020190810191506120ba565b858584818110610ec957610ec9612491565b90506060020160200135868685818110610ee557610ee5612491565b905060600201604001356112d6565b600101610e84565b50505050565b600081610f10575081610657565b6000610f1e6009600a6125d4565b670de0b6b3a764000060ca54610f3491906125e0565b610f3e91906125ff565b90506000610f5482670de0b6b3a7640000612621565b90506000610f6282866113b7565b90506108378682670de0b6b3a7640000611988565b610f7f611413565b609780546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff199091168117909155610fbd6065546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600054610100900460ff16158080156110155750600054600160ff909116105b8061102f5750303b15801561102f575060005460ff166001145b6110a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161088e565b6000805460ff1916600117905580156110c4576000805461ff0019166101001790555b6110d0858585856119ae565b8015611116576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6040517f2028747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160028082526060820183526000926020830190803683370190505090507f7983d5b975f446c722b50a0d87a7ffc796b21c3205166f2727fb8b95675c1b0a816000815181106111a4576111a4612491565b6020026020010181815250507fefa2b23cd542346b38207721a79c51a70b01c47249f50a351696d8f313a8fe1c816001815181106111e4576111e4612491565b602090810291909101015260408051600280825260608201909252600091816020015b60608152602001906001900390816112075790505090506040518060400160405280601581526020017f424f4f4b494e475f504c4154464f524d5f524f4c4500000000000000000000008152508160008151811061126757611267612491565b60200260200101819052506040518060400160405280601481526020017f424f4f4b494e475f4d414e414745525f524f4c45000000000000000000000000815250816001815181106112bb576112bb612491565b60200260200101819052506112d282826001611a35565b5050565b8161130d576040517f5fc8b14300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61131683611b81565b5060006113238383610f02565b60408051858152602081018390529081018490529091506001600160a01b038516907fa6a791bf1376cdbad5a2b60701f39298083c280d379caf46c3d8c5c51b12895f9060600160405180910390a28061137c8561146d565b61138691906124bd565b6001600160a01b038516600090815260cc602090815260408083209390935560cb905220429055610efc8484611c1c565b6000670de0b6b3a76400005b821561140c5782600116600114156113eb576113e88185670de0b6b3a7640000611988565b90505b6113fe8485670de0b6b3a7640000611988565b9350600183901c92506113c3565b9392505050565b6065546001600160a01b03163314610b4c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161088e565b6001600160a01b038116600090815260cb6020526040812054806114945750600092915050565b6001600160a01b038316600090815260cc6020526040902054806114bc575060009392505050565b6000620151806114cc8442612621565b6114d691906125ff565b90506114e28282610f02565b95945050505050565b6001600160a01b0382166115675760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161088e565b61157382600083611ce9565b6001600160a01b038216600090815260336020526040902054818110156116025760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f6365000000000000000000000000000000000000000000000000000000000000606482015260840161088e565b6001600160a01b03831660008181526033602090815260408083208686039055603580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b6097805473ffffffffffffffffffffffffffffffffffffffff19169055610c3a81611d40565b6000670de0b6b3a7640000836116a2576000915050610657565b826116ae579050610657565b82600114156116c05783915050610657565b600081815b8183111580156116de575060016116dc8484612621565b115b156117375760026116ef83856124bd565b6116f991906125ff565b9050600061170782886113b7565b90508781141561171d5750935061065792505050565b8781101561172d57819350611731565b8192505b506116c5565b600061174384886113b7565b9050600061175184896113b7565b905061175d8982612621565b611767838b612621565b101561177b57849650505050505050610657565b839650505050505050610657565b6001600160a01b0383166118055760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161088e565b6001600160a01b0382166118815760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161088e565b61188c838383611ce9565b6001600160a01b0383166000908152603360205260409020548181101561191b5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161088e565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061197b9086815260200190565b60405180910390a3610efc565b828202831584820484141782026119a75763ad251c276000526004601cfd5b0492915050565b600054610100900460ff16611a195760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161088e565b611a238484611d9f565b611a2b611e14565b610efc8282611e87565b60c9546001600160a01b0316818015611a5857506065546001600160a01b031633145b15611a635750505050565b835160005b81811015611b4a57826001600160a01b03166391d14854878381518110611a9157611a91612491565b6020026020010151611aa03390565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526001600160a01b0316602482015260440160206040518083038186803b158015611afd57600080fd5b505afa158015611b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b359190612638565b15611b4257505050505050565b600101611a68565b5033846040517f4de462e900000000000000000000000000000000000000000000000000000000815260040161088e92919061265a565b6001600160a01b038116600090815260ce602052604081205460ff16611c1757506001600160a01b038116600081815260ce60205260408120805460ff1916600190811790915560cd8054808301825592527f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2e909101805473ffffffffffffffffffffffffffffffffffffffff19169092179091555b919050565b6001600160a01b038216611c725760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161088e565b611c7e60008383611ce9565b8060356000828254611c9091906124bd565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b03831615801590611d0957506001600160a01b03821615155b156106a0576040517f8cd22d1900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16611e0a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161088e565b6112d28282611f04565b600054610100900460ff16611e7f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161088e565b610b4c611f96565b600054610100900460ff16611ef25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161088e565b611efb82610cb7565b6112d281610841565b600054610100900460ff16611f6f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161088e565b8151611f8290603690602085019061200a565b5080516106a090603790602084019061200a565b600054610100900460ff166120015760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161088e565b610b4c33611662565b82805461201690612456565b90600052602060002090601f016020900481019282612038576000855561207e565b82601f1061205157805160ff191683800117855561207e565b8280016001018555821561207e579182015b8281111561207e578251825591602001919060010190612063565b5061208a92915061208e565b5090565b5b8082111561208a576000815560010161208f565b80356001600160a01b0381168114611c1757600080fd5b6000602082840312156120cc57600080fd5b61140c826120a3565b6000815180845260005b818110156120fb576020818501810151868301820152016120df565b8181111561210d576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061140c60208301846120d5565b6000806040838503121561214857600080fd5b612151836120a3565b946020939093013593505050565b60008060006060848603121561217457600080fd5b61217d846120a3565b95602085013595506040909401359392505050565b6000806000606084860312156121a757600080fd5b6121b0846120a3565b92506121be602085016120a3565b9150604084013590509250925092565b6000602082840312156121e057600080fd5b5035919050565b6000806000604084860312156121fc57600080fd5b612205846120a3565b9250602084013567ffffffffffffffff8082111561222257600080fd5b818601915086601f83011261223657600080fd5b81358181111561224557600080fd5b8760208260061b850101111561225a57600080fd5b6020830194508093505050509250925092565b6000806020838503121561228057600080fd5b823567ffffffffffffffff8082111561229857600080fd5b818501915085601f8301126122ac57600080fd5b8135818111156122bb57600080fd5b8660206060830285010111156122d057600080fd5b60209290920196919550909350505050565b600080604083850312156122f557600080fd5b6122fe836120a3565b915061230c602084016120a3565b90509250929050565b6000806040838503121561232857600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261235e57600080fd5b813567ffffffffffffffff8082111561237957612379612337565b604051601f8301601f19908116603f011681019082821181831017156123a1576123a1612337565b816040528381528660208588010111156123ba57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080608085870312156123f057600080fd5b843567ffffffffffffffff8082111561240857600080fd5b6124148883890161234d565b9550602087013591508082111561242a57600080fd5b506124378782880161234d565b935050612446604086016120a3565b9396929550929360600135925050565b600181811c9082168061246a57607f821691505b6020821081141561248b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156124d0576124d06124a7565b500190565b60006000198214156124e9576124e96124a7565b5060010190565b600181815b8085111561252b578160001904821115612511576125116124a7565b8085161561251e57918102915b93841c93908002906124f5565b509250929050565b60008261254257506001610657565b8161254f57506000610657565b8160018114612565576002811461256f5761258b565b6001915050610657565b60ff841115612580576125806124a7565b50506001821b610657565b5060208310610133831016604e8410600b84101617156125ae575081810a610657565b6125b883836124f0565b80600019048211156125cc576125cc6124a7565b029392505050565b600061140c8383612533565b60008160001904831182151516156125fa576125fa6124a7565b500290565b60008261261c57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015612633576126336124a7565b500390565b60006020828403121561264a57600080fd5b8151801515811461140c57600080fd5b6000604082016001600160a01b0385168352602060408185015281855180845260608601915060608160051b870101935082870160005b828110156126dd577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08887030184526126cb8683516120d5565b95509284019290840190600101612691565b50939897505050505050505056fea264697066735822122002343d1a0aa1b386dbcc4c1f4f7523ae803f50ade90633e880e3937e5f0b102a64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102ad5760003560e01c8063715018a61161017b578063a9059cbb116100d8578063dd62ed3e1161008c578063f0307fd711610071578063f0307fd714610578578063f2fde38b1461058b578063f542033f1461059e57600080fd5b8063dd62ed3e1461052e578063e30c39781461056757600080fd5b8063ad84e871116100bd578063ad84e871146104f3578063d4d7b19a146104fc578063d7050f071461051f57600080fd5b8063a9059cbb146104cd578063a9e76193146104e057600080fd5b80638c5884c11161012f57806395d89b411161011457806395d89b411461049f5780639a3cac6a146104a7578063a457c2d7146104ba57600080fd5b80638c5884c1146104865780638da5cb5b1461048e57600080fd5b80637969be6b116101605780637969be6b1461046357806379ba50971461046b5780637e9d2ac11461047357600080fd5b8063715018a6146104485780637235ab291461045057600080fd5b806323b872dd116102295780634dd85d85116101dd5780636b6eaa06116101c25780636b6eaa061461040f5780636f1066a11461042257806370a082311461043557600080fd5b80634dd85d85146103e55780635d2ece641461040557600080fd5b8063313ce5671161020e578063313ce567146103b057806339509351146103bf5780633cf1d874146103d257600080fd5b806323b872dd1461038a5780632a11ced01461039d57600080fd5b80630ec6a2621161028057806318160ddd1161026557806318160ddd1461034d5780631e01aa93146103555780632131c68c1461035f57600080fd5b80630ec6a26214610325578063156e29f61461033857600080fd5b806303579309146102b257806306fdde03146102e5578063095ea7b3146102fa5780630c7005ea1461031d575b600080fd5b6102d26102c03660046120ba565b60cb6020526000908152604090205481565b6040519081526020015b60405180910390f35b6102ed6105b1565b6040516102dc9190612122565b61030d610308366004612135565b610643565b60405190151581526020016102dc565b6102d261065d565b6102d26103333660046120ba565b61066f565b61034b61034636600461215f565b61068d565b005b6102d26106a5565b6102d2620186a081565b60c954610372906001600160a01b031681565b6040516001600160a01b0390911681526020016102dc565b61030d610398366004612192565b610708565b6103726103ab3660046121ce565b61073c565b604051601281526020016102dc565b61030d6103cd366004612135565b610766565b6102d26103e03660046121ce565b6107a5565b6102d26103f33660046120ba565b60cc6020526000908152604090205481565b6102d26243225f81565b61034b61041d3660046121ce565b610841565b6102d26104303660046121e7565b6108dc565b6102d26104433660046120ba565b610b2f565b61034b610b3a565b6102d261045e3660046121ce565b610b4e565b6102d2610ba4565b61034b610baf565b61034b6104813660046120ba565b610c3d565b6102d2600981565b6065546001600160a01b0316610372565b6102ed610ca8565b61034b6104b53660046120ba565b610cb7565b61030d6104c8366004612135565b610d7e565b61030d6104db366004612135565b610e33565b61034b6104ee36600461226d565b610e41565b6102d260ca5481565b61030d61050a3660046120ba565b60ce6020526000908152604090205460ff1681565b6102d2670de0b6b3a764000081565b6102d261053c3660046122e2565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6097546001600160a01b0316610372565b6102d2610586366004612315565b610f02565b61034b6105993660046120ba565b610f77565b61034b6105ac3660046123da565b610ff5565b6060603680546105c090612456565b80601f01602080910402602001604051908101604052809291908181526020018280546105ec90612456565b80156106395780601f1061060e57610100808354040283529160200191610639565b820191906000526020600020905b81548152906001019060200180831161061c57829003601f168201915b5050505050905090565b60003361065181858561111d565b60019150505b92915050565b600061066a60ca546107a5565b905090565b6001600160a01b038116600090815260336020526040812054610657565b61069561114f565b6106a08383836112d6565b505050565b60cd54600090815b81811015610703576106e560cd82815481106106cb576106cb612491565b6000918252602090912001546001600160a01b0316610b2f565b6106ef90846124bd565b9250806106fb816124d5565b9150506106ad565b505090565b60006040517f8cd22d1900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cd818154811061074c57600080fd5b6000918252602090912001546001600160a01b0316905081565b3360008181526034602090815260408083206001600160a01b038716845290915281205490919061065190829086906107a09087906124bd565b61111d565b6000806107b46009600a6125d4565b6107c6670de0b6b3a7640000856125e0565b6107d091906125ff565b905060006107e682670de0b6b3a7640000612621565b905060006107f68261016d6113b7565b9050600061080c82670de0b6b3a7640000612621565b9050670de0b6b3a76400006108236009600a6125d4565b61082d90836125e0565b61083791906125ff565b9695505050505050565b610849611413565b6243225f811115610897576040517f3ea7a580000000000000000000000000000000000000000000000000000000008152600481018290526243225f60248201526044015b60405180910390fd5b60ca80549082905560408051828152602081018490527f4003165e6e939d07c2c57561dd7b9b6b34284496fcdaf4cee19c0103bac44531910160405180910390a15050565b60006108e661114f565b818061091e576040517f4da5dad800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060005b83811015610a2d5786868281811061093e5761093e612491565b905060400201602001358361095391906124bd565b9250600061099788888481811061096c5761096c612491565b9050604002016020013589898581811061098857610988612491565b90506040020160000135610f02565b90506109a381846124bd565b9250886001600160a01b03167f7b6b5e456ceba756b7ddf5dbe45b0a5dec9ddf6bc9a9fff13f955241d033489b8989858181106109e2576109e2612491565b90506040020160200135838b8b878181106109ff576109ff612491565b604080519586526020860194909452830291909101358383015250519081900360600190a250600101610924565b50610a378761146d565b6001600160a01b038816600090815260cc6020908152604080832084905560cb9091529020429055935083811115610afa576000610a758583612621565b9050620186a0811115610ad7578282610a8d8a61066f565b6040517fc506bc270000000000000000000000000000000000000000000000000000000081526004810193909352602483019190915260448201526064810186905260840161088e565b506001600160a01b038716600090815260cc602052604081208190559350610b1b565b6001600160a01b038716600090815260cc6020526040902093819003938490555b610b2587836114eb565b5050509392505050565b60006106578261146d565b610b42611413565b610b4c6000611662565b565b60008082610b5e6009600a6125d4565b610b689190612621565b90506000610b786009600a6125d4565b610b8a670de0b6b3a7640000846125e0565b610b9491906125ff565b905060006107f68261016d611688565b600061066a60355490565b60975433906001600160a01b03168114610c315760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f74207468652060448201527f6e6577206f776e65720000000000000000000000000000000000000000000000606482015260840161088e565b610c3a81611662565b50565b610c45611413565b610c5781610c528361066f565b6114eb565b6001600160a01b038116600081815260cc6020908152604080832083905560cb909152808220429055517f82011752a4fc4085ae0a2f52d77c8e017677c8cbbde3292a7e4daa061bd517bb9190a250565b6060603780546105c090612456565b610cbf611413565b6001600160a01b0381161580610cdd57506001600160a01b0381163b155b15610d1f576040517fff28c19a0000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260240161088e565b60c980546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907fd5b3b0e6e0098a82fa04cf04faff9109f98389a10c80f20eb7186b927416894690600090a35050565b3360008181526034602090815260408083206001600160a01b038716845290915281205490919083811015610e1b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015260840161088e565b610e28828686840361111d565b506001949350505050565b600033610651818585611789565b8080610e79576040517fa288032100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e8161114f565b60005b81811015610efc57610ef4848483818110610ea157610ea1612491565b610eb792602060609092020190810191506120ba565b858584818110610ec957610ec9612491565b90506060020160200135868685818110610ee557610ee5612491565b905060600201604001356112d6565b600101610e84565b50505050565b600081610f10575081610657565b6000610f1e6009600a6125d4565b670de0b6b3a764000060ca54610f3491906125e0565b610f3e91906125ff565b90506000610f5482670de0b6b3a7640000612621565b90506000610f6282866113b7565b90506108378682670de0b6b3a7640000611988565b610f7f611413565b609780546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff199091168117909155610fbd6065546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600054610100900460ff16158080156110155750600054600160ff909116105b8061102f5750303b15801561102f575060005460ff166001145b6110a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161088e565b6000805460ff1916600117905580156110c4576000805461ff0019166101001790555b6110d0858585856119ae565b8015611116576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6040517f2028747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160028082526060820183526000926020830190803683370190505090507f7983d5b975f446c722b50a0d87a7ffc796b21c3205166f2727fb8b95675c1b0a816000815181106111a4576111a4612491565b6020026020010181815250507fefa2b23cd542346b38207721a79c51a70b01c47249f50a351696d8f313a8fe1c816001815181106111e4576111e4612491565b602090810291909101015260408051600280825260608201909252600091816020015b60608152602001906001900390816112075790505090506040518060400160405280601581526020017f424f4f4b494e475f504c4154464f524d5f524f4c4500000000000000000000008152508160008151811061126757611267612491565b60200260200101819052506040518060400160405280601481526020017f424f4f4b494e475f4d414e414745525f524f4c45000000000000000000000000815250816001815181106112bb576112bb612491565b60200260200101819052506112d282826001611a35565b5050565b8161130d576040517f5fc8b14300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61131683611b81565b5060006113238383610f02565b60408051858152602081018390529081018490529091506001600160a01b038516907fa6a791bf1376cdbad5a2b60701f39298083c280d379caf46c3d8c5c51b12895f9060600160405180910390a28061137c8561146d565b61138691906124bd565b6001600160a01b038516600090815260cc602090815260408083209390935560cb905220429055610efc8484611c1c565b6000670de0b6b3a76400005b821561140c5782600116600114156113eb576113e88185670de0b6b3a7640000611988565b90505b6113fe8485670de0b6b3a7640000611988565b9350600183901c92506113c3565b9392505050565b6065546001600160a01b03163314610b4c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161088e565b6001600160a01b038116600090815260cb6020526040812054806114945750600092915050565b6001600160a01b038316600090815260cc6020526040902054806114bc575060009392505050565b6000620151806114cc8442612621565b6114d691906125ff565b90506114e28282610f02565b95945050505050565b6001600160a01b0382166115675760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161088e565b61157382600083611ce9565b6001600160a01b038216600090815260336020526040902054818110156116025760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f6365000000000000000000000000000000000000000000000000000000000000606482015260840161088e565b6001600160a01b03831660008181526033602090815260408083208686039055603580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b6097805473ffffffffffffffffffffffffffffffffffffffff19169055610c3a81611d40565b6000670de0b6b3a7640000836116a2576000915050610657565b826116ae579050610657565b82600114156116c05783915050610657565b600081815b8183111580156116de575060016116dc8484612621565b115b156117375760026116ef83856124bd565b6116f991906125ff565b9050600061170782886113b7565b90508781141561171d5750935061065792505050565b8781101561172d57819350611731565b8192505b506116c5565b600061174384886113b7565b9050600061175184896113b7565b905061175d8982612621565b611767838b612621565b101561177b57849650505050505050610657565b839650505050505050610657565b6001600160a01b0383166118055760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161088e565b6001600160a01b0382166118815760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161088e565b61188c838383611ce9565b6001600160a01b0383166000908152603360205260409020548181101561191b5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161088e565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061197b9086815260200190565b60405180910390a3610efc565b828202831584820484141782026119a75763ad251c276000526004601cfd5b0492915050565b600054610100900460ff16611a195760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161088e565b611a238484611d9f565b611a2b611e14565b610efc8282611e87565b60c9546001600160a01b0316818015611a5857506065546001600160a01b031633145b15611a635750505050565b835160005b81811015611b4a57826001600160a01b03166391d14854878381518110611a9157611a91612491565b6020026020010151611aa03390565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526001600160a01b0316602482015260440160206040518083038186803b158015611afd57600080fd5b505afa158015611b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b359190612638565b15611b4257505050505050565b600101611a68565b5033846040517f4de462e900000000000000000000000000000000000000000000000000000000815260040161088e92919061265a565b6001600160a01b038116600090815260ce602052604081205460ff16611c1757506001600160a01b038116600081815260ce60205260408120805460ff1916600190811790915560cd8054808301825592527f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2e909101805473ffffffffffffffffffffffffffffffffffffffff19169092179091555b919050565b6001600160a01b038216611c725760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161088e565b611c7e60008383611ce9565b8060356000828254611c9091906124bd565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b03831615801590611d0957506001600160a01b03821615155b156106a0576040517f8cd22d1900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16611e0a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161088e565b6112d28282611f04565b600054610100900460ff16611e7f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161088e565b610b4c611f96565b600054610100900460ff16611ef25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161088e565b611efb82610cb7565b6112d281610841565b600054610100900460ff16611f6f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161088e565b8151611f8290603690602085019061200a565b5080516106a090603790602084019061200a565b600054610100900460ff166120015760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161088e565b610b4c33611662565b82805461201690612456565b90600052602060002090601f016020900481019282612038576000855561207e565b82601f1061205157805160ff191683800117855561207e565b8280016001018555821561207e579182015b8281111561207e578251825591602001919060010190612063565b5061208a92915061208e565b5090565b5b8082111561208a576000815560010161208f565b80356001600160a01b0381168114611c1757600080fd5b6000602082840312156120cc57600080fd5b61140c826120a3565b6000815180845260005b818110156120fb576020818501810151868301820152016120df565b8181111561210d576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061140c60208301846120d5565b6000806040838503121561214857600080fd5b612151836120a3565b946020939093013593505050565b60008060006060848603121561217457600080fd5b61217d846120a3565b95602085013595506040909401359392505050565b6000806000606084860312156121a757600080fd5b6121b0846120a3565b92506121be602085016120a3565b9150604084013590509250925092565b6000602082840312156121e057600080fd5b5035919050565b6000806000604084860312156121fc57600080fd5b612205846120a3565b9250602084013567ffffffffffffffff8082111561222257600080fd5b818601915086601f83011261223657600080fd5b81358181111561224557600080fd5b8760208260061b850101111561225a57600080fd5b6020830194508093505050509250925092565b6000806020838503121561228057600080fd5b823567ffffffffffffffff8082111561229857600080fd5b818501915085601f8301126122ac57600080fd5b8135818111156122bb57600080fd5b8660206060830285010111156122d057600080fd5b60209290920196919550909350505050565b600080604083850312156122f557600080fd5b6122fe836120a3565b915061230c602084016120a3565b90509250929050565b6000806040838503121561232857600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261235e57600080fd5b813567ffffffffffffffff8082111561237957612379612337565b604051601f8301601f19908116603f011681019082821181831017156123a1576123a1612337565b816040528381528660208588010111156123ba57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080608085870312156123f057600080fd5b843567ffffffffffffffff8082111561240857600080fd5b6124148883890161234d565b9550602087013591508082111561242a57600080fd5b506124378782880161234d565b935050612446604086016120a3565b9396929550929360600135925050565b600181811c9082168061246a57607f821691505b6020821081141561248b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156124d0576124d06124a7565b500190565b60006000198214156124e9576124e96124a7565b5060010190565b600181815b8085111561252b578160001904821115612511576125116124a7565b8085161561251e57918102915b93841c93908002906124f5565b509250929050565b60008261254257506001610657565b8161254f57506000610657565b8160018114612565576002811461256f5761258b565b6001915050610657565b60ff841115612580576125806124a7565b50506001821b610657565b5060208310610133831016604e8410600b84101617156125ae575081810a610657565b6125b883836124f0565b80600019048211156125cc576125cc6124a7565b029392505050565b600061140c8383612533565b60008160001904831182151516156125fa576125fa6124a7565b500290565b60008261261c57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015612633576126336124a7565b500390565b60006020828403121561264a57600080fd5b8151801515811461140c57600080fd5b6000604082016001600160a01b0385168352602060408185015281855180845260608601915060608160051b870101935082870160005b828110156126dd577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08887030184526126cb8683516120d5565b95509284019290840190600101612691565b50939897505050505050505056fea264697066735822122002343d1a0aa1b386dbcc4c1f4f7523ae803f50ade90633e880e3937e5f0b102a64736f6c63430008090033",
  "devdoc": {
    "details": "The decay functionality is implemented with following logic:          Prerequisites:              - since the PRESENCE token is non-transferrable, the account's balance can only change when:                  - minting                  - burning          The fact that the PRESENCE token is non-transferrable means that we do not need to handle          the balance changes during transfers, but only during the `mint`, `burn` and `balanceOf` functions.          There are 2 additional mappings introduced:              - lastDecayedBalance[account]: this one stores the last calculated decayed balance              - lastDecayedTimestamp[account]: this one stores the timestamp when we last calculated a new decayed balance          Both these mappings are updated only inside the `mint` and `burn` function.          We also override the `balanceOf` function, where we calculate the current decayed balance, using          the 2 mappings `lastDecayedBalance` and `lastDecayedTimestamp`. Additional decay calculation on top of these          2 mappings is necessary inside the `balanceOf` function because the values in these mappings are not regularly updated          so they can contain even e.g. 1 year+ outdated data (if the user did not mint or burn any token during that time),          but inside the `balanceOf` function we want to return the current decayed balance at the time of calling.          Inside `mint` and `burn` we update these 2 mappings to make sure that the decay for each token is calculated correctly.          Example:              - assume ~10% decay per day              1) Mint 1 PRESENCE              2) Wait 2 days              3) Now the balance is ~0.81 PRESENCE              4) Mint 1 PRESENCE, so the total balance is ~1.81 PRESENCE              5) Wait 1 day              6) The final balance is 1.629 PRESENCE          If we would not recalculate the decayed balance on the mint of additional PRESENCE token , at the step 6 we would not know          when each token has been minted. So that's why there are these 2 additional mappings introduced. By recalculating the decayed balance on          every balance change, we do not need to store full history of when each token has been minted, as it's sufficient on balance change to          just recalculate the previous decayed balance and then add the new minted tokens to that.          With burning the situation is a little bit more tricky, as there is a difference if I would like to burn a PRESENCE token          minted 10 days ago or 2 days ago, as the one minted 10 days ago decayed already more than the one 2 days ago. Because of that          it's necessary to pass to the `burn` function also how many days ago the token was minted. Here we assume that the booking platform          will know for which dates it actually wants to burn the PRESENCE tokens, as the burning will most likely happen only when the person          did not stay at the property, despite having the booking.",
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "custom:see": "PresenceToken.calculateDecayedBalance for more info about the calculation",
        "returns": {
          "_0": "Current decayed balance of the user."
        }
      },
      "burn(address,(uint256,uint256)[])": {
        "params": {
          "account": "to burn the PRESENCE tokens for",
          "burnDataArray": "array of struct{amount,daysAgo}. It's necessary to pass the `daysAgo` in order to also          correctly calculate and update the decayed balance (=> PRESENCE token minted 10 days ago is already          more decayed than PRESENCE token minted 2 days ago, so for us to correctly calculate the decayed          balance to burn, we need to know when the PRESENCE token was minted)."
        },
        "returns": {
          "finalBalance": "Account's decayed balance after burning. Useful for e.g. preview of the burn operation to make sure          that the passed burnDataArray makes sense and leads to the desireable result."
        }
      },
      "burnAll(address)": {
        "params": {
          "account": "to burn all the PRESENCE tokens for"
        }
      },
      "calculateDecayForDays(uint256,uint256)": {
        "params": {
          "amount": "The initial amount (with 18 decimals)",
          "daysAgo": "Number of days to calculate decay for, when 0 it returns the `amount`"
        },
        "returns": {
          "_0": "The decayed amount (with 18 decimals)"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getCurrentDecayRatePerYear()": {
        "returns": {
          "_0": "Decay rate per year for currently used decayRatePerDay in contract. The result is multiplied by 10^DECAY_RATE_PER_DAY_DECIMALS"
        }
      },
      "getDecayRatePerDay(uint256)": {
        "params": {
          "decayRatePerYear": "should be multiplied by 10^DECAY_RATE_PER_DAY_DECIMALS, see the getDecayRatePerYear function docs          for more info about how to format this parameter"
        },
        "returns": {
          "_0": "Daily decay rate multiplied by 10^DECAY_RATE_PER_DAY_DECIMALS"
        }
      },
      "getDecayRatePerYear(uint256)": {
        "params": {
          "decayRatePerDay_": "should be multiplied by 10^DECAY_RATE_PER_DAY_DECIMALS          so for example:              a) start with percentage decay per day: 0.028_8617%              b) now we need to convert it to decimal form: 0.028_8617 / 100 == 0.000_288_617              c) now we multiply by the decimals: 0.000_288_617 * 10^DECAY_RATE_PER_DECIMALS == 288_617"
        },
        "returns": {
          "decayRatePerYear": "multiplied by 10^DECAY_RATE_PER_DAY_DECIMALS"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "mint(address,uint256,uint256)": {
        "custom:see": "PresenceToken._mint function docs for description of additions to mint functionality"
      },
      "mintBatch((address,uint256,uint256)[])": {
        "custom:see": "PresenceToken._mint function docs for description of additions to mint functionality"
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDaoAddress(address)": {
        "params": {
          "newDaoAddress": "updated dao address"
        }
      },
      "setDecayRatePerDay(uint256)": {
        "params": {
          "newDecayRatePerDay": "updated decay rate"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "In order to get the decayed balance of each user at the time of calling this function, we need to iterate          over the `holders` array, which makes this function gas expensive. Ideally do not use this inside          state-mutating functions, only in the external getters. I could not change the modifier from `public` to `external`          since the ERC20Upgradeable from OpenZeppelin declares this function with `public` modifier.",
        "returns": {
          "decayedTotalSupply": "decayedTotalSupply"
        }
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "decayRatePerDay": {
        "custom:see": "getDecayRatePerDay function for more info and examples about how to calculate value          for this variable, e.g. for 10% decay rate per year"
      },
      "holders": {
        "details": "necessary for iterating over `lastDecayedBalance` mapping when calculating decayed totalSupply"
      },
      "isHolder": {
        "details": "used for speeding up / gas savings when need to check if the account is in `holders` array"
      }
    },
    "title": "Proof of Presence token with a continous decay functionality. The token is decayed every 24 hours.",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ApproveNotAllowed()": [
        {
          "notice": "Thrown when trying to call approve. Since PresenceToken is non-transferrable, it does not make sense to enable approvals."
        }
      ],
      "InvalidDecayRatePerDay(uint256,uint256)": [
        {
          "notice": "Thrown when trying to set invalid decayRatePerDay."
        }
      ],
      "TransferNotAllowed()": [
        {
          "notice": "Thrown when trying to transfer PresenceToken from one address to another. Only minting and burning is allowed."
        }
      ],
      "Unauthorized(address,string[])": [
        {
          "notice": "Thrown when a function is called by not allowed address."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "MAX_ALLOWED_ROUNDING_ERROR()": {
        "notice": "denominated in wei, used for preventing underflows when small rounding error happens (e.g. during burn)"
      },
      "balanceOf(address)": {
        "notice": "Override of the standard balanceOf function that takes into the account gradual decay of user balance"
      },
      "burn(address,(uint256,uint256)[])": {
        "notice": "Burn PRESENCE tokens for a user.This function can be only called by the owner of the contract, which will be the TDF Multisig."
      },
      "burnAll(address)": {
        "notice": "Burns all tokens for a given account. Useful e.g. in case of blacklisting a person.This function can be only called by the owner of the contract, which will be the TDF Multisig."
      },
      "calculateDecayForDays(uint256,uint256)": {
        "notice": "Calculates decay over a number of days with high precisionBasic formula: [initialAmount] * (1 - [percentageDecayPerDay] / 100)^[numberOfDays]"
      },
      "daoAddress()": {
        "notice": "used for accessing user roles store in DAO + allow DAO setting a decay rate"
      },
      "decayRatePerDay()": {
        "notice": "Holds decimal decay rate per day, the value is padded by DECAY_RATE_PER_DAY_DECIMALSThis value is set on contract init and after that is possible to overwrite by DAO address"
      },
      "getDecayRatePerDay(uint256)": {
        "notice": "DECAY RATE PER YEAR => DECAY RATE PER DAYConverts a yearly decay rate to a daily decay rateBasic formula: 1 - (1 - [percentageDecayPerYear] / 100)^(1/365)to get the decimal representation, divide the result by `10^DECAY_RATE_PER_DAY_DECIMALS`...to get the percentage representation, divide the result by `10^(DECAY_RATE_PER_DAY_DECIMALS - 2)`"
      },
      "getDecayRatePerYear(uint256)": {
        "notice": "DECAY RATE PER DAY =>. DECAY RATE PER YEARConverts a daily decay rate to a yearly decay rateBasic formula: 1 - (1 - [percentageDecayPerDay] / 100)^365to get the decimal representation, divide the result by `10^DECAY_RATE_PER_DAY_DECIMALS`...to get the percentage representation, divide the result by `10^(DECAY_RATE_PER_DAY_DECIMALS - 2)`"
      },
      "lastDecayTimestamp(address)": {
        "notice": "mapping that holds timestamp of last decay... this value is updated either during `mint` or `burn`"
      },
      "lastDecayedBalance(address)": {
        "notice": "mapping that holds last decayed balances... this value is updated (decayed) either during `mint` or `burn`"
      },
      "mintBatch((address,uint256,uint256)[])": {
        "notice": "Batch mint function, possibly useful for saving gas when want to mint PRESENCE for all people          that stayed in the accomodation during the night."
      },
      "setDaoAddress(address)": {
        "notice": "This function can be only called by the owner of this contract, which is TDF Multisig"
      },
      "setDecayRatePerDay(uint256)": {
        "notice": "This function can be only called by the daoAddress or the owner of this contract, which is TDF Multisig"
      },
      "totalSupply()": {
        "notice": "Override of the standard totalSupply function that takes into the account gradual decay of user balances"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 244,
        "contract": "src/ERC20/PresenceToken.sol:PresenceToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 247,
        "contract": "src/ERC20/PresenceToken.sol:PresenceToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1963,
        "contract": "src/ERC20/PresenceToken.sol:PresenceToken",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 625,
        "contract": "src/ERC20/PresenceToken.sol:PresenceToken",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 631,
        "contract": "src/ERC20/PresenceToken.sol:PresenceToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 633,
        "contract": "src/ERC20/PresenceToken.sol:PresenceToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 635,
        "contract": "src/ERC20/PresenceToken.sol:PresenceToken",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 637,
        "contract": "src/ERC20/PresenceToken.sol:PresenceToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 1217,
        "contract": "src/ERC20/PresenceToken.sol:PresenceToken",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 116,
        "contract": "src/ERC20/PresenceToken.sol:PresenceToken",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 236,
        "contract": "src/ERC20/PresenceToken.sol:PresenceToken",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25,
        "contract": "src/ERC20/PresenceToken.sol:PresenceToken",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 104,
        "contract": "src/ERC20/PresenceToken.sol:PresenceToken",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12489,
        "contract": "src/ERC20/PresenceToken.sol:PresenceToken",
        "label": "daoAddress",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(TDFDiamondPartial)12480"
      },
      {
        "astId": 12505,
        "contract": "src/ERC20/PresenceToken.sol:PresenceToken",
        "label": "decayRatePerDay",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 12510,
        "contract": "src/ERC20/PresenceToken.sol:PresenceToken",
        "label": "lastDecayTimestamp",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12515,
        "contract": "src/ERC20/PresenceToken.sol:PresenceToken",
        "label": "lastDecayedBalance",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12519,
        "contract": "src/ERC20/PresenceToken.sol:PresenceToken",
        "label": "holders",
        "offset": 0,
        "slot": "205",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 12524,
        "contract": "src/ERC20/PresenceToken.sol:PresenceToken",
        "label": "isHolder",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(TDFDiamondPartial)12480": {
        "encoding": "inplace",
        "label": "contract TDFDiamondPartial",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}